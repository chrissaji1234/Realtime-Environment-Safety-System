
Realtime_Environment_Safety_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a760  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800a920  0800a920  0001a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa88  0800aa88  0001aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa90  0800aa90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa90  0800aa90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800aa98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001810  20000060  0800aaf8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001870  0800aaf8  00021870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002690a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b44  00000000  00000000  000469dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fc0  00000000  00000000  0004b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018b8  00000000  00000000  0004d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002faa7  00000000  00000000  0004eda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002629d  00000000  00000000  0007e847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012712c  00000000  00000000  000a4ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008e90  00000000  00000000  001cbc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001d4aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000060 	.word	0x20000060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a908 	.word	0x0800a908

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000064 	.word	0x20000064
 80001fc:	0800a908 	.word	0x0800a908

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_d2f>:
 80008bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008c4:	bf24      	itt	cs
 80008c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008ce:	d90d      	bls.n	80008ec <__aeabi_d2f+0x30>
 80008d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008e4:	bf08      	it	eq
 80008e6:	f020 0001 	biceq.w	r0, r0, #1
 80008ea:	4770      	bx	lr
 80008ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008f0:	d121      	bne.n	8000936 <__aeabi_d2f+0x7a>
 80008f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008f6:	bfbc      	itt	lt
 80008f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008fc:	4770      	bxlt	lr
 80008fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000902:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000906:	f1c2 0218 	rsb	r2, r2, #24
 800090a:	f1c2 0c20 	rsb	ip, r2, #32
 800090e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000912:	fa20 f002 	lsr.w	r0, r0, r2
 8000916:	bf18      	it	ne
 8000918:	f040 0001 	orrne.w	r0, r0, #1
 800091c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000920:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000924:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000928:	ea40 000c 	orr.w	r0, r0, ip
 800092c:	fa23 f302 	lsr.w	r3, r3, r2
 8000930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000934:	e7cc      	b.n	80008d0 <__aeabi_d2f+0x14>
 8000936:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800093a:	d107      	bne.n	800094c <__aeabi_d2f+0x90>
 800093c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000940:	bf1e      	ittt	ne
 8000942:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000946:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800094a:	4770      	bxne	lr
 800094c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000950:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <vApplicationGetIdleTaskMemory+0x30>)
 8000c6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	2000011c 	.word	0x2000011c

08000c8c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f023 030f 	bic.w	r3, r3, #15
 8000c9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f043 030c 	orr.w	r3, r3, #12
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	f043 030c 	orr.w	r3, r3, #12
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ccc:	f107 0208 	add.w	r2, r7, #8
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	214e      	movs	r1, #78	; 0x4e
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <lcd_send_cmd+0x5c>)
 8000cda:	f002 ff6d 	bl	8003bb8 <HAL_I2C_Master_Transmit>
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000384 	.word	0x20000384

08000cec <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f023 030f 	bic.w	r3, r3, #15
 8000cfc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	f043 030d 	orr.w	r3, r3, #13
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f043 0309 	orr.w	r3, r3, #9
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	f043 030d 	orr.w	r3, r3, #13
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d22:	7bbb      	ldrb	r3, [r7, #14]
 8000d24:	f043 0309 	orr.w	r3, r3, #9
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d2c:	f107 0208 	add.w	r2, r7, #8
 8000d30:	2364      	movs	r3, #100	; 0x64
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2304      	movs	r3, #4
 8000d36:	214e      	movs	r1, #78	; 0x4e
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <lcd_send_data+0x5c>)
 8000d3a:	f002 ff3d 	bl	8003bb8 <HAL_I2C_Master_Transmit>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000384 	.word	0x20000384

08000d4c <lcd_clear>:

void lcd_clear (void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	f7ff ff9a 	bl	8000c8c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	e005      	b.n	8000d6a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000d5e:	2020      	movs	r0, #32
 8000d60:	f7ff ffc4 	bl	8000cec <lcd_send_data>
	for (int i=0; i<70; i++)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b45      	cmp	r3, #69	; 0x45
 8000d6e:	ddf6      	ble.n	8000d5e <lcd_clear+0x12>
	}
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <lcd_put_cur>:
	}
	lcd_put_cur(1, 0);
}

void lcd_put_cur(int row, int col)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <lcd_put_cur+0x18>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <lcd_put_cur+0x22>
 8000d90:	e009      	b.n	8000da6 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	603b      	str	r3, [r7, #0]
            break;
 8000d9a:	e004      	b.n	8000da6 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000da2:	603b      	str	r3, [r7, #0]
            break;
 8000da4:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff6e 	bl	8000c8c <lcd_send_cmd>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <lcd_init>:


void lcd_init (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000dbc:	2032      	movs	r0, #50	; 0x32
 8000dbe:	f001 f8e5 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dc2:	2030      	movs	r0, #48	; 0x30
 8000dc4:	f7ff ff62 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000dc8:	2005      	movs	r0, #5
 8000dca:	f001 f8df 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dce:	2030      	movs	r0, #48	; 0x30
 8000dd0:	f7ff ff5c 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f001 f8d9 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000dda:	2030      	movs	r0, #48	; 0x30
 8000ddc:	f7ff ff56 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(10);
 8000de0:	200a      	movs	r0, #10
 8000de2:	f001 f8d3 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000de6:	2020      	movs	r0, #32
 8000de8:	f7ff ff50 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 f8cd 	bl	8001f8c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000df2:	2028      	movs	r0, #40	; 0x28
 8000df4:	f7ff ff4a 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f001 f8c7 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000dfe:	2008      	movs	r0, #8
 8000e00:	f7ff ff44 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f001 f8c1 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff ff3e 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(1);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f001 f8bb 	bl	8001f8c <HAL_Delay>
	HAL_Delay(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f001 f8b8 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000e1c:	2006      	movs	r0, #6
 8000e1e:	f7ff ff35 	bl	8000c8c <lcd_send_cmd>
	HAL_Delay(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f001 f8b2 	bl	8001f8c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000e28:	200c      	movs	r0, #12
 8000e2a:	f7ff ff2f 	bl	8000c8c <lcd_send_cmd>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000e3a:	e006      	b.n	8000e4a <lcd_send_string+0x18>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff51 	bl	8000cec <lcd_send_data>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f4      	bne.n	8000e3c <lcd_send_string+0xa>
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b09e      	sub	sp, #120	; 0x78
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f001 f85a 	bl	8001f1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 f885 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6a:	f000 f9dd 	bl	8001228 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e6e:	f000 f961 	bl	8001134 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e72:	f000 f9ab 	bl	80011cc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000e76:	f000 f8d1 	bl	800101c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e7a:	f000 f91b 	bl	80010b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();			// Initialize LCD and bring cursor to home
 8000e7e:	f7ff ff9b 	bl	8000db8 <lcd_init>
  lcd_clear();
 8000e82:	f7ff ff63 	bl	8000d4c <lcd_clear>
  lcd_put_cur(0,0);
 8000e86:	2100      	movs	r1, #0
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff76 	bl	8000d7a <lcd_put_cur>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);		// Calibrate ADC for better accuracy
 8000e8e:	217f      	movs	r1, #127	; 0x7f
 8000e90:	482e      	ldr	r0, [pc, #184]	; (8000f4c <main+0xf0>)
 8000e92:	f002 fb09 	bl	80034a8 <HAL_ADCEx_Calibration_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Semaphore */
  osSemaphoreDef(Binary_Semaphore);
 8000e96:	2300      	movs	r3, #0
 8000e98:	673b      	str	r3, [r7, #112]	; 0x70
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	677b      	str	r3, [r7, #116]	; 0x74
  Binary_SemaphoreHandle = osSemaphoreCreate(osSemaphore(Binary_Semaphore), 1);
 8000e9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f006 fcee 	bl	8007886 <osSemaphoreCreate>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <main+0xf4>)
 8000eae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readAudioSensor */
  osThreadDef(readAudioSensor, readAudioSensor_EF, osPriorityRealtime, 0, 128);
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <main+0xf8>)
 8000eb2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000eb6:	461d      	mov	r5, r3
 8000eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readAudioSensorHandle = osThreadCreate(osThread(readAudioSensor), NULL);
 8000ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f006 fc7b 	bl	80077c6 <osThreadCreate>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <main+0xfc>)
 8000ed4:	6013      	str	r3, [r2, #0]

  /* definition and creation of feedbackDevices */
  osThreadDef(feedbackDevices, feedbackDevices_EF, osPriorityNormal, 0, 128);
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <main+0x100>)
 8000ed8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000edc:	461d      	mov	r5, r3
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  feedbackDevicesHandle = osThreadCreate(osThread(feedbackDevices), NULL);
 8000eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fc68 	bl	80077c6 <osThreadCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <main+0x104>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdOutput */
  osThreadDef(lcdOutput, lcdOutput_EF, osPriorityNormal, 0, 128);
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <main+0x108>)
 8000efe:	f107 041c 	add.w	r4, r7, #28
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdOutputHandle = osThreadCreate(osThread(lcdOutput), NULL);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fc55 	bl	80077c6 <osThreadCreate>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <main+0x10c>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* definition and creation of readUVSensor */
  osThreadDef(readUVSensor, readUVSensor_EF, osPriorityRealtime, 0, 128);
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <main+0x110>)
 8000f24:	463c      	mov	r4, r7
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readUVSensorHandle = osThreadCreate(osThread(readUVSensor), NULL);
 8000f34:	463b      	mov	r3, r7
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 fc44 	bl	80077c6 <osThreadCreate>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <main+0x114>)
 8000f42:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f44:	f006 fc38 	bl	80077b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <main+0xec>
 8000f4a:	bf00      	nop
 8000f4c:	2000031c 	.word	0x2000031c
 8000f50:	20000988 	.word	0x20000988
 8000f54:	0800a930 	.word	0x0800a930
 8000f58:	20000978 	.word	0x20000978
 8000f5c:	0800a95c 	.word	0x0800a95c
 8000f60:	2000097c 	.word	0x2000097c
 8000f64:	0800a984 	.word	0x0800a984
 8000f68:	20000980 	.word	0x20000980
 8000f6c:	0800a9b0 	.word	0x0800a9b0
 8000f70:	20000984 	.word	0x20000984

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	2244      	movs	r2, #68	; 0x44
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 ffe6 	bl	8009f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f003 fb36 	bl	8004608 <HAL_PWREx_ControlVoltageScaling>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fa2:	f000 fcbd 	bl	8001920 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fa6:	2322      	movs	r3, #34	; 0x22
 8000fa8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000fc4:	231e      	movs	r3, #30
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fbd9 	bl	8004790 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000fe4:	f000 fc9c 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2303      	movs	r3, #3
 8000fee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2105      	movs	r1, #5
 8001002:	4618      	mov	r0, r3
 8001004:	f003 ffde 	bl	8004fc4 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800100e:	f000 fc87 	bl	8001920 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	; 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_ADC1_Init+0x90>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001036:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_ADC1_Init+0x90>)
 800103a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800103e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_ADC1_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_ADC1_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_ADC1_Init+0x90>)
 800104e:	2201      	movs	r2, #1
 8001050:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_ADC1_Init+0x90>)
 8001054:	2204      	movs	r2, #4
 8001056:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_ADC1_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_ADC1_Init+0x90>)
 8001060:	2201      	movs	r2, #1
 8001062:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_ADC1_Init+0x90>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_ADC1_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_ADC1_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_ADC1_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_ADC1_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_ADC1_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_ADC1_Init+0x90>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_ADC1_Init+0x90>)
 8001096:	f001 f9c5 	bl	8002424 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80010a0:	f000 fc3e 	bl	8001920 <Error_Handler>
   * can configure each ADC channel individually.
  */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000031c 	.word	0x2000031c
 80010b0:	50040000 	.word	0x50040000

080010b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <MX_I2C1_Init+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <MX_I2C1_Init+0x7c>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_I2C1_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_I2C1_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_I2C1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_I2C1_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_I2C1_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_I2C1_Init+0x74>)
 80010f0:	f002 fcc6 	bl	8003a80 <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 fc11 	bl	8001920 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <MX_I2C1_Init+0x74>)
 8001102:	f003 f881 	bl	8004208 <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 fc08 	bl	8001920 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_I2C1_Init+0x74>)
 8001114:	f003 f8c3 	bl	800429e <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 fbff 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000384 	.word	0x20000384
 800112c:	40005400 	.word	0x40005400
 8001130:	107075b0 	.word	0x107075b0

08001134 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <MX_LPUART1_UART_Init+0x94>)
 800113c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 800117e:	f005 f9dd 	bl	800653c <HAL_UART_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001188:	f000 fbca 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 8001190:	f005 ff72 	bl	8007078 <HAL_UARTEx_SetTxFifoThreshold>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800119a:	f000 fbc1 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800119e:	2100      	movs	r1, #0
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 80011a2:	f005 ffa7 	bl	80070f4 <HAL_UARTEx_SetRxFifoThreshold>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011ac:	f000 fbb8 	bl	8001920 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_LPUART1_UART_Init+0x90>)
 80011b2:	f005 ff28 	bl	8007006 <HAL_UARTEx_DisableFifoMode>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fbb0 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200003d8 	.word	0x200003d8
 80011c8:	40008000 	.word	0x40008000

080011cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2206      	movs	r2, #6
 80011dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fe:	2201      	movs	r2, #1
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800120a:	2201      	movs	r2, #1
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001210:	f003 f891 	bl	8004336 <HAL_PCD_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 fb81 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000046c 	.word	0x2000046c

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a59      	ldr	r2, [pc, #356]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <MX_GPIO_Init+0x180>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	4b54      	ldr	r3, [pc, #336]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <MX_GPIO_Init+0x180>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b51      	ldr	r3, [pc, #324]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <MX_GPIO_Init+0x180>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a47      	ldr	r2, [pc, #284]	; (80013a8 <MX_GPIO_Init+0x180>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <MX_GPIO_Init+0x180>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a3b      	ldr	r2, [pc, #236]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <MX_GPIO_Init+0x180>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80012ce:	f003 fa4f 	bl	8004770 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	210b      	movs	r1, #11
 80012d6:	4835      	ldr	r0, [pc, #212]	; (80013ac <MX_GPIO_Init+0x184>)
 80012d8:	f002 fbba 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80012e2:	4833      	ldr	r0, [pc, #204]	; (80013b0 <MX_GPIO_Init+0x188>)
 80012e4:	f002 fbb4 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	4831      	ldr	r0, [pc, #196]	; (80013b4 <MX_GPIO_Init+0x18c>)
 80012ee:	f002 fbaf 	bl	8003a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4828      	ldr	r0, [pc, #160]	; (80013ac <MX_GPIO_Init+0x184>)
 800130a:	f002 fa0f 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800130e:	230b      	movs	r3, #11
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_GPIO_Init+0x184>)
 8001326:	f002 fa01 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800132a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	481b      	ldr	r0, [pc, #108]	; (80013b0 <MX_GPIO_Init+0x188>)
 8001344:	f002 f9f2 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135a:	2307      	movs	r3, #7
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_GPIO_Init+0x190>)
 8001366:	f002 f9e1 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800136a:	2320      	movs	r3, #32
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <MX_GPIO_Init+0x18c>)
 800137e:	f002 f9d5 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001382:	2340      	movs	r3, #64	; 0x40
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4806      	ldr	r0, [pc, #24]	; (80013b4 <MX_GPIO_Init+0x18c>)
 800139a:	f002 f9c7 	bl	800372c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139e:	bf00      	nop
 80013a0:	3730      	adds	r7, #48	; 0x30
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000400 	.word	0x48000400
 80013b4:	48001800 	.word	0x48001800
 80013b8:	48000c00 	.word	0x48000c00

080013bc <ADC_Select_CH8>:

/* USER CODE BEGIN 4 */

void ADC_Select_CH8(void)	// Configures the ADC to use channel 8
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_8;
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <ADC_Select_CH8+0x4c>)
 80013d4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d6:	2306      	movs	r3, #6
 80013d8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013de:	237f      	movs	r3, #127	; 0x7f
 80013e0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013e2:	2304      	movs	r3, #4
 80013e4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ea:	463b      	mov	r3, r7
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <ADC_Select_CH8+0x50>)
 80013f0:	f001 fa90 	bl	8002914 <HAL_ADC_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <ADC_Select_CH8+0x42>
	  {
	    Error_Handler();
 80013fa:	f000 fa91 	bl	8001920 <Error_Handler>
	  }

}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	21800100 	.word	0x21800100
 800140c:	2000031c 	.word	0x2000031c

08001410 <ADC_Select_CH14>:


void ADC_Select_CH14(void)	// Configures the ADC to use channel 14
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_14;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <ADC_Select_CH14+0x4c>)
 8001428:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800142a:	2306      	movs	r3, #6
 800142c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001432:	237f      	movs	r3, #127	; 0x7f
 8001434:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001436:	2304      	movs	r3, #4
 8001438:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <ADC_Select_CH14+0x50>)
 8001444:	f001 fa66 	bl	8002914 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <ADC_Select_CH14+0x42>
	 {
	   Error_Handler();
 800144e:	f000 fa67 	bl	8001920 <Error_Handler>
	 }
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	3ac04000 	.word	0x3ac04000
 8001460:	2000031c 	.word	0x2000031c
 8001464:	00000000 	.word	0x00000000

08001468 <readAudioSensor_EF>:
  * calculates the dB value. It finally stores the value into a string and releases
  * the semaphore.
  */
/* USER CODE END Header_readAudioSensor_EF */
void readAudioSensor_EF(void const * argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char *strtosend1 = "Entering readAudioSensor\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend1, strlen(strtosend1), HAL_MAX_DELAY);

	  osSemaphoreWait(Binary_SemaphoreHandle, osWaitForever);
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <readAudioSensor_EF+0xa8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	4618      	mov	r0, r3
 800147a:	f006 fa37 	bl	80078ec <osSemaphoreWait>

	  ADC_Select_CH8();
 800147e:	f7ff ff9d 	bl	80013bc <ADC_Select_CH8>
	  HAL_ADC_Start(&hadc1);
 8001482:	4824      	ldr	r0, [pc, #144]	; (8001514 <readAudioSensor_EF+0xac>)
 8001484:	f001 f914 	bl	80026b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	4821      	ldr	r0, [pc, #132]	; (8001514 <readAudioSensor_EF+0xac>)
 800148e:	f001 f9a5 	bl	80027dc <HAL_ADC_PollForConversion>
	  audio_raw = HAL_ADC_GetValue(&hadc1);
 8001492:	4820      	ldr	r0, [pc, #128]	; (8001514 <readAudioSensor_EF+0xac>)
 8001494:	f001 fa31 	bl	80028fa <HAL_ADC_GetValue>
 8001498:	4603      	mov	r3, r0
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <readAudioSensor_EF+0xb0>)
 800149c:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 800149e:	481d      	ldr	r0, [pc, #116]	; (8001514 <readAudioSensor_EF+0xac>)
 80014a0:	f001 f969 	bl	8002776 <HAL_ADC_Stop>

	  db_current = (audio_raw * 0.0269) + 23.143;				// Calculated linear regression formula using SPL meter.
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <readAudioSensor_EF+0xb0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f965 	bl	8000778 <__aeabi_ui2d>
 80014ae:	a314      	add	r3, pc, #80	; (adr r3, 8001500 <readAudioSensor_EF+0x98>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe fef4 	bl	80002a0 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	a311      	add	r3, pc, #68	; (adr r3, 8001508 <readAudioSensor_EF+0xa0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f81b 	bl	8000500 <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff f9cb 	bl	800086c <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <readAudioSensor_EF+0xb4>)
 80014da:	6013      	str	r3, [r2, #0]
	  	  	  	  	  	  	  	  	  	  	  	  	  	  	// Took ADC readings at different dB levels.

	  snprintf(audio_str, sizeof(audio_str), "dB: %d", db_current);
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <readAudioSensor_EF+0xb4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <readAudioSensor_EF+0xb8>)
 80014e2:	2114      	movs	r1, #20
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <readAudioSensor_EF+0xbc>)
 80014e6:	f008 fd01 	bl	8009eec <sniprintf>

//	  char *strtosend2 = "Exiting readAudioSensor\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend2, strlen(strtosend2), HAL_MAX_DELAY);

	  osSemaphoreRelease(Binary_SemaphoreHandle);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <readAudioSensor_EF+0xa8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fa4a 	bl	8007988 <osSemaphoreRelease>


    osDelay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f006 f9b2 	bl	800785e <osDelay>
	  osSemaphoreWait(Binary_SemaphoreHandle, osWaitForever);
 80014fa:	e7b9      	b.n	8001470 <readAudioSensor_EF+0x8>
 80014fc:	f3af 8000 	nop.w
 8001500:	710cb296 	.word	0x710cb296
 8001504:	3f9b8bac 	.word	0x3f9b8bac
 8001508:	a5e353f8 	.word	0xa5e353f8
 800150c:	4037249b 	.word	0x4037249b
 8001510:	20000988 	.word	0x20000988
 8001514:	2000031c 	.word	0x2000031c
 8001518:	2000098c 	.word	0x2000098c
 800151c:	200009bc 	.word	0x200009bc
 8001520:	0800a9cc 	.word	0x0800a9cc
 8001524:	20000994 	.word	0x20000994

08001528 <feedbackDevices_EF>:
* on. Otherwise, the green LED will be illuminated. In addition to this, if the UV index is greater
* than or equal to 8, the vibration motor will begin to vibrate.
*/
/* USER CODE END Header_feedbackDevices_EF */
void feedbackDevices_EF(void const * argument)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  {

//	  char *strtosend1 = "Entering feedbackDevices\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend1, strlen(strtosend1), HAL_MAX_DELAY);

	  if (db_current < 85){
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <feedbackDevices_EF+0x60>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b54      	cmp	r3, #84	; 0x54
 8001536:	dc0a      	bgt.n	800154e <feedbackDevices_EF+0x26>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <feedbackDevices_EF+0x64>)
 800153e:	f002 fa87 	bl	8003a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2108      	movs	r1, #8
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <feedbackDevices_EF+0x64>)
 8001548:	f002 fa82 	bl	8003a50 <HAL_GPIO_WritePin>
 800154c:	e009      	b.n	8001562 <feedbackDevices_EF+0x3a>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2101      	movs	r1, #1
 8001552:	480e      	ldr	r0, [pc, #56]	; (800158c <feedbackDevices_EF+0x64>)
 8001554:	f002 fa7c 	bl	8003a50 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	480b      	ldr	r0, [pc, #44]	; (800158c <feedbackDevices_EF+0x64>)
 800155e:	f002 fa77 	bl	8003a50 <HAL_GPIO_WritePin>
	  }

	  if (uv_current >= 8){
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <feedbackDevices_EF+0x68>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b07      	cmp	r3, #7
 8001568:	dd05      	ble.n	8001576 <feedbackDevices_EF+0x4e>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <feedbackDevices_EF+0x64>)
 8001570:	f002 fa6e 	bl	8003a50 <HAL_GPIO_WritePin>
 8001574:	e004      	b.n	8001580 <feedbackDevices_EF+0x58>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	4804      	ldr	r0, [pc, #16]	; (800158c <feedbackDevices_EF+0x64>)
 800157c:	f002 fa68 	bl	8003a50 <HAL_GPIO_WritePin>
//	  char *strtosend2 = "Exiting feedbackDevices\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend2, strlen(strtosend2), HAL_MAX_DELAY);



    osDelay(200);
 8001580:	20c8      	movs	r0, #200	; 0xc8
 8001582:	f006 f96c 	bl	800785e <osDelay>
	  if (db_current < 85){
 8001586:	e7d3      	b.n	8001530 <feedbackDevices_EF+0x8>
 8001588:	200009bc 	.word	0x200009bc
 800158c:	48000800 	.word	0x48000800
 8001590:	200009c0 	.word	0x200009c0

08001594 <lcdOutput_EF>:
* moves the cursor to the start of the next line and then displays the current UV index reading
* to the screen.
*/
/* USER CODE END Header_lcdOutput_EF */
void lcdOutput_EF(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  {

//	  char *strtosend1 = "Entering lcdOutputDevices\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend1, strlen(strtosend1), HAL_MAX_DELAY);

	  lcd_clear();
 800159c:	f7ff fbd6 	bl	8000d4c <lcd_clear>
	  lcd_put_cur(0,0);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fbe9 	bl	8000d7a <lcd_put_cur>

	  lcd_send_string(audio_str);
 80015a8:	4806      	ldr	r0, [pc, #24]	; (80015c4 <lcdOutput_EF+0x30>)
 80015aa:	f7ff fc42 	bl	8000e32 <lcd_send_string>
	  lcd_put_cur(1,0);
 80015ae:	2100      	movs	r1, #0
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fbe2 	bl	8000d7a <lcd_put_cur>
	  lcd_send_string(uv_str);
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <lcdOutput_EF+0x34>)
 80015b8:	f7ff fc3b 	bl	8000e32 <lcd_send_string>

//	  char *strtosend2 = "Exciting lcdOutputDevices\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend2, strlen(strtosend2), HAL_MAX_DELAY);


    osDelay(200);
 80015bc:	20c8      	movs	r0, #200	; 0xc8
 80015be:	f006 f94e 	bl	800785e <osDelay>
	  lcd_clear();
 80015c2:	e7eb      	b.n	800159c <lcdOutput_EF+0x8>
 80015c4:	20000994 	.word	0x20000994
 80015c8:	200009a8 	.word	0x200009a8
 80015cc:	00000000 	.word	0x00000000

080015d0 <readUVSensor_EF>:
* based on the voltage calculated. Finally, the current UV index is converted to a string and the
* semaphore is released.
*/
/* USER CODE END Header_readUVSensor_EF */
void readUVSensor_EF(void const * argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  char *strtosend1 = "Entering readUVSensor\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend1, strlen(strtosend1), HAL_MAX_DELAY);

	  osSemaphoreWait(Binary_SemaphoreHandle, osWaitForever);
 80015d8:	4bab      	ldr	r3, [pc, #684]	; (8001888 <readUVSensor_EF+0x2b8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	4618      	mov	r0, r3
 80015e2:	f006 f983 	bl	80078ec <osSemaphoreWait>

	  ADC_Select_CH14();
 80015e6:	f7ff ff13 	bl	8001410 <ADC_Select_CH14>
	  HAL_ADC_Start(&hadc1);
 80015ea:	48a8      	ldr	r0, [pc, #672]	; (800188c <readUVSensor_EF+0x2bc>)
 80015ec:	f001 f860 	bl	80026b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	48a5      	ldr	r0, [pc, #660]	; (800188c <readUVSensor_EF+0x2bc>)
 80015f6:	f001 f8f1 	bl	80027dc <HAL_ADC_PollForConversion>
	  uv_raw = HAL_ADC_GetValue(&hadc1);
 80015fa:	48a4      	ldr	r0, [pc, #656]	; (800188c <readUVSensor_EF+0x2bc>)
 80015fc:	f001 f97d 	bl	80028fa <HAL_ADC_GetValue>
 8001600:	4603      	mov	r3, r0
 8001602:	4aa3      	ldr	r2, [pc, #652]	; (8001890 <readUVSensor_EF+0x2c0>)
 8001604:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8001606:	48a1      	ldr	r0, [pc, #644]	; (800188c <readUVSensor_EF+0x2bc>)
 8001608:	f001 f8b5 	bl	8002776 <HAL_ADC_Stop>

	  uv_voltage = (uv_raw * (3.3/4095)) * 1000;
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <readUVSensor_EF+0x2c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff f8b1 	bl	8000778 <__aeabi_ui2d>
 8001616:	a39a      	add	r3, pc, #616	; (adr r3, 8001880 <readUVSensor_EF+0x2b0>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fe40 	bl	80002a0 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b99      	ldr	r3, [pc, #612]	; (8001894 <readUVSensor_EF+0x2c4>)
 800162e:	f7fe fe37 	bl	80002a0 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff f93f 	bl	80008bc <__aeabi_d2f>
 800163e:	4603      	mov	r3, r0
 8001640:	4a95      	ldr	r2, [pc, #596]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001642:	6013      	str	r3, [r2, #0]

	  if (uv_voltage < 50){
 8001644:	4b94      	ldr	r3, [pc, #592]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800189c <readUVSensor_EF+0x2cc>
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d503      	bpl.n	8001660 <readUVSensor_EF+0x90>
		  uv_current = 0;
 8001658:	4b91      	ldr	r3, [pc, #580]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e0fc      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 50 && uv_voltage <= 227){
 8001660:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001662:	edd3 7a00 	vldr	s15, [r3]
 8001666:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800189c <readUVSensor_EF+0x2cc>
 800166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	db0d      	blt.n	8001690 <readUVSensor_EF+0xc0>
 8001674:	4b88      	ldr	r3, [pc, #544]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80018a4 <readUVSensor_EF+0x2d4>
 800167e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001686:	d803      	bhi.n	8001690 <readUVSensor_EF+0xc0>
		  uv_current = 1;
 8001688:	4b85      	ldr	r3, [pc, #532]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e0e4      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 228 && uv_voltage <= 318){
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80018a8 <readUVSensor_EF+0x2d8>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	db0d      	blt.n	80016c0 <readUVSensor_EF+0xf0>
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <readUVSensor_EF+0x2c8>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80018ac <readUVSensor_EF+0x2dc>
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d803      	bhi.n	80016c0 <readUVSensor_EF+0xf0>
		  uv_current = 2;
 80016b8:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <readUVSensor_EF+0x2d0>)
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e0cc      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 319 && uv_voltage <= 408){
 80016c0:	4b75      	ldr	r3, [pc, #468]	; (8001898 <readUVSensor_EF+0x2c8>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80018b0 <readUVSensor_EF+0x2e0>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	db0d      	blt.n	80016f0 <readUVSensor_EF+0x120>
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <readUVSensor_EF+0x2c8>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80018b4 <readUVSensor_EF+0x2e4>
 80016de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	d803      	bhi.n	80016f0 <readUVSensor_EF+0x120>
		  uv_current = 3;
 80016e8:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <readUVSensor_EF+0x2d0>)
 80016ea:	2203      	movs	r2, #3
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e0b4      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 409 && uv_voltage <= 503){
 80016f0:	4b69      	ldr	r3, [pc, #420]	; (8001898 <readUVSensor_EF+0x2c8>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80018b8 <readUVSensor_EF+0x2e8>
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	db0d      	blt.n	8001720 <readUVSensor_EF+0x150>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80018bc <readUVSensor_EF+0x2ec>
 800170e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	d803      	bhi.n	8001720 <readUVSensor_EF+0x150>
		  uv_current = 4;
 8001718:	4b61      	ldr	r3, [pc, #388]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800171a:	2204      	movs	r2, #4
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e09c      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 504 && uv_voltage <= 606){
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80018c0 <readUVSensor_EF+0x2f0>
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	db0d      	blt.n	8001750 <readUVSensor_EF+0x180>
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80018c4 <readUVSensor_EF+0x2f4>
 800173e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001746:	d803      	bhi.n	8001750 <readUVSensor_EF+0x180>
		  uv_current = 5;
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800174a:	2205      	movs	r2, #5
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e084      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 607 && uv_voltage <= 696){
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80018c8 <readUVSensor_EF+0x2f8>
 800175a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	db0d      	blt.n	8001780 <readUVSensor_EF+0x1b0>
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80018cc <readUVSensor_EF+0x2fc>
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d803      	bhi.n	8001780 <readUVSensor_EF+0x1b0>
		  uv_current = 6;
 8001778:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800177a:	2206      	movs	r2, #6
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e06c      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 697 && uv_voltage <= 795){
 8001780:	4b45      	ldr	r3, [pc, #276]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80018d0 <readUVSensor_EF+0x300>
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	db0d      	blt.n	80017b0 <readUVSensor_EF+0x1e0>
 8001794:	4b40      	ldr	r3, [pc, #256]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80018d4 <readUVSensor_EF+0x304>
 800179e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d803      	bhi.n	80017b0 <readUVSensor_EF+0x1e0>
		  uv_current = 7;
 80017a8:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <readUVSensor_EF+0x2d0>)
 80017aa:	2207      	movs	r2, #7
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e054      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 796 && uv_voltage <= 881){
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <readUVSensor_EF+0x2c8>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80018d8 <readUVSensor_EF+0x308>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	db0d      	blt.n	80017e0 <readUVSensor_EF+0x210>
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <readUVSensor_EF+0x2c8>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80018dc <readUVSensor_EF+0x30c>
 80017ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d803      	bhi.n	80017e0 <readUVSensor_EF+0x210>
		  uv_current = 8;
 80017d8:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <readUVSensor_EF+0x2d0>)
 80017da:	2208      	movs	r2, #8
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	e03c      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 882 && uv_voltage <= 976){
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <readUVSensor_EF+0x2c8>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80018e0 <readUVSensor_EF+0x310>
 80017ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	db0d      	blt.n	8001810 <readUVSensor_EF+0x240>
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <readUVSensor_EF+0x2c8>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80018e4 <readUVSensor_EF+0x314>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d803      	bhi.n	8001810 <readUVSensor_EF+0x240>
		  uv_current = 9;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800180a:	2209      	movs	r2, #9
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e024      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 977 && uv_voltage <= 1079){
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80018e8 <readUVSensor_EF+0x318>
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	db0d      	blt.n	8001840 <readUVSensor_EF+0x270>
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018ec <readUVSensor_EF+0x31c>
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d803      	bhi.n	8001840 <readUVSensor_EF+0x270>
		  uv_current = 10;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800183a:	220a      	movs	r2, #10
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00c      	b.n	800185a <readUVSensor_EF+0x28a>
	  }
	  else if (uv_voltage >= 1080){
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <readUVSensor_EF+0x2c8>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80018f0 <readUVSensor_EF+0x320>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	db02      	blt.n	800185a <readUVSensor_EF+0x28a>
		  uv_current = 11;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <readUVSensor_EF+0x2d0>)
 8001856:	220b      	movs	r2, #11
 8001858:	601a      	str	r2, [r3, #0]
	  }

	  snprintf(uv_str, sizeof(uv_str), "UV: %d", uv_current);
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <readUVSensor_EF+0x2d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a25      	ldr	r2, [pc, #148]	; (80018f4 <readUVSensor_EF+0x324>)
 8001860:	2114      	movs	r1, #20
 8001862:	4825      	ldr	r0, [pc, #148]	; (80018f8 <readUVSensor_EF+0x328>)
 8001864:	f008 fb42 	bl	8009eec <sniprintf>


//	  char *strtosend2 = "Exiting readUVSensor\n";
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *) strtosend2, strlen(strtosend2), HAL_MAX_DELAY);

	  osSemaphoreRelease(Binary_SemaphoreHandle);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <readUVSensor_EF+0x2b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f006 f88b 	bl	8007988 <osSemaphoreRelease>


    osDelay(100);
 8001872:	2064      	movs	r0, #100	; 0x64
 8001874:	f005 fff3 	bl	800785e <osDelay>
	  osSemaphoreWait(Binary_SemaphoreHandle, osWaitForever);
 8001878:	e6ae      	b.n	80015d8 <readUVSensor_EF+0x8>
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	e734d9b4 	.word	0xe734d9b4
 8001884:	3f4a680c 	.word	0x3f4a680c
 8001888:	20000988 	.word	0x20000988
 800188c:	2000031c 	.word	0x2000031c
 8001890:	20000990 	.word	0x20000990
 8001894:	408f4000 	.word	0x408f4000
 8001898:	200009c4 	.word	0x200009c4
 800189c:	42480000 	.word	0x42480000
 80018a0:	200009c0 	.word	0x200009c0
 80018a4:	43630000 	.word	0x43630000
 80018a8:	43640000 	.word	0x43640000
 80018ac:	439f0000 	.word	0x439f0000
 80018b0:	439f8000 	.word	0x439f8000
 80018b4:	43cc0000 	.word	0x43cc0000
 80018b8:	43cc8000 	.word	0x43cc8000
 80018bc:	43fb8000 	.word	0x43fb8000
 80018c0:	43fc0000 	.word	0x43fc0000
 80018c4:	44178000 	.word	0x44178000
 80018c8:	4417c000 	.word	0x4417c000
 80018cc:	442e0000 	.word	0x442e0000
 80018d0:	442e4000 	.word	0x442e4000
 80018d4:	4446c000 	.word	0x4446c000
 80018d8:	44470000 	.word	0x44470000
 80018dc:	445c4000 	.word	0x445c4000
 80018e0:	445c8000 	.word	0x445c8000
 80018e4:	44740000 	.word	0x44740000
 80018e8:	44744000 	.word	0x44744000
 80018ec:	4486e000 	.word	0x4486e000
 80018f0:	44870000 	.word	0x44870000
 80018f4:	0800a9d4 	.word	0x0800a9d4
 80018f8:	200009a8 	.word	0x200009a8

080018fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190e:	f000 fb1d 	bl	8001f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012c00 	.word	0x40012c00

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>
	...

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_MspInit+0x4c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	; 0x60
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	210f      	movs	r1, #15
 8001966:	f06f 0001 	mvn.w	r0, #1
 800196a:	f001 feb5 	bl	80036d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0b0      	sub	sp, #192	; 0xc0
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	2294      	movs	r2, #148	; 0x94
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f008 fad9 	bl	8009f54 <memset>
  if(hadc->Instance==ADC1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <HAL_ADC_MspInit+0x100>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d162      	bne.n	8001a72 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80019c2:	230c      	movs	r3, #12
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019ca:	2302      	movs	r3, #2
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f107 0318 	add.w	r3, r7, #24
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fde1 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019e8:	f7ff ff9a 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f0:	4a23      	ldr	r2, [pc, #140]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 80019f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_ADC_MspInit+0x104>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a34:	2308      	movs	r3, #8
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a3a:	230b      	movs	r3, #11
 8001a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f001 fe6c 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a54:	2320      	movs	r3, #32
 8001a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a5a:	230b      	movs	r3, #11
 8001a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_ADC_MspInit+0x108>)
 8001a6e:	f001 fe5d 	bl	800372c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	37c0      	adds	r7, #192	; 0xc0
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	50040000 	.word	0x50040000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000800 	.word	0x48000800

08001a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0ae      	sub	sp, #184	; 0xb8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2294      	movs	r2, #148	; 0x94
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f008 fa53 	bl	8009f54 <memset>
  if(hi2c->Instance==I2C1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_I2C_MspInit+0xb0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d13b      	bne.n	8001b30 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fd6d 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff ff26 	bl	8001920 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af4:	2312      	movs	r3, #18
 8001af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b06:	2304      	movs	r3, #4
 8001b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b10:	4619      	mov	r1, r3
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <HAL_I2C_MspInit+0xb8>)
 8001b14:	f001 fe0a 	bl	800372c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b22:	6593      	str	r3, [r2, #88]	; 0x58
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_I2C_MspInit+0xb4>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	37b8      	adds	r7, #184	; 0xb8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000400 	.word	0x48000400

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0ae      	sub	sp, #184	; 0xb8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	2294      	movs	r2, #148	; 0x94
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f008 f9f5 	bl	8009f54 <memset>
  if(huart->Instance==LPUART1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_UART_MspInit+0xb4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d13d      	bne.n	8001bf0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001b74:	2320      	movs	r3, #32
 8001b76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fd0f 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b8c:	f7ff fec8 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001bc0:	f002 fdd6 	bl	8004770 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001bc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bde:	2308      	movs	r3, #8
 8001be0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001be4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_UART_MspInit+0xbc>)
 8001bec:	f001 fd9e 	bl	800372c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	37b8      	adds	r7, #184	; 0xb8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40008000 	.word	0x40008000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48001800 	.word	0x48001800

08001c04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0b0      	sub	sp, #192	; 0xc0
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	2294      	movs	r2, #148	; 0x94
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f008 f995 	bl	8009f54 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c32:	d16c      	bne.n	8001d0e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	4618      	mov	r0, r3
 8001c46:	f003 fcad 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c50:	f7ff fe66 	bl	8001920 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c6c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c86:	230a      	movs	r3, #10
 8001c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c90:	4619      	mov	r1, r3
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	f001 fd49 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	f001 fd38 	bl	800372c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d114      	bne.n	8001d0a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001cf8:	f002 fd2a 	bl	8004750 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_PCD_MspInit+0x114>)
 8001d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d06:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d08:	e001      	b.n	8001d0e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001d0a:	f002 fd21 	bl	8004750 <HAL_PWREx_EnableVddUSB>
}
 8001d0e:	bf00      	nop
 8001d10:	37c0      	adds	r7, #192	; 0xc0
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_InitTick+0xc8>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_InitTick+0xc8>)
 8001d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d34:	6613      	str	r3, [r2, #96]	; 0x60
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_InitTick+0xc8>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d42:	f107 020c 	add.w	r2, r7, #12
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fb37 	bl	80053c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d52:	f003 fb1f 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8001d56:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_InitTick+0xcc>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	3b01      	subs	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d66:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_InitTick+0xd0>)
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <HAL_InitTick+0xd4>)
 8001d6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_InitTick+0xd0>)
 8001d6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d72:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_InitTick+0xd0>)
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_InitTick+0xd0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_InitTick+0xd0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_InitTick+0xd0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d8c:	4817      	ldr	r0, [pc, #92]	; (8001dec <HAL_InitTick+0xd0>)
 8001d8e:	f004 f921 	bl	8005fd4 <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001da0:	4812      	ldr	r0, [pc, #72]	; (8001dec <HAL_InitTick+0xd0>)
 8001da2:	f004 f979 	bl	8006098 <HAL_TIM_Base_Start_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d111      	bne.n	8001dd8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001db4:	2019      	movs	r0, #25
 8001db6:	f001 fcab 	bl	8003710 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d808      	bhi.n	8001dd2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	2019      	movs	r0, #25
 8001dc6:	f001 fc87 	bl	80036d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_InitTick+0xd8>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	e002      	b.n	8001dd8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3730      	adds	r7, #48	; 0x30
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	431bde83 	.word	0x431bde83
 8001dec:	200009c8 	.word	0x200009c8
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	20000004 	.word	0x20000004

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e2a:	f004 f9a5 	bl	8006178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200009c8 	.word	0x200009c8

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f008 f8d2 	bl	800a010 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200a0000 	.word	0x200a0000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000a14 	.word	0x20000a14
 8001ea0:	20001870 	.word	0x20001870

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ecc:	f7ff ffea 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	; (8001f08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <LoopForever+0xe>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	; (8001f14 <LoopForever+0x16>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f008 f891 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001efa:	f7fe ffaf 	bl	8000e5c <main>

08001efe <LoopForever>:

LoopForever:
    b LoopForever
 8001efe:	e7fe      	b.n	8001efe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f00:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001f0c:	0800aa98 	.word	0x0800aa98
  ldr r2, =_sbss
 8001f10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f14:	20001870 	.word	0x20001870

08001f18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_IRQHandler>

08001f1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f001 fbcc 	bl	80036c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f2a:	200f      	movs	r0, #15
 8001f2c:	f7ff fef6 	bl	8001d1c <HAL_InitTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d002      	beq.n	8001f3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	e001      	b.n	8001f40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f3c:	f7ff fcf6 	bl	800192c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f40:	79fb      	ldrb	r3, [r7, #7]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x20>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_IncTick+0x24>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_IncTick+0x24>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000a18 	.word	0x20000a18

08001f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return uwTick;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_GetTick+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000a18 	.word	0x20000a18

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff ffee 	bl	8001f74 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffde 	bl	8001f74 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800203c:	b480      	push	{r7}
 800203e:	b087      	sub	sp, #28
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3360      	adds	r3, #96	; 0x60
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <LL_ADC_SetOffset+0x44>)
 800205e:	4013      	ands	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	4313      	orrs	r3, r2
 800206c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002074:	bf00      	nop
 8002076:	371c      	adds	r7, #28
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	03fff000 	.word	0x03fff000

08002084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3360      	adds	r3, #96	; 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3360      	adds	r3, #96	; 0x60
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002132:	b480      	push	{r7}
 8002134:	b087      	sub	sp, #28
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3330      	adds	r3, #48	; 0x30
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	4413      	add	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	211f      	movs	r1, #31
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	401a      	ands	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0e9b      	lsrs	r3, r3, #26
 800216a:	f003 011f 	and.w	r1, r3, #31
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa01 f303 	lsl.w	r3, r1, r3
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800218a:	b480      	push	{r7}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3314      	adds	r3, #20
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0d1b      	lsrs	r3, r3, #20
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2107      	movs	r1, #7
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	431a      	orrs	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0318 	and.w	r3, r3, #24
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002204:	40d9      	lsrs	r1, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	400b      	ands	r3, r1
 800220a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220e:	431a      	orrs	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	0007ffff 	.word	0x0007ffff

08002228 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6093      	str	r3, [r2, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800225c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002288:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b0:	d101      	bne.n	80022b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002300:	f043 0202 	orr.w	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <LL_ADC_IsEnabled+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_ADC_IsEnabled+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d101      	bne.n	8002352 <LL_ADC_IsDisableOngoing+0x18>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <LL_ADC_IsDisableOngoing+0x1a>
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002374:	f043 0204 	orr.w	r2, r3, #4
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239c:	f043 0210 	orr.w	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d101      	bne.n	8002416 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e129      	b.n	8002692 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fa95 	bl	800197c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fef1 	bl	800224c <LL_ADC_IsDeepPowerDownEnabled>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fed7 	bl	8002228 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff0c 	bl	800229c <LL_ADC_IsInternalRegulatorEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d115      	bne.n	80024b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fef0 	bl	8002274 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002494:	4b81      	ldr	r3, [pc, #516]	; (800269c <HAL_ADC_Init+0x278>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	4a81      	ldr	r2, [pc, #516]	; (80026a0 <HAL_ADC_Init+0x27c>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff feee 	bl	800229c <LL_ADC_IsInternalRegulatorEnabled>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff62 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 80024ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 80c2 	bne.w	8002680 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80be 	bne.w	8002680 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800250c:	f043 0202 	orr.w	r2, r3, #2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fefb 	bl	8002314 <LL_ADC_IsEnabled>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002524:	485f      	ldr	r0, [pc, #380]	; (80026a4 <HAL_ADC_Init+0x280>)
 8002526:	f7ff fef5 	bl	8002314 <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4619      	mov	r1, r3
 8002536:	485c      	ldr	r0, [pc, #368]	; (80026a8 <HAL_ADC_Init+0x284>)
 8002538:	f7ff fd4c 	bl	8001fd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7e5b      	ldrb	r3, [r3, #25]
 8002540:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002546:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800254c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002552:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d106      	bne.n	8002578 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	3b01      	subs	r3, #1
 8002570:	045b      	lsls	r3, r3, #17
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	4b44      	ldr	r3, [pc, #272]	; (80026ac <HAL_ADC_Init+0x288>)
 800259c:	4013      	ands	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff26 	bl	80023fe <LL_ADC_INJ_IsConversionOngoing>
 80025b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d140      	bne.n	800263c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d13d      	bne.n	800263c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e1b      	ldrb	r3, [r3, #24]
 80025c8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ca:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025e2:	f023 0306 	bic.w	r3, r3, #6
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d118      	bne.n	800262c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800261c:	430a      	orrs	r2, r1
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	611a      	str	r2, [r3, #16]
 800262a:	e007      	b.n	800263c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d10c      	bne.n	800265e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f023 010f 	bic.w	r1, r3, #15
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
 800265c:	e007      	b.n	800266e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 020f 	bic.w	r2, r2, #15
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f023 0303 	bic.w	r3, r3, #3
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	; 0x58
 800267e:	e007      	b.n	8002690 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f043 0210 	orr.w	r2, r3, #16
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002690:	7ffb      	ldrb	r3, [r7, #31]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000
 80026a0:	053e2d63 	.word	0x053e2d63
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040300 	.word	0x50040300
 80026ac:	fff0c007 	.word	0xfff0c007

080026b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fe77 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d14f      	bne.n	8002768 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Start+0x26>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e04b      	b.n	800276e <HAL_ADC_Start+0xbe>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fdd0 	bl	8003284 <ADC_Enable>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d137      	bne.n	800275e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	d106      	bne.n	800271e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	f023 0206 	bic.w	r2, r3, #6
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
 800271c:	e002      	b.n	8002724 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	221c      	movs	r2, #28
 800272a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fe02 	bl	8002360 <LL_ADC_REG_StartConversion>
 800275c:	e006      	b.n	800276c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002766:	e001      	b.n	800276c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002768:	2302      	movs	r3, #2
 800276a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_ADC_Stop+0x16>
 8002788:	2302      	movs	r3, #2
 800278a:	e023      	b.n	80027d4 <HAL_ADC_Stop+0x5e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002794:	2103      	movs	r1, #3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fcb8 	bl	800310c <ADC_ConversionStop>
 800279c:	4603      	mov	r3, r0
 800279e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d111      	bne.n	80027ca <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fdf2 	bl	8003390 <ADC_Disable>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d102      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027ee:	2308      	movs	r3, #8
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e010      	b.n	8002816 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002806:	f043 0220 	orr.w	r2, r3, #32
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06f      	b.n	80028f2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002812:	2304      	movs	r3, #4
 8002814:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002816:	f7ff fbad 	bl	8001f74 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800281c:	e021      	b.n	8002862 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d01d      	beq.n	8002862 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002826:	f7ff fba5 	bl	8001f74 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <HAL_ADC_PollForConversion+0x60>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d112      	bne.n	8002862 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e047      	b.n	80028f2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0d6      	beq.n	800281e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc43 	bl	800210c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01c      	beq.n	80028c6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e5b      	ldrb	r3, [r3, #25]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d118      	bne.n	80028c6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d111      	bne.n	80028c6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d104      	bne.n	80028de <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e008      	b.n	80028f0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	220c      	movs	r2, #12
 80028ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0b6      	sub	sp, #216	; 0xd8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x22>
 8002932:	2302      	movs	r3, #2
 8002934:	e3d5      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x7ce>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fd34 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 83ba 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d824      	bhi.n	80029aa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	3b02      	subs	r3, #2
 8002966:	2b03      	cmp	r3, #3
 8002968:	d81b      	bhi.n	80029a2 <HAL_ADC_ConfigChannel+0x8e>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <HAL_ADC_ConfigChannel+0x5c>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002989 	.word	0x08002989
 8002978:	08002991 	.word	0x08002991
 800297c:	08002999 	.word	0x08002999
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002980:	230c      	movs	r3, #12
 8002982:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002986:	e010      	b.n	80029aa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002988:	2312      	movs	r3, #18
 800298a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800298e:	e00c      	b.n	80029aa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002990:	2318      	movs	r3, #24
 8002992:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002996:	e008      	b.n	80029aa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80029a0:	e003      	b.n	80029aa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80029a2:	2306      	movs	r3, #6
 80029a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80029a8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80029b8:	f7ff fbbb 	bl	8002132 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fcf5 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 80029c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fd15 	bl	80023fe <LL_ADC_INJ_IsConversionOngoing>
 80029d4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f040 81bf 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 81ba 	bne.w	8002d60 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029f4:	d10f      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7ff fbc2 	bl	800218a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fb69 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a14:	e00e      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f7ff fbb1 	bl	800218a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fb59 	bl	80020e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d00a      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6919      	ldr	r1, [r3, #16]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a66:	f7ff fae9 	bl	800203c <LL_ADC_SetOffset>
 8002a6a:	e179      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fb06 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10a      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x184>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2100      	movs	r1, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fafb 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	e01e      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x1c2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff faf0 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002abe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e004      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002aca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x1da>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x20c>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002b12:	2320      	movs	r3, #32
 8002b14:	e004      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002b16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d106      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fabf 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff faa3 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x24a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa98 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	0e9b      	lsrs	r3, r3, #26
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	e01e      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x288>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fa8d 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e004      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x2a0>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	e018      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x2d2>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002bc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	e004      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d106      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fa5c 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fa40 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x310>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2102      	movs	r1, #2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa35 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	f003 021f 	and.w	r2, r3, #31
 8002c22:	e01e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x34e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fa2a 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e004      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5a:	fab3 f383 	clz	r3, r3
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x366>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	e014      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x390>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2102      	movs	r1, #2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f9fd 	bl	80020b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2103      	movs	r1, #3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f9e1 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x3ce>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f9d6 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	e017      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x3fe>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f9cb 	bl	8002084 <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf4:	fa93 f3a3 	rbit	r3, r3
 8002cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e003      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x416>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	e011      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x43a>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d3a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002d3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e003      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	2103      	movs	r1, #3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f9a8 	bl	80020b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fad5 	bl	8002314 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 813f 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7ff fa2e 	bl	80021e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a8e      	ldr	r2, [pc, #568]	; (8002fc4 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	f040 8130 	bne.w	8002ff0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x4a4>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	3301      	adds	r3, #1
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e019      	b.n	8002dec <HAL_ADC_ConfigChannel+0x4d8>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	fa93 f3a3 	rbit	r3, r3
 8002dc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	e003      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	bf94      	ite	ls
 8002de6:	2301      	movls	r3, #1
 8002de8:	2300      	movhi	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d079      	beq.n	8002ee4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x4f8>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	3301      	adds	r3, #1
 8002e04:	069b      	lsls	r3, r3, #26
 8002e06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e0a:	e015      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x524>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002e24:	2320      	movs	r3, #32
 8002e26:	e003      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	069b      	lsls	r3, r3, #26
 8002e34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x544>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	e017      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x574>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2101      	movs	r1, #1
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x59a>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	051b      	lsls	r3, r3, #20
 8002eac:	e018      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x5cc>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e003      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	e080      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x5ec>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efe:	e015      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x618>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x638>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	e017      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x668>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	61bb      	str	r3, [r7, #24]
  return result;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10d      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x694>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3b1e      	subs	r3, #30
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	e01d      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x6d0>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
  return result;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e005      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x6bc>
 8002fc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f003 021f 	and.w	r2, r3, #31
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b1e      	subs	r3, #30
 8002fde:	051b      	lsls	r3, r3, #20
 8002fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7ff f8cd 	bl	800218a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_ADC_ConfigChannel+0x7d8>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d06c      	beq.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ffc:	483c      	ldr	r0, [pc, #240]	; (80030f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ffe:	f7ff f80f 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 8003002:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a3a      	ldr	r2, [pc, #232]	; (80030f4 <HAL_ADC_ConfigChannel+0x7e0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d127      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d121      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <HAL_ADC_ConfigChannel+0x7e4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d157      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003026:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800302a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800302e:	4619      	mov	r1, r3
 8003030:	482f      	ldr	r0, [pc, #188]	; (80030f0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003032:	f7fe ffe2 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_ADC_ConfigChannel+0x7e8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	4a30      	ldr	r2, [pc, #192]	; (8003100 <HAL_ADC_ConfigChannel+0x7ec>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003050:	e002      	b.n	8003058 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3b01      	subs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800305e:	e03a      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_ADC_ConfigChannel+0x7f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d113      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800306a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10d      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <HAL_ADC_ConfigChannel+0x7e4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d12a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003080:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003088:	4619      	mov	r1, r3
 800308a:	4819      	ldr	r0, [pc, #100]	; (80030f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800308c:	f7fe ffb5 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003090:	e021      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_ADC_ConfigChannel+0x7f4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d11c      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800309c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d116      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a12      	ldr	r2, [pc, #72]	; (80030f8 <HAL_ADC_ConfigChannel+0x7e4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ba:	4619      	mov	r1, r3
 80030bc:	480c      	ldr	r0, [pc, #48]	; (80030f0 <HAL_ADC_ConfigChannel+0x7dc>)
 80030be:	f7fe ff9c 	bl	8001ffa <LL_ADC_SetCommonPathInternalCh>
 80030c2:	e008      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80030de:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	37d8      	adds	r7, #216	; 0xd8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	80080000 	.word	0x80080000
 80030f0:	50040300 	.word	0x50040300
 80030f4:	c7520000 	.word	0xc7520000
 80030f8:	50040000 	.word	0x50040000
 80030fc:	20000000 	.word	0x20000000
 8003100:	053e2d63 	.word	0x053e2d63
 8003104:	cb840000 	.word	0xcb840000
 8003108:	80000001 	.word	0x80000001

0800310c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f944 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 8003128:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f965 	bl	80023fe <LL_ADC_INJ_IsConversionOngoing>
 8003134:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8098 	beq.w	8003274 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02a      	beq.n	80031a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7e5b      	ldrb	r3, [r3, #25]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d126      	bne.n	80031a8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7e1b      	ldrb	r3, [r3, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d122      	bne.n	80031a8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003166:	e014      	b.n	8003192 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4a45      	ldr	r2, [pc, #276]	; (8003280 <ADC_ConversionStop+0x174>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d90d      	bls.n	800318c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	f043 0210 	orr.w	r2, r3, #16
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003180:	f043 0201 	orr.w	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e074      	b.n	8003276 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d1e3      	bne.n	8003168 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d014      	beq.n	80031d8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f8fc 	bl	80023b0 <LL_ADC_REG_IsConversionOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f8b9 	bl	800233a <LL_ADC_IsDisableOngoing>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff f8d8 	bl	8002388 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d014      	beq.n	8003208 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f90b 	bl	80023fe <LL_ADC_INJ_IsConversionOngoing>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f8a1 	bl	800233a <LL_ADC_IsDisableOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f8e7 	bl	80023d6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d005      	beq.n	800321a <ADC_ConversionStop+0x10e>
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d105      	bne.n	8003220 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003214:	230c      	movs	r3, #12
 8003216:	617b      	str	r3, [r7, #20]
        break;
 8003218:	e005      	b.n	8003226 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800321a:	2308      	movs	r3, #8
 800321c:	617b      	str	r3, [r7, #20]
        break;
 800321e:	e002      	b.n	8003226 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003220:	2304      	movs	r3, #4
 8003222:	617b      	str	r3, [r7, #20]
        break;
 8003224:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003226:	f7fe fea5 	bl	8001f74 <HAL_GetTick>
 800322a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800322c:	e01b      	b.n	8003266 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800322e:	f7fe fea1 	bl	8001f74 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b05      	cmp	r3, #5
 800323a:	d914      	bls.n	8003266 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	f043 0210 	orr.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e007      	b.n	8003276 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1dc      	bne.n	800322e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	a33fffff 	.word	0xa33fffff

08003284 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff f83d 	bl	8002314 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d169      	bne.n	8003374 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <ADC_Enable+0xfc>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f043 0210 	orr.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e055      	b.n	8003376 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fff8 	bl	80022c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032d4:	482b      	ldr	r0, [pc, #172]	; (8003384 <ADC_Enable+0x100>)
 80032d6:	f7fe fea3 	bl	8002020 <LL_ADC_GetCommonPathInternalCh>
 80032da:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <ADC_Enable+0x104>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	4a28      	ldr	r2, [pc, #160]	; (800338c <ADC_Enable+0x108>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032fe:	e002      	b.n	8003306 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	3b01      	subs	r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1f9      	bne.n	8003300 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800330c:	f7fe fe32 	bl	8001f74 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003312:	e028      	b.n	8003366 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fffb 	bl	8002314 <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ffcb 	bl	80022c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800332e:	f7fe fe21 	bl	8001f74 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d914      	bls.n	8003366 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d00d      	beq.n	8003366 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e007      	b.n	8003376 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d1cf      	bne.n	8003314 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	8000003f 	.word	0x8000003f
 8003384:	50040300 	.word	0x50040300
 8003388:	20000000 	.word	0x20000000
 800338c:	053e2d63 	.word	0x053e2d63

08003390 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe ffcc 	bl	800233a <LL_ADC_IsDisableOngoing>
 80033a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe ffb3 	bl	8002314 <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d047      	beq.n	8003444 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d144      	bne.n	8003444 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030d 	and.w	r3, r3, #13
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10c      	bne.n	80033e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe ff8d 	bl	80022ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2203      	movs	r2, #3
 80033d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033da:	f7fe fdcb 	bl	8001f74 <HAL_GetTick>
 80033de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033e0:	e029      	b.n	8003436 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	f043 0210 	orr.w	r2, r3, #16
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e023      	b.n	8003446 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033fe:	f7fe fdb9 	bl	8001f74 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d914      	bls.n	8003436 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e007      	b.n	8003446 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1dc      	bne.n	80033fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <LL_ADC_StartCalibration>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <LL_ADC_IsCalibrationOnGoing>:
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003494:	d101      	bne.n	800349a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_ADCEx_Calibration_Start+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e04d      	b.n	8003560 <HAL_ADCEx_Calibration_Start+0xb8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff5f 	bl	8003390 <ADC_Disable>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d136      	bne.n	800354a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034e4:	f023 0302 	bic.w	r3, r3, #2
 80034e8:	f043 0202 	orr.w	r2, r3, #2
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ffa9 	bl	800344e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034fc:	e014      	b.n	8003528 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3301      	adds	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800350a:	d30d      	bcc.n	8003528 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f023 0312 	bic.w	r3, r3, #18
 8003514:	f043 0210 	orr.w	r2, r3, #16
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e01b      	b.n	8003560 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ffa7 	bl	8003480 <LL_ADC_IsCalibrationOnGoing>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e2      	bne.n	80034fe <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f023 0303 	bic.w	r3, r3, #3
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	659a      	str	r2, [r3, #88]	; 0x58
 8003548:	e005      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	f043 0210 	orr.w	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	; (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
         );
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff4c 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036ea:	f7ff ff61 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 80036ee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f7ff ffb1 	bl	800365c <NVIC_EncodePriority>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff80 	bl	8003608 <__NVIC_SetPriority>
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff54 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373a:	e166      	b.n	8003a0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f000 8158 	beq.w	8003a04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d005      	beq.n	800376c <HAL_GPIO_Init+0x40>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d130      	bne.n	80037ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037a2:	2201      	movs	r2, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	f003 0201 	and.w	r2, r3, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d017      	beq.n	800380a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d123      	bne.n	800385e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	6939      	ldr	r1, [r7, #16]
 800385a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80b2 	beq.w	8003a04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a0:	4b61      	ldr	r3, [pc, #388]	; (8003a28 <HAL_GPIO_Init+0x2fc>)
 80038a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a4:	4a60      	ldr	r2, [pc, #384]	; (8003a28 <HAL_GPIO_Init+0x2fc>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6613      	str	r3, [r2, #96]	; 0x60
 80038ac:	4b5e      	ldr	r3, [pc, #376]	; (8003a28 <HAL_GPIO_Init+0x2fc>)
 80038ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038b8:	4a5c      	ldr	r2, [pc, #368]	; (8003a2c <HAL_GPIO_Init+0x300>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038e2:	d02b      	beq.n	800393c <HAL_GPIO_Init+0x210>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_GPIO_Init+0x304>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d025      	beq.n	8003938 <HAL_GPIO_Init+0x20c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_GPIO_Init+0x308>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01f      	beq.n	8003934 <HAL_GPIO_Init+0x208>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a50      	ldr	r2, [pc, #320]	; (8003a38 <HAL_GPIO_Init+0x30c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d019      	beq.n	8003930 <HAL_GPIO_Init+0x204>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_GPIO_Init+0x310>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d013      	beq.n	800392c <HAL_GPIO_Init+0x200>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <HAL_GPIO_Init+0x314>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00d      	beq.n	8003928 <HAL_GPIO_Init+0x1fc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_GPIO_Init+0x318>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <HAL_GPIO_Init+0x1f8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_GPIO_Init+0x31c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_GPIO_Init+0x1f4>
 800391c:	2307      	movs	r3, #7
 800391e:	e00e      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003920:	2308      	movs	r3, #8
 8003922:	e00c      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003924:	2306      	movs	r3, #6
 8003926:	e00a      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003928:	2305      	movs	r3, #5
 800392a:	e008      	b.n	800393e <HAL_GPIO_Init+0x212>
 800392c:	2304      	movs	r3, #4
 800392e:	e006      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003930:	2303      	movs	r3, #3
 8003932:	e004      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003934:	2302      	movs	r3, #2
 8003936:	e002      	b.n	800393e <HAL_GPIO_Init+0x212>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_GPIO_Init+0x212>
 800393c:	2300      	movs	r3, #0
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	f002 0203 	and.w	r2, r2, #3
 8003944:	0092      	lsls	r2, r2, #2
 8003946:	4093      	lsls	r3, r2
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800394e:	4937      	ldr	r1, [pc, #220]	; (8003a2c <HAL_GPIO_Init+0x300>)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	3302      	adds	r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800395c:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_GPIO_Init+0x320>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003980:	4a32      	ldr	r2, [pc, #200]	; (8003a4c <HAL_GPIO_Init+0x320>)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_GPIO_Init+0x320>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	43db      	mvns	r3, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4013      	ands	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039aa:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <HAL_GPIO_Init+0x320>)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b0:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <HAL_GPIO_Init+0x320>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_GPIO_Init+0x320>)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_GPIO_Init+0x320>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4013      	ands	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <HAL_GPIO_Init+0x320>)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	3301      	adds	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f ae91 	bne.w	800373c <HAL_GPIO_Init+0x10>
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	48000400 	.word	0x48000400
 8003a34:	48000800 	.word	0x48000800
 8003a38:	48000c00 	.word	0x48000c00
 8003a3c:	48001000 	.word	0x48001000
 8003a40:	48001400 	.word	0x48001400
 8003a44:	48001800 	.word	0x48001800
 8003a48:	48001c00 	.word	0x48001c00
 8003a4c:	40010400 	.word	0x40010400

08003a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a60:	787b      	ldrb	r3, [r7, #1]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a66:	887a      	ldrh	r2, [r7, #2]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e08d      	b.n	8003bae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fd ffee 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	e006      	b.n	8003b08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689a      	ldr	r2, [r3, #8]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d108      	bne.n	8003b22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e007      	b.n	8003b32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 80fd 	bne.w	8003dd4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_I2C_Master_Transmit+0x30>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0f6      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fe f9c0 	bl	8001f74 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2319      	movs	r3, #25
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f914 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0e1      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2221      	movs	r2, #33	; 0x21
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2bff      	cmp	r3, #255	; 0xff
 8003c42:	d906      	bls.n	8003c52 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	22ff      	movs	r2, #255	; 0xff
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e007      	b.n	8003c62 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d024      	beq.n	8003cb4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	4b4e      	ldr	r3, [pc, #312]	; (8003de0 <HAL_I2C_Master_Transmit+0x228>)
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 fa79 	bl	80041a4 <I2C_TransferConfig>
 8003cb2:	e066      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b48      	ldr	r3, [pc, #288]	; (8003de0 <HAL_I2C_Master_Transmit+0x228>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa6e 	bl	80041a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cc8:	e05b      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	6a39      	ldr	r1, [r7, #32]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f8fd 	bl	8003ece <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07b      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	781a      	ldrb	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d034      	beq.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d130      	bne.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f880 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e04d      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2bff      	cmp	r3, #255	; 0xff
 8003d42:	d90e      	bls.n	8003d62 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	8979      	ldrh	r1, [r7, #10]
 8003d52:	2300      	movs	r3, #0
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa22 	bl	80041a4 <I2C_TransferConfig>
 8003d60:	e00f      	b.n	8003d82 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	2300      	movs	r3, #0
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fa11 	bl	80041a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d19e      	bne.n	8003cca <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	6a39      	ldr	r1, [r7, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f8e3 	bl	8003f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e01a      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2220      	movs	r2, #32
 8003da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_I2C_Master_Transmit+0x22c>)
 8003db4:	400b      	ands	r3, r1
 8003db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e000      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
  }
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	80002000 	.word	0x80002000
 8003de4:	fe00e800 	.word	0xfe00e800

08003de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d007      	beq.n	8003e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	619a      	str	r2, [r3, #24]
  }
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e40:	e031      	b.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d02d      	beq.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fe f893 	bl	8001f74 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d122      	bne.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d113      	bne.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00f      	b.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	bf0c      	ite	eq
 8003eb6:	2301      	moveq	r3, #1
 8003eb8:	2300      	movne	r3, #0
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d0be      	beq.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eda:	e033      	b.n	8003f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f87f 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e031      	b.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d025      	beq.n	8003f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef8:	f7fe f83c 	bl	8001f74 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11a      	bne.n	8003f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d013      	beq.n	8003f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d1c4      	bne.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f68:	e02f      	b.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f838 	bl	8003fe4 <I2C_IsErrorOccurred>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e02d      	b.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fd fff9 	bl	8001f74 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11a      	bne.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d013      	beq.n	8003fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d1c8      	bne.n	8003f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b00      	cmp	r3, #0
 800400e:	d068      	beq.n	80040e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004018:	e049      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d045      	beq.n	80040ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004022:	f7fd ffa7 	bl	8001f74 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <I2C_IsErrorOccurred+0x54>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13a      	bne.n	80040ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800404a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d121      	bne.n	80040a0 <I2C_IsErrorOccurred+0xbc>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004062:	d01d      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b20      	cmp	r3, #32
 8004068:	d01a      	beq.n	80040a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800407a:	f7fd ff7b 	bl	8001f74 <HAL_GetTick>
 800407e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004080:	e00e      	b.n	80040a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004082:	f7fd ff77 	bl	8001f74 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b19      	cmp	r3, #25
 800408e:	d907      	bls.n	80040a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800409e:	e006      	b.n	80040ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d1e9      	bne.n	8004082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d003      	beq.n	80040c4 <I2C_IsErrorOccurred+0xe0>
 80040bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0aa      	beq.n	800401a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d103      	bne.n	80040d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2220      	movs	r2, #32
 80040d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00b      	beq.n	800412e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f043 0308 	orr.w	r3, r3, #8
 800411c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f043 0302 	orr.w	r3, r3, #2
 800413e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fe45 	bl	8003de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <I2C_IsErrorOccurred+0x1bc>)
 800416a:	400b      	ands	r3, r1
 800416c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	fe00e800 	.word	0xfe00e800

080041a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	817b      	strh	r3, [r7, #10]
 80041b2:	4613      	mov	r3, r2
 80041b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041bc:	7a7b      	ldrb	r3, [r7, #9]
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	0d5b      	lsrs	r3, r3, #21
 80041de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <I2C_TransferConfig+0x60>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	43db      	mvns	r3, r3
 80041e8:	ea02 0103 	and.w	r1, r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	03ff63ff 	.word	0x03ff63ff

08004208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b20      	cmp	r3, #32
 800421c:	d138      	bne.n	8004290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004228:	2302      	movs	r3, #2
 800422a:	e032      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800425a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d139      	bne.n	8004328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042be:	2302      	movs	r3, #2
 80042c0:	e033      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	; 0x24
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004336:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004338:	b08f      	sub	sp, #60	; 0x3c
 800433a:	af0a      	add	r7, sp, #40	; 0x28
 800433c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e116      	b.n	8004576 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fc4e 	bl	8001c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2203      	movs	r2, #3
 800436c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d102      	bne.n	8004382 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f002 ff6c 	bl	8007264 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	687e      	ldr	r6, [r7, #4]
 8004394:	466d      	mov	r5, sp
 8004396:	f106 0410 	add.w	r4, r6, #16
 800439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043aa:	1d33      	adds	r3, r6, #4
 80043ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ae:	6838      	ldr	r0, [r7, #0]
 80043b0:	f002 ff2c 	bl	800720c <USB_CoreInit>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e0d7      	b.n	8004576 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2100      	movs	r1, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f002 ff5a 	bl	8007286 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	e04a      	b.n	800446e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	333d      	adds	r3, #61	; 0x3d
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	b298      	uxth	r0, r3
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3356      	adds	r3, #86	; 0x56
 8004414:	4602      	mov	r2, r0
 8004416:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3340      	adds	r3, #64	; 0x40
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3344      	adds	r3, #68	; 0x44
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3348      	adds	r3, #72	; 0x48
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004454:	7bfa      	ldrb	r2, [r7, #15]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	334c      	adds	r3, #76	; 0x4c
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	3301      	adds	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	7bfa      	ldrb	r2, [r7, #15]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	d3af      	bcc.n	80043d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e044      	b.n	8004508 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044ec:	7bfa      	ldrb	r2, [r7, #15]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	3301      	adds	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	7bfa      	ldrb	r2, [r7, #15]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3b5      	bcc.n	800447e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	687e      	ldr	r6, [r7, #4]
 800451a:	466d      	mov	r5, sp
 800451c:	f106 0410 	add.w	r4, r6, #16
 8004520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004522:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800452c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004530:	1d33      	adds	r3, r6, #4
 8004532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004534:	6838      	ldr	r0, [r7, #0]
 8004536:	f002 fef3 	bl	8007320 <USB_DevInit>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e014      	b.n	8004576 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b01      	cmp	r3, #1
 8004562:	d102      	bne.n	800456a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f80a 	bl	800457e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f003 f895 	bl	800769e <USB_DevDisconnect>

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	f043 0303 	orr.w	r3, r3, #3
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d8:	d102      	bne.n	80045e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80045da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045de:	e00b      	b.n	80045f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ee:	d102      	bne.n	80045f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f4:	e000      	b.n	80045f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40007000 	.word	0x40007000

08004608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d141      	bne.n	800469a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004616:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800461e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004622:	d131      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004624:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462a:	4a46      	ldr	r2, [pc, #280]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004634:	4b43      	ldr	r3, [pc, #268]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800463c:	4a41      	ldr	r2, [pc, #260]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800463e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2232      	movs	r2, #50	; 0x32
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	0c9b      	lsrs	r3, r3, #18
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800465a:	e002      	b.n	8004662 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3b01      	subs	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004662:	4b38      	ldr	r3, [pc, #224]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d102      	bne.n	8004676 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f2      	bne.n	800465c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004676:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004682:	d158      	bne.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e057      	b.n	8004738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468e:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004698:	e04d      	b.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d141      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a2:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d131      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046c8:	4a1e      	ldr	r2, [pc, #120]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2232      	movs	r2, #50	; 0x32
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a1c      	ldr	r2, [pc, #112]	; (800474c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0c9b      	lsrs	r3, r3, #18
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e6:	e002      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d102      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470e:	d112      	bne.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e011      	b.n	8004738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004724:	e007      	b.n	8004736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800472e:	4a05      	ldr	r2, [pc, #20]	; (8004744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004734:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40007000 	.word	0x40007000
 8004748:	20000000 	.word	0x20000000
 800474c:	431bde83 	.word	0x431bde83

08004750 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <HAL_PWREx_EnableVddUSB+0x1c>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475e:	6053      	str	r3, [r2, #4]
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40007000 	.word	0x40007000

08004770 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <HAL_PWREx_EnableVddIO2+0x1c>)
 800477a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800477e:	6053      	str	r3, [r2, #4]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40007000 	.word	0x40007000

08004790 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f000 bc08 	b.w	8004fb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047a4:	4b96      	ldr	r3, [pc, #600]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ae:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80e4 	beq.w	800498e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_RCC_OscConfig+0x4c>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	f040 808b 	bne.w	80048ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	f040 8087 	bne.w	80048ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047dc:	4b88      	ldr	r3, [pc, #544]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_OscConfig+0x64>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e3df      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1a      	ldr	r2, [r3, #32]
 80047f8:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_RCC_OscConfig+0x7e>
 8004804:	4b7e      	ldr	r3, [pc, #504]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	e005      	b.n	800481a <HAL_RCC_OscConfig+0x8a>
 800480e:	4b7c      	ldr	r3, [pc, #496]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481a:	4293      	cmp	r3, r2
 800481c:	d223      	bcs.n	8004866 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fdfe 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e3c0      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004832:	4b73      	ldr	r3, [pc, #460]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004838:	f043 0308 	orr.w	r3, r3, #8
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	496d      	ldr	r1, [pc, #436]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004850:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	4968      	ldr	r1, [pc, #416]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	e025      	b.n	80048b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004866:	4b66      	ldr	r3, [pc, #408]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a65      	ldr	r2, [pc, #404]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800486c:	f043 0308 	orr.w	r3, r3, #8
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b63      	ldr	r3, [pc, #396]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4960      	ldr	r1, [pc, #384]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004884:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	495b      	ldr	r1, [pc, #364]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fdbe 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e380      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048b2:	f000 fcc1 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80048b6:	4602      	mov	r2, r0
 80048b8:	4b51      	ldr	r3, [pc, #324]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	4950      	ldr	r1, [pc, #320]	; (8004a04 <HAL_RCC_OscConfig+0x274>)
 80048c4:	5ccb      	ldrb	r3, [r1, r3]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	fa22 f303 	lsr.w	r3, r2, r3
 80048ce:	4a4e      	ldr	r2, [pc, #312]	; (8004a08 <HAL_RCC_OscConfig+0x278>)
 80048d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048d2:	4b4e      	ldr	r3, [pc, #312]	; (8004a0c <HAL_RCC_OscConfig+0x27c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fa20 	bl	8001d1c <HAL_InitTick>
 80048dc:	4603      	mov	r3, r0
 80048de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d052      	beq.n	800498c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	e364      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d032      	beq.n	8004958 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048f2:	4b43      	ldr	r3, [pc, #268]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048fe:	f7fd fb39 	bl	8001f74 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004906:	f7fd fb35 	bl	8001f74 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e34d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004918:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004924:	4b36      	ldr	r3, [pc, #216]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a35      	ldr	r2, [pc, #212]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800492a:	f043 0308 	orr.w	r3, r3, #8
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b33      	ldr	r3, [pc, #204]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	4930      	ldr	r1, [pc, #192]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	492b      	ldr	r1, [pc, #172]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
 8004956:	e01a      	b.n	800498e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004958:	4b29      	ldr	r3, [pc, #164]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a28      	ldr	r2, [pc, #160]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004964:	f7fd fb06 	bl	8001f74 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800496c:	f7fd fb02 	bl	8001f74 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e31a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x1dc>
 800498a:	e000      	b.n	800498e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800498c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d073      	beq.n	8004a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d005      	beq.n	80049ac <HAL_RCC_OscConfig+0x21c>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d10e      	bne.n	80049c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d10b      	bne.n	80049c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d063      	beq.n	8004a80 <HAL_RCC_OscConfig+0x2f0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d15f      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e2f7      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d106      	bne.n	80049dc <HAL_RCC_OscConfig+0x24c>
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e025      	b.n	8004a28 <HAL_RCC_OscConfig+0x298>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e4:	d114      	bne.n	8004a10 <HAL_RCC_OscConfig+0x280>
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a05      	ldr	r2, [pc, #20]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b03      	ldr	r3, [pc, #12]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a02      	ldr	r2, [pc, #8]	; (8004a00 <HAL_RCC_OscConfig+0x270>)
 80049f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	e013      	b.n	8004a28 <HAL_RCC_OscConfig+0x298>
 8004a00:	40021000 	.word	0x40021000
 8004a04:	0800a9e4 	.word	0x0800a9e4
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000004 	.word	0x20000004
 8004a10:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a9f      	ldr	r2, [pc, #636]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	4b9d      	ldr	r3, [pc, #628]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a9c      	ldr	r2, [pc, #624]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fd faa0 	bl	8001f74 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a38:	f7fd fa9c 	bl	8001f74 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e2b4      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4a:	4b92      	ldr	r3, [pc, #584]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2a8>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd fa8c 	bl	8001f74 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fd fa88 	bl	8001f74 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e2a0      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x2d0>
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d060      	beq.n	8004b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x310>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d119      	bne.n	8004ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d116      	bne.n	8004ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa0:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x328>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e27d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab8:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	4973      	ldr	r1, [pc, #460]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004acc:	e040      	b.n	8004b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d023      	beq.n	8004b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad6:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7fd fa47 	bl	8001f74 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aea:	f7fd fa43 	bl	8001f74 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e25b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afc:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	495f      	ldr	r1, [pc, #380]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]
 8004b1c:	e018      	b.n	8004b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b1e:	4b5d      	ldr	r3, [pc, #372]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a5c      	ldr	r2, [pc, #368]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fd fa23 	bl	8001f74 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fd fa1f 	bl	8001f74 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e237      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b44:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d03c      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01c      	beq.n	8004b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b64:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6a:	4a4a      	ldr	r2, [pc, #296]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b74:	f7fd f9fe 	bl	8001f74 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7c:	f7fd f9fa 	bl	8001f74 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e212      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ef      	beq.n	8004b7c <HAL_RCC_OscConfig+0x3ec>
 8004b9c:	e01b      	b.n	8004bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b9e:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba4:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bae:	f7fd f9e1 	bl	8001f74 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb6:	f7fd f9dd 	bl	8001f74 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e1f5      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc8:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ef      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 80a6 	beq.w	8004d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf4:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x508>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d118      	bne.n	8004c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1c:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_RCC_OscConfig+0x508>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_RCC_OscConfig+0x508>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c28:	f7fd f9a4 	bl	8001f74 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c30:	f7fd f9a0 	bl	8001f74 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e1b8      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x508>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d108      	bne.n	8004c68 <HAL_RCC_OscConfig+0x4d8>
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c66:	e029      	b.n	8004cbc <HAL_RCC_OscConfig+0x52c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d115      	bne.n	8004c9c <HAL_RCC_OscConfig+0x50c>
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <HAL_RCC_OscConfig+0x504>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c90:	e014      	b.n	8004cbc <HAL_RCC_OscConfig+0x52c>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	4b9d      	ldr	r3, [pc, #628]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	4a9c      	ldr	r2, [pc, #624]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cac:	4b99      	ldr	r3, [pc, #612]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	4a98      	ldr	r2, [pc, #608]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d016      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fd f956 	bl	8001f74 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fd f952 	bl	8001f74 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e168      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce2:	4b8c      	ldr	r3, [pc, #560]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ed      	beq.n	8004ccc <HAL_RCC_OscConfig+0x53c>
 8004cf0:	e015      	b.n	8004d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fd f93f 	bl	8001f74 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fd f93b 	bl	8001f74 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e151      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d10:	4b80      	ldr	r3, [pc, #512]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1ed      	bne.n	8004cfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d105      	bne.n	8004d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d28:	4a7a      	ldr	r2, [pc, #488]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03c      	beq.n	8004db6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d44:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4a:	4a72      	ldr	r2, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d54:	f7fd f90e 	bl	8001f74 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5c:	f7fd f90a 	bl	8001f74 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e122      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6e:	4b69      	ldr	r3, [pc, #420]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ef      	beq.n	8004d5c <HAL_RCC_OscConfig+0x5cc>
 8004d7c:	e01b      	b.n	8004db6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d7e:	4b65      	ldr	r3, [pc, #404]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d84:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8e:	f7fd f8f1 	bl	8001f74 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d96:	f7fd f8ed 	bl	8001f74 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e105      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da8:	4b5a      	ldr	r3, [pc, #360]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ef      	bne.n	8004d96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80f9 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	f040 80cf 	bne.w	8004f68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dca:	4b52      	ldr	r3, [pc, #328]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d12c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	3b01      	subs	r3, #1
 8004dea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d123      	bne.n	8004e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d11b      	bne.n	8004e38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d113      	bne.n	8004e38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d109      	bne.n	8004e38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d071      	beq.n	8004f1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d068      	beq.n	8004f10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e3e:	4b35      	ldr	r3, [pc, #212]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e4a:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0ac      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e66:	f7fd f885 	bl	8001f74 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fd f881 	bl	8001f74 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e099      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e80:	4b24      	ldr	r3, [pc, #144]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8c:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCC_OscConfig+0x788>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0112      	lsls	r2, r2, #4
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea6:	0212      	lsls	r2, r2, #8
 8004ea8:	4311      	orrs	r1, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0552      	lsls	r2, r2, #21
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0652      	lsls	r2, r2, #25
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ec6:	06d2      	lsls	r2, r2, #27
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	4912      	ldr	r1, [pc, #72]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0f      	ldr	r2, [pc, #60]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ee8:	f7fd f844 	bl	8001f74 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fd f840 	bl	8001f74 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e058      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <HAL_RCC_OscConfig+0x784>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f0e:	e050      	b.n	8004fb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1c:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d144      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f28:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f40:	f7fd f818 	bl	8001f74 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd f814 	bl	8001f74 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e02c      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x7b8>
 8004f66:	e024      	b.n	8004fb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d01f      	beq.n	8004fae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7a:	f7fc fffb 	bl	8001f74 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f82:	f7fc fff7 	bl	8001f74 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e00f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f0      	bne.n	8004f82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	4905      	ldr	r1, [pc, #20]	; (8004fbc <HAL_RCC_OscConfig+0x82c>)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_OscConfig+0x830>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60cb      	str	r3, [r1, #12]
 8004fac:	e001      	b.n	8004fb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	feeefffc 	.word	0xfeeefffc

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e11d      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b90      	ldr	r3, [pc, #576]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d910      	bls.n	800500c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b8d      	ldr	r3, [pc, #564]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 020f 	bic.w	r2, r3, #15
 8004ff2:	498b      	ldr	r1, [pc, #556]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e105      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b81      	ldr	r3, [pc, #516]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005024:	429a      	cmp	r2, r3
 8005026:	d908      	bls.n	800503a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b7e      	ldr	r3, [pc, #504]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	497b      	ldr	r1, [pc, #492]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d079      	beq.n	800513a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d11e      	bne.n	800508c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504e:	4b75      	ldr	r3, [pc, #468]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0dc      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800505e:	f000 fa3b 	bl	80054d8 <RCC_GetSysClockFreqFromPLLSource>
 8005062:	4603      	mov	r3, r0
 8005064:	4a70      	ldr	r2, [pc, #448]	; (8005228 <HAL_RCC_ClockConfig+0x264>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d946      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800506a:	4b6e      	ldr	r3, [pc, #440]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d140      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005076:	4b6b      	ldr	r3, [pc, #428]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507e:	4a69      	ldr	r2, [pc, #420]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e035      	b.n	80050f8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005094:	4b63      	ldr	r3, [pc, #396]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d115      	bne.n	80050cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0b9      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050ac:	4b5d      	ldr	r3, [pc, #372]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d109      	bne.n	80050cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0ad      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050bc:	4b59      	ldr	r3, [pc, #356]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0a5      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80050cc:	f000 f8b4 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4a55      	ldr	r2, [pc, #340]	; (8005228 <HAL_RCC_ClockConfig+0x264>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d90f      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050d8:	4b52      	ldr	r3, [pc, #328]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050e4:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ec:	4a4d      	ldr	r2, [pc, #308]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f8:	4b4a      	ldr	r3, [pc, #296]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 0203 	bic.w	r2, r3, #3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	4947      	ldr	r1, [pc, #284]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510a:	f7fc ff33 	bl	8001f74 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005110:	e00a      	b.n	8005128 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005112:	f7fc ff2f 	bl	8001f74 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005120:	4293      	cmp	r3, r2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e077      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 020c 	and.w	r2, r3, #12
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	429a      	cmp	r2, r3
 8005138:	d1eb      	bne.n	8005112 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b80      	cmp	r3, #128	; 0x80
 800513e:	d105      	bne.n	800514c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005140:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a37      	ldr	r2, [pc, #220]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005164:	429a      	cmp	r2, r3
 8005166:	d208      	bcs.n	800517a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005168:	4b2e      	ldr	r3, [pc, #184]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	492b      	ldr	r1, [pc, #172]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d210      	bcs.n	80051aa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005188:	4b25      	ldr	r3, [pc, #148]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 020f 	bic.w	r2, r3, #15
 8005190:	4923      	ldr	r1, [pc, #140]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005198:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_RCC_ClockConfig+0x25c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e036      	b.n	8005218 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b6:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4918      	ldr	r1, [pc, #96]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4910      	ldr	r1, [pc, #64]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051e8:	f000 f826 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_RCC_ClockConfig+0x260>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	091b      	lsrs	r3, r3, #4
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	490c      	ldr	r1, [pc, #48]	; (800522c <HAL_RCC_ClockConfig+0x268>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	fa22 f303 	lsr.w	r3, r2, r3
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <HAL_RCC_ClockConfig+0x26c>)
 8005206:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x270>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fc fd85 	bl	8001d1c <HAL_InitTick>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]

  return status;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40022000 	.word	0x40022000
 8005224:	40021000 	.word	0x40021000
 8005228:	04c4b400 	.word	0x04c4b400
 800522c:	0800a9e4 	.word	0x0800a9e4
 8005230:	20000000 	.word	0x20000000
 8005234:	20000004 	.word	0x20000004

08005238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005246:	4b3e      	ldr	r3, [pc, #248]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005250:	4b3b      	ldr	r3, [pc, #236]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x34>
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d121      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d11e      	bne.n	80052aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800526c:	4b34      	ldr	r3, [pc, #208]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d107      	bne.n	8005288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005278:	4b31      	ldr	r3, [pc, #196]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	e005      	b.n	8005294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005288:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	091b      	lsrs	r3, r3, #4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10d      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d102      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052b0:	4b25      	ldr	r3, [pc, #148]	; (8005348 <HAL_RCC_GetSysClockFreq+0x110>)
 80052b2:	61bb      	str	r3, [r7, #24]
 80052b4:	e004      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d101      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_RCC_GetSysClockFreq+0x114>)
 80052be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d134      	bne.n	8005330 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d003      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0xa6>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d003      	beq.n	80052e4 <HAL_RCC_GetSysClockFreq+0xac>
 80052dc:	e005      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052de:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e0:	617b      	str	r3, [r7, #20]
      break;
 80052e2:	e005      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_RCC_GetSysClockFreq+0x114>)
 80052e6:	617b      	str	r3, [r7, #20]
      break;
 80052e8:	e002      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	617b      	str	r3, [r7, #20]
      break;
 80052ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3301      	adds	r3, #1
 80052fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	fb03 f202 	mul.w	r2, r3, r2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_GetSysClockFreq+0x108>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	0e5b      	lsrs	r3, r3, #25
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	3301      	adds	r3, #1
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	fbb2 f3f3 	udiv	r3, r2, r3
 800532e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005330:	69bb      	ldr	r3, [r7, #24]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3724      	adds	r7, #36	; 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	0800a9fc 	.word	0x0800a9fc
 8005348:	00f42400 	.word	0x00f42400
 800534c:	007a1200 	.word	0x007a1200

08005350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000000 	.word	0x20000000

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b06      	ldr	r3, [pc, #24]	; (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4904      	ldr	r1, [pc, #16]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	0800a9f4 	.word	0x0800a9f4

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005398:	f7ff ffda 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0adb      	lsrs	r3, r3, #11
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4904      	ldr	r1, [pc, #16]	; (80053bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40021000 	.word	0x40021000
 80053bc:	0800a9f4 	.word	0x0800a9f4

080053c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	220f      	movs	r2, #15
 80053ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053d0:	4b12      	ldr	r3, [pc, #72]	; (800541c <HAL_RCC_GetClockConfig+0x5c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0203 	and.w	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RCC_GetClockConfig+0x5c>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <HAL_RCC_GetClockConfig+0x5c>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_RCC_GetClockConfig+0x5c>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	08db      	lsrs	r3, r3, #3
 80053fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <HAL_RCC_GetClockConfig+0x60>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	601a      	str	r2, [r3, #0]
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000
 8005420:	40022000 	.word	0x40022000

08005424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800543c:	f7ff f8c4 	bl	80045c8 <HAL_PWREx_GetVoltageRange>
 8005440:	6178      	str	r0, [r7, #20]
 8005442:	e014      	b.n	800546e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6593      	str	r3, [r2, #88]	; 0x58
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800545c:	f7ff f8b4 	bl	80045c8 <HAL_PWREx_GetVoltageRange>
 8005460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	d10b      	bne.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d913      	bls.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2ba0      	cmp	r3, #160	; 0xa0
 8005480:	d902      	bls.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005482:	2302      	movs	r3, #2
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e00d      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005488:	2301      	movs	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e00a      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b7f      	cmp	r3, #127	; 0x7f
 8005492:	d902      	bls.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005494:	2302      	movs	r3, #2
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e004      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b70      	cmp	r3, #112	; 0x70
 800549e:	d101      	bne.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054a0:	2301      	movs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 020f 	bic.w	r2, r3, #15
 80054ac:	4909      	ldr	r1, [pc, #36]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40022000 	.word	0x40022000

080054d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d00b      	beq.n	8005506 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d825      	bhi.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d008      	beq.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d11f      	bne.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005502:	613b      	str	r3, [r7, #16]
    break;
 8005504:	e01f      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005506:	4b25      	ldr	r3, [pc, #148]	; (800559c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005508:	613b      	str	r3, [r7, #16]
    break;
 800550a:	e01c      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800550c:	4b21      	ldr	r3, [pc, #132]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800551a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e005      	b.n	8005534 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005534:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	613b      	str	r3, [r7, #16]
    break;
 800553e:	e002      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
    break;
 8005544:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	3301      	adds	r3, #1
 8005552:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	fb03 f202 	mul.w	r2, r3, r2
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0e5b      	lsrs	r3, r3, #25
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	3301      	adds	r3, #1
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005586:	683b      	ldr	r3, [r7, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40021000 	.word	0x40021000
 8005598:	00f42400 	.word	0x00f42400
 800559c:	007a1200 	.word	0x007a1200
 80055a0:	0800a9fc 	.word	0x0800a9fc

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ac:	2300      	movs	r3, #0
 80055ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b0:	2300      	movs	r3, #0
 80055b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d040      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d02a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d825      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d026      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055d0:	2b60      	cmp	r3, #96	; 0x60
 80055d2:	d821      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d006      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d81d      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d010      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80055e4:	e018      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055e6:	4b89      	ldr	r3, [pc, #548]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	4a88      	ldr	r2, [pc, #544]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055f2:	e015      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb02 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005604:	e00c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3320      	adds	r3, #32
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fbed 	bl	8005dec <RCCEx_PLLSAI2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005616:	e003      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	74fb      	strb	r3, [r7, #19]
      break;
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800561e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005626:	4b79      	ldr	r3, [pc, #484]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005634:	4975      	ldr	r1, [pc, #468]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800563c:	e001      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d047      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d030      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d82a      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800565e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005662:	d02a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005668:	d824      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d81e      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d010      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005680:	e018      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4a61      	ldr	r2, [pc, #388]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800568e:	e015      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fab4 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a0:	e00c      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3320      	adds	r3, #32
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fb9f 	bl	8005dec <RCCEx_PLLSAI2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	74fb      	strb	r3, [r7, #19]
      break;
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c2:	4b52      	ldr	r3, [pc, #328]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	494e      	ldr	r1, [pc, #312]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056d8:	e001      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 809f 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f0:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	4a40      	ldr	r2, [pc, #256]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6593      	str	r3, [r2, #88]	; 0x58
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3a      	ldr	r2, [pc, #232]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800572e:	f7fc fc21 	bl	8001f74 <HAL_GetTick>
 8005732:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005734:	e009      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7fc fc1d 	bl	8001f74 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d902      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	74fb      	strb	r3, [r7, #19]
        break;
 8005748:	e005      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ef      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d15b      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01f      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	429a      	cmp	r2, r3
 8005778:	d019      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057a6:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc fbdc 	bl	8001f74 <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fc fbd8 	bl	8001f74 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d902      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	74fb      	strb	r3, [r7, #19]
            break;
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ec      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10c      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005804:	e008      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	74bb      	strb	r3, [r7, #18]
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800580c:	40021000 	.word	0x40021000
 8005810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005818:	7c7b      	ldrb	r3, [r7, #17]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581e:	4ba0      	ldr	r3, [pc, #640]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	4a9f      	ldr	r2, [pc, #636]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005828:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005836:	4b9a      	ldr	r3, [pc, #616]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f023 0203 	bic.w	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	4996      	ldr	r1, [pc, #600]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005858:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 020c 	bic.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	498e      	ldr	r1, [pc, #568]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800587a:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005888:	4985      	ldr	r1, [pc, #532]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800589c:	4b80      	ldr	r3, [pc, #512]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	497d      	ldr	r1, [pc, #500]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058be:	4b78      	ldr	r3, [pc, #480]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	4974      	ldr	r1, [pc, #464]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e0:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	496c      	ldr	r1, [pc, #432]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005910:	4963      	ldr	r1, [pc, #396]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005924:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005932:	495b      	ldr	r1, [pc, #364]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	4952      	ldr	r1, [pc, #328]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	494a      	ldr	r1, [pc, #296]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800598a:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	4941      	ldr	r1, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	4939      	ldr	r1, [pc, #228]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d028      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059dc:	4930      	ldr	r1, [pc, #192]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ec:	d106      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f8:	60d3      	str	r3, [r2, #12]
 80059fa:	e011      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f8f9 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d04d      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a34:	d108      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a46:	e012      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4e:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a58:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a66:	490e      	ldr	r1, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a76:	d106      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	e020      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a02      	ldr	r2, [pc, #8]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f8a5 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae2:	4947      	ldr	r1, [pc, #284]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a41      	ldr	r2, [pc, #260]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
 8005b00:	e011      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0a:	d10c      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	2101      	movs	r1, #1
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f876 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b32:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b42:	492f      	ldr	r1, [pc, #188]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f851 	bl	8005c04 <RCCEx_PLLSAI1_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b82:	f023 0204 	bic.w	r2, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8c:	491c      	ldr	r1, [pc, #112]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba6:	f023 0218 	bic.w	r2, r3, #24
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	4913      	ldr	r1, [pc, #76]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd4:	490a      	ldr	r1, [pc, #40]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000

08005c04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c12:	4b72      	ldr	r3, [pc, #456]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00e      	beq.n	8005c3c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c1e:	4b6f      	ldr	r3, [pc, #444]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0203 	and.w	r2, r3, #3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d103      	bne.n	8005c36 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
       ||
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d142      	bne.n	8005cbc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e03f      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d018      	beq.n	8005c76 <RCCEx_PLLSAI1_Config+0x72>
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d825      	bhi.n	8005c94 <RCCEx_PLLSAI1_Config+0x90>
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d002      	beq.n	8005c52 <RCCEx_PLLSAI1_Config+0x4e>
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d009      	beq.n	8005c64 <RCCEx_PLLSAI1_Config+0x60>
 8005c50:	e020      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c52:	4b62      	ldr	r3, [pc, #392]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d11d      	bne.n	8005c9a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c62:	e01a      	b.n	8005c9a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c64:	4b5d      	ldr	r3, [pc, #372]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d116      	bne.n	8005c9e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c74:	e013      	b.n	8005c9e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c76:	4b59      	ldr	r3, [pc, #356]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c82:	4b56      	ldr	r3, [pc, #344]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c92:	e006      	b.n	8005ca2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e004      	b.n	8005ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005caa:	4b4c      	ldr	r3, [pc, #304]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f023 0203 	bic.w	r2, r3, #3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4949      	ldr	r1, [pc, #292]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8086 	bne.w	8005dd0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cc4:	4b45      	ldr	r3, [pc, #276]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a44      	ldr	r2, [pc, #272]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fc f950 	bl	8001f74 <HAL_GetTick>
 8005cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cd6:	e009      	b.n	8005cec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd8:	f7fc f94c 	bl	8001f74 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d902      	bls.n	8005cec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cea:	e005      	b.n	8005cf8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cec:	4b3b      	ldr	r3, [pc, #236]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ef      	bne.n	8005cd8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d168      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d04:	4b35      	ldr	r3, [pc, #212]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6892      	ldr	r2, [r2, #8]
 8005d10:	0211      	lsls	r1, r2, #8
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68d2      	ldr	r2, [r2, #12]
 8005d16:	06d2      	lsls	r2, r2, #27
 8005d18:	4311      	orrs	r1, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6852      	ldr	r2, [r2, #4]
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	0112      	lsls	r2, r2, #4
 8005d22:	430a      	orrs	r2, r1
 8005d24:	492d      	ldr	r1, [pc, #180]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	610b      	str	r3, [r1, #16]
 8005d2a:	e02d      	b.n	8005d88 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d115      	bne.n	8005d5e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d32:	4b2a      	ldr	r3, [pc, #168]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d34:	691a      	ldr	r2, [r3, #16]
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6892      	ldr	r2, [r2, #8]
 8005d3e:	0211      	lsls	r1, r2, #8
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6912      	ldr	r2, [r2, #16]
 8005d44:	0852      	lsrs	r2, r2, #1
 8005d46:	3a01      	subs	r2, #1
 8005d48:	0552      	lsls	r2, r2, #21
 8005d4a:	4311      	orrs	r1, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	3a01      	subs	r2, #1
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	430a      	orrs	r2, r1
 8005d56:	4921      	ldr	r1, [pc, #132]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	610b      	str	r3, [r1, #16]
 8005d5c:	e014      	b.n	8005d88 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d5e:	4b1f      	ldr	r3, [pc, #124]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	4b21      	ldr	r3, [pc, #132]	; (8005de8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6892      	ldr	r2, [r2, #8]
 8005d6a:	0211      	lsls	r1, r2, #8
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6952      	ldr	r2, [r2, #20]
 8005d70:	0852      	lsrs	r2, r2, #1
 8005d72:	3a01      	subs	r2, #1
 8005d74:	0652      	lsls	r2, r2, #25
 8005d76:	4311      	orrs	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6852      	ldr	r2, [r2, #4]
 8005d7c:	3a01      	subs	r2, #1
 8005d7e:	0112      	lsls	r2, r2, #4
 8005d80:	430a      	orrs	r2, r1
 8005d82:	4916      	ldr	r1, [pc, #88]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d88:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fc f8ee 	bl	8001f74 <HAL_GetTick>
 8005d98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d9a:	e009      	b.n	8005db0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d9c:	f7fc f8ea 	bl	8001f74 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d902      	bls.n	8005db0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	73fb      	strb	r3, [r7, #15]
          break;
 8005dae:	e005      	b.n	8005dbc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005db0:	4b0a      	ldr	r3, [pc, #40]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ef      	beq.n	8005d9c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc4:	691a      	ldr	r2, [r3, #16]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	4904      	ldr	r1, [pc, #16]	; (8005ddc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	07ff800f 	.word	0x07ff800f
 8005de4:	ff9f800f 	.word	0xff9f800f
 8005de8:	f9ff800f 	.word	0xf9ff800f

08005dec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dfa:	4b72      	ldr	r3, [pc, #456]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e06:	4b6f      	ldr	r3, [pc, #444]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0203 	and.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d103      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
       ||
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d142      	bne.n	8005ea4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	73fb      	strb	r3, [r7, #15]
 8005e22:	e03f      	b.n	8005ea4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d018      	beq.n	8005e5e <RCCEx_PLLSAI2_Config+0x72>
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d825      	bhi.n	8005e7c <RCCEx_PLLSAI2_Config+0x90>
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d002      	beq.n	8005e3a <RCCEx_PLLSAI2_Config+0x4e>
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d009      	beq.n	8005e4c <RCCEx_PLLSAI2_Config+0x60>
 8005e38:	e020      	b.n	8005e7c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e3a:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d11d      	bne.n	8005e82 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e4a:	e01a      	b.n	8005e82 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e4c:	4b5d      	ldr	r3, [pc, #372]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e5c:	e013      	b.n	8005e86 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e5e:	4b59      	ldr	r3, [pc, #356]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10f      	bne.n	8005e8a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e6a:	4b56      	ldr	r3, [pc, #344]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e7a:	e006      	b.n	8005e8a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e004      	b.n	8005e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d108      	bne.n	8005ea4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005e92:	4b4c      	ldr	r3, [pc, #304]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f023 0203 	bic.w	r2, r3, #3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4949      	ldr	r1, [pc, #292]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 8086 	bne.w	8005fb8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005eac:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a44      	ldr	r2, [pc, #272]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb8:	f7fc f85c 	bl	8001f74 <HAL_GetTick>
 8005ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ebe:	e009      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ec0:	f7fc f858 	bl	8001f74 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed2:	e005      	b.n	8005ee0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ed4:	4b3b      	ldr	r3, [pc, #236]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ef      	bne.n	8005ec0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d168      	bne.n	8005fb8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	4b35      	ldr	r3, [pc, #212]	; (8005fc8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6892      	ldr	r2, [r2, #8]
 8005ef8:	0211      	lsls	r1, r2, #8
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	06d2      	lsls	r2, r2, #27
 8005f00:	4311      	orrs	r1, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6852      	ldr	r2, [r2, #4]
 8005f06:	3a01      	subs	r2, #1
 8005f08:	0112      	lsls	r2, r2, #4
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	492d      	ldr	r1, [pc, #180]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	614b      	str	r3, [r1, #20]
 8005f12:	e02d      	b.n	8005f70 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d115      	bne.n	8005f46 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6892      	ldr	r2, [r2, #8]
 8005f26:	0211      	lsls	r1, r2, #8
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6912      	ldr	r2, [r2, #16]
 8005f2c:	0852      	lsrs	r2, r2, #1
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	0552      	lsls	r2, r2, #21
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6852      	ldr	r2, [r2, #4]
 8005f38:	3a01      	subs	r2, #1
 8005f3a:	0112      	lsls	r2, r2, #4
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	4921      	ldr	r1, [pc, #132]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	614b      	str	r3, [r1, #20]
 8005f44:	e014      	b.n	8005f70 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f48:	695a      	ldr	r2, [r3, #20]
 8005f4a:	4b21      	ldr	r3, [pc, #132]	; (8005fd0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6892      	ldr	r2, [r2, #8]
 8005f52:	0211      	lsls	r1, r2, #8
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6952      	ldr	r2, [r2, #20]
 8005f58:	0852      	lsrs	r2, r2, #1
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	0652      	lsls	r2, r2, #25
 8005f5e:	4311      	orrs	r1, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	3a01      	subs	r2, #1
 8005f66:	0112      	lsls	r2, r2, #4
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	4916      	ldr	r1, [pc, #88]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7c:	f7fb fffa 	bl	8001f74 <HAL_GetTick>
 8005f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f82:	e009      	b.n	8005f98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f84:	f7fb fff6 	bl	8001f74 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d902      	bls.n	8005f98 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	73fb      	strb	r3, [r7, #15]
          break;
 8005f96:	e005      	b.n	8005fa4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ef      	beq.n	8005f84 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	07ff800f 	.word	0x07ff800f
 8005fcc:	ff9f800f 	.word	0xff9f800f
 8005fd0:	f9ff800f 	.word	0xf9ff800f

08005fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e049      	b.n	800607a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f841 	bl	8006082 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 f9da 	bl	80063cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
	...

08006098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e04f      	b.n	8006150 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a23      	ldr	r2, [pc, #140]	; (800615c <HAL_TIM_Base_Start_IT+0xc4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d01d      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d018      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_TIM_Base_Start_IT+0xc8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1e      	ldr	r2, [pc, #120]	; (8006164 <HAL_TIM_Base_Start_IT+0xcc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_TIM_Base_Start_IT+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1b      	ldr	r2, [pc, #108]	; (800616c <HAL_TIM_Base_Start_IT+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIM_Base_Start_IT+0x76>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <HAL_TIM_Base_Start_IT+0xd8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	4b17      	ldr	r3, [pc, #92]	; (8006174 <HAL_TIM_Base_Start_IT+0xdc>)
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d015      	beq.n	800614c <HAL_TIM_Base_Start_IT+0xb4>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006126:	d011      	beq.n	800614c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006138:	e008      	b.n	800614c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f042 0201 	orr.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e000      	b.n	800614e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40012c00 	.word	0x40012c00
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40013400 	.word	0x40013400
 8006170:	40014000 	.word	0x40014000
 8006174:	00010007 	.word	0x00010007

08006178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d020      	beq.n	80061dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01b      	beq.n	80061dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0202 	mvn.w	r2, #2
 80061ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 0303 	and.w	r3, r3, #3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8e4 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 80061c8:	e005      	b.n	80061d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8d6 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8e7 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d020      	beq.n	8006228 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01b      	beq.n	8006228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0204 	mvn.w	r2, #4
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f8be 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8b0 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f8c1 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d020      	beq.n	8006274 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0208 	mvn.w	r2, #8
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f898 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f88a 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f89b 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b00      	cmp	r3, #0
 800627c:	d020      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01b      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0210 	mvn.w	r2, #16
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2208      	movs	r2, #8
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f872 	bl	8006390 <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f864 	bl	800637c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f875 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00c      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0201 	mvn.w	r2, #1
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb fb0c 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f906 	bl	8006514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b00      	cmp	r3, #0
 800631a:	d007      	beq.n	800632c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8fe 	bl	8006528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00c      	beq.n	8006350 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d007      	beq.n	8006350 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f834 	bl	80063b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0220 	mvn.w	r2, #32
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f8c6 	bl	8006500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d013      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ea:	d00f      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a3d      	ldr	r2, [pc, #244]	; (80064e4 <TIM_Base_SetConfig+0x118>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00b      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3c      	ldr	r2, [pc, #240]	; (80064e8 <TIM_Base_SetConfig+0x11c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d007      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3b      	ldr	r2, [pc, #236]	; (80064ec <TIM_Base_SetConfig+0x120>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3a      	ldr	r2, [pc, #232]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d108      	bne.n	800641e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d01f      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642c:	d01b      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2c      	ldr	r2, [pc, #176]	; (80064e4 <TIM_Base_SetConfig+0x118>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d017      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <TIM_Base_SetConfig+0x11c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <TIM_Base_SetConfig+0x120>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a28      	ldr	r2, [pc, #160]	; (80064f4 <TIM_Base_SetConfig+0x128>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a27      	ldr	r2, [pc, #156]	; (80064f8 <TIM_Base_SetConfig+0x12c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_Base_SetConfig+0x9a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a26      	ldr	r2, [pc, #152]	; (80064fc <TIM_Base_SetConfig+0x130>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d108      	bne.n	8006478 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a10      	ldr	r2, [pc, #64]	; (80064e0 <TIM_Base_SetConfig+0x114>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00f      	beq.n	80064c4 <TIM_Base_SetConfig+0xf8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a12      	ldr	r2, [pc, #72]	; (80064f0 <TIM_Base_SetConfig+0x124>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_Base_SetConfig+0xf8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a11      	ldr	r2, [pc, #68]	; (80064f4 <TIM_Base_SetConfig+0x128>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_Base_SetConfig+0xf8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a10      	ldr	r2, [pc, #64]	; (80064f8 <TIM_Base_SetConfig+0x12c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0xf8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a0f      	ldr	r2, [pc, #60]	; (80064fc <TIM_Base_SetConfig+0x130>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d103      	bne.n	80064cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	615a      	str	r2, [r3, #20]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40013400 	.word	0x40013400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800

08006500 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e042      	b.n	80065d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fb faef 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	; 0x24
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fb24 	bl	8006bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f825 	bl	80065dc <UART_SetConfig>
 8006592:	4603      	mov	r3, r0
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e01b      	b.n	80065d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fba3 	bl	8006d18 <UART_CheckIdleState>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e0:	b08c      	sub	sp, #48	; 0x30
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	4313      	orrs	r3, r2
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4baa      	ldr	r3, [pc, #680]	; (80068b4 <UART_SetConfig+0x2d8>)
 800660c:	4013      	ands	r3, r2
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006614:	430b      	orrs	r3, r1
 8006616:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a9f      	ldr	r2, [pc, #636]	; (80068b8 <UART_SetConfig+0x2dc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006644:	4313      	orrs	r3, r2
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006652:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665c:	430b      	orrs	r3, r1
 800665e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	f023 010f 	bic.w	r1, r3, #15
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a90      	ldr	r2, [pc, #576]	; (80068bc <UART_SetConfig+0x2e0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d125      	bne.n	80066cc <UART_SetConfig+0xf0>
 8006680:	4b8f      	ldr	r3, [pc, #572]	; (80068c0 <UART_SetConfig+0x2e4>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d81a      	bhi.n	80066c4 <UART_SetConfig+0xe8>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0xb8>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066aa:	e116      	b.n	80068da <UART_SetConfig+0x2fe>
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b2:	e112      	b.n	80068da <UART_SetConfig+0x2fe>
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ba:	e10e      	b.n	80068da <UART_SetConfig+0x2fe>
 80066bc:	2308      	movs	r3, #8
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066c2:	e10a      	b.n	80068da <UART_SetConfig+0x2fe>
 80066c4:	2310      	movs	r3, #16
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ca:	e106      	b.n	80068da <UART_SetConfig+0x2fe>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a7c      	ldr	r2, [pc, #496]	; (80068c4 <UART_SetConfig+0x2e8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d138      	bne.n	8006748 <UART_SetConfig+0x16c>
 80066d6:	4b7a      	ldr	r3, [pc, #488]	; (80068c0 <UART_SetConfig+0x2e4>)
 80066d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066dc:	f003 030c 	and.w	r3, r3, #12
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	d82d      	bhi.n	8006740 <UART_SetConfig+0x164>
 80066e4:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x110>)
 80066e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ea:	bf00      	nop
 80066ec:	08006721 	.word	0x08006721
 80066f0:	08006741 	.word	0x08006741
 80066f4:	08006741 	.word	0x08006741
 80066f8:	08006741 	.word	0x08006741
 80066fc:	08006731 	.word	0x08006731
 8006700:	08006741 	.word	0x08006741
 8006704:	08006741 	.word	0x08006741
 8006708:	08006741 	.word	0x08006741
 800670c:	08006729 	.word	0x08006729
 8006710:	08006741 	.word	0x08006741
 8006714:	08006741 	.word	0x08006741
 8006718:	08006741 	.word	0x08006741
 800671c:	08006739 	.word	0x08006739
 8006720:	2300      	movs	r3, #0
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006726:	e0d8      	b.n	80068da <UART_SetConfig+0x2fe>
 8006728:	2302      	movs	r3, #2
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800672e:	e0d4      	b.n	80068da <UART_SetConfig+0x2fe>
 8006730:	2304      	movs	r3, #4
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006736:	e0d0      	b.n	80068da <UART_SetConfig+0x2fe>
 8006738:	2308      	movs	r3, #8
 800673a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800673e:	e0cc      	b.n	80068da <UART_SetConfig+0x2fe>
 8006740:	2310      	movs	r3, #16
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006746:	e0c8      	b.n	80068da <UART_SetConfig+0x2fe>
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a5e      	ldr	r2, [pc, #376]	; (80068c8 <UART_SetConfig+0x2ec>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d125      	bne.n	800679e <UART_SetConfig+0x1c2>
 8006752:	4b5b      	ldr	r3, [pc, #364]	; (80068c0 <UART_SetConfig+0x2e4>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800675c:	2b30      	cmp	r3, #48	; 0x30
 800675e:	d016      	beq.n	800678e <UART_SetConfig+0x1b2>
 8006760:	2b30      	cmp	r3, #48	; 0x30
 8006762:	d818      	bhi.n	8006796 <UART_SetConfig+0x1ba>
 8006764:	2b20      	cmp	r3, #32
 8006766:	d00a      	beq.n	800677e <UART_SetConfig+0x1a2>
 8006768:	2b20      	cmp	r3, #32
 800676a:	d814      	bhi.n	8006796 <UART_SetConfig+0x1ba>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <UART_SetConfig+0x19a>
 8006770:	2b10      	cmp	r3, #16
 8006772:	d008      	beq.n	8006786 <UART_SetConfig+0x1aa>
 8006774:	e00f      	b.n	8006796 <UART_SetConfig+0x1ba>
 8006776:	2300      	movs	r3, #0
 8006778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800677c:	e0ad      	b.n	80068da <UART_SetConfig+0x2fe>
 800677e:	2302      	movs	r3, #2
 8006780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006784:	e0a9      	b.n	80068da <UART_SetConfig+0x2fe>
 8006786:	2304      	movs	r3, #4
 8006788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678c:	e0a5      	b.n	80068da <UART_SetConfig+0x2fe>
 800678e:	2308      	movs	r3, #8
 8006790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006794:	e0a1      	b.n	80068da <UART_SetConfig+0x2fe>
 8006796:	2310      	movs	r3, #16
 8006798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679c:	e09d      	b.n	80068da <UART_SetConfig+0x2fe>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a4a      	ldr	r2, [pc, #296]	; (80068cc <UART_SetConfig+0x2f0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d125      	bne.n	80067f4 <UART_SetConfig+0x218>
 80067a8:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <UART_SetConfig+0x2e4>)
 80067aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067b2:	2bc0      	cmp	r3, #192	; 0xc0
 80067b4:	d016      	beq.n	80067e4 <UART_SetConfig+0x208>
 80067b6:	2bc0      	cmp	r3, #192	; 0xc0
 80067b8:	d818      	bhi.n	80067ec <UART_SetConfig+0x210>
 80067ba:	2b80      	cmp	r3, #128	; 0x80
 80067bc:	d00a      	beq.n	80067d4 <UART_SetConfig+0x1f8>
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d814      	bhi.n	80067ec <UART_SetConfig+0x210>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <UART_SetConfig+0x1f0>
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d008      	beq.n	80067dc <UART_SetConfig+0x200>
 80067ca:	e00f      	b.n	80067ec <UART_SetConfig+0x210>
 80067cc:	2300      	movs	r3, #0
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d2:	e082      	b.n	80068da <UART_SetConfig+0x2fe>
 80067d4:	2302      	movs	r3, #2
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067da:	e07e      	b.n	80068da <UART_SetConfig+0x2fe>
 80067dc:	2304      	movs	r3, #4
 80067de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e2:	e07a      	b.n	80068da <UART_SetConfig+0x2fe>
 80067e4:	2308      	movs	r3, #8
 80067e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ea:	e076      	b.n	80068da <UART_SetConfig+0x2fe>
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f2:	e072      	b.n	80068da <UART_SetConfig+0x2fe>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a35      	ldr	r2, [pc, #212]	; (80068d0 <UART_SetConfig+0x2f4>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d12a      	bne.n	8006854 <UART_SetConfig+0x278>
 80067fe:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <UART_SetConfig+0x2e4>)
 8006800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800680c:	d01a      	beq.n	8006844 <UART_SetConfig+0x268>
 800680e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006812:	d81b      	bhi.n	800684c <UART_SetConfig+0x270>
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d00c      	beq.n	8006834 <UART_SetConfig+0x258>
 800681a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681e:	d815      	bhi.n	800684c <UART_SetConfig+0x270>
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <UART_SetConfig+0x250>
 8006824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006828:	d008      	beq.n	800683c <UART_SetConfig+0x260>
 800682a:	e00f      	b.n	800684c <UART_SetConfig+0x270>
 800682c:	2300      	movs	r3, #0
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006832:	e052      	b.n	80068da <UART_SetConfig+0x2fe>
 8006834:	2302      	movs	r3, #2
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683a:	e04e      	b.n	80068da <UART_SetConfig+0x2fe>
 800683c:	2304      	movs	r3, #4
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006842:	e04a      	b.n	80068da <UART_SetConfig+0x2fe>
 8006844:	2308      	movs	r3, #8
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684a:	e046      	b.n	80068da <UART_SetConfig+0x2fe>
 800684c:	2310      	movs	r3, #16
 800684e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006852:	e042      	b.n	80068da <UART_SetConfig+0x2fe>
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <UART_SetConfig+0x2dc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d13a      	bne.n	80068d4 <UART_SetConfig+0x2f8>
 800685e:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <UART_SetConfig+0x2e4>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006868:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800686c:	d01a      	beq.n	80068a4 <UART_SetConfig+0x2c8>
 800686e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006872:	d81b      	bhi.n	80068ac <UART_SetConfig+0x2d0>
 8006874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006878:	d00c      	beq.n	8006894 <UART_SetConfig+0x2b8>
 800687a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687e:	d815      	bhi.n	80068ac <UART_SetConfig+0x2d0>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <UART_SetConfig+0x2b0>
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006888:	d008      	beq.n	800689c <UART_SetConfig+0x2c0>
 800688a:	e00f      	b.n	80068ac <UART_SetConfig+0x2d0>
 800688c:	2300      	movs	r3, #0
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e022      	b.n	80068da <UART_SetConfig+0x2fe>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689a:	e01e      	b.n	80068da <UART_SetConfig+0x2fe>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a2:	e01a      	b.n	80068da <UART_SetConfig+0x2fe>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e016      	b.n	80068da <UART_SetConfig+0x2fe>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e012      	b.n	80068da <UART_SetConfig+0x2fe>
 80068b4:	cfff69f3 	.word	0xcfff69f3
 80068b8:	40008000 	.word	0x40008000
 80068bc:	40013800 	.word	0x40013800
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40004400 	.word	0x40004400
 80068c8:	40004800 	.word	0x40004800
 80068cc:	40004c00 	.word	0x40004c00
 80068d0:	40005000 	.word	0x40005000
 80068d4:	2310      	movs	r3, #16
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4aae      	ldr	r2, [pc, #696]	; (8006b98 <UART_SetConfig+0x5bc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	f040 8097 	bne.w	8006a14 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d823      	bhi.n	8006936 <UART_SetConfig+0x35a>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x318>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006937 	.word	0x08006937
 80068fc:	08006921 	.word	0x08006921
 8006900:	08006937 	.word	0x08006937
 8006904:	08006927 	.word	0x08006927
 8006908:	08006937 	.word	0x08006937
 800690c:	08006937 	.word	0x08006937
 8006910:	08006937 	.word	0x08006937
 8006914:	0800692f 	.word	0x0800692f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fe fd26 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800691e:	e010      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b9e      	ldr	r3, [pc, #632]	; (8006b9c <UART_SetConfig+0x5c0>)
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006924:	e00d      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fe fc87 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800692c:	e009      	b.n	8006942 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006934:	e005      	b.n	8006942 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006940:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8130 	beq.w	8006baa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	4a94      	ldr	r2, [pc, #592]	; (8006ba0 <UART_SetConfig+0x5c4>)
 8006950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006954:	461a      	mov	r2, r3
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	fbb3 f3f2 	udiv	r3, r3, r2
 800695c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4413      	add	r3, r2
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	429a      	cmp	r2, r3
 800696c:	d305      	bcc.n	800697a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	429a      	cmp	r2, r3
 8006978:	d903      	bls.n	8006982 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006980:	e113      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2200      	movs	r2, #0
 8006986:	60bb      	str	r3, [r7, #8]
 8006988:	60fa      	str	r2, [r7, #12]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	4a84      	ldr	r2, [pc, #528]	; (8006ba0 <UART_SetConfig+0x5c4>)
 8006990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006994:	b29b      	uxth	r3, r3
 8006996:	2200      	movs	r2, #0
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069a4:	f7f9 ffda 	bl	800095c <__aeabi_uldivmod>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	020b      	lsls	r3, r1, #8
 80069ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80069be:	0202      	lsls	r2, r0, #8
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	6849      	ldr	r1, [r1, #4]
 80069c4:	0849      	lsrs	r1, r1, #1
 80069c6:	2000      	movs	r0, #0
 80069c8:	460c      	mov	r4, r1
 80069ca:	4605      	mov	r5, r0
 80069cc:	eb12 0804 	adds.w	r8, r2, r4
 80069d0:	eb43 0905 	adc.w	r9, r3, r5
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	469a      	mov	sl, r3
 80069dc:	4693      	mov	fp, r2
 80069de:	4652      	mov	r2, sl
 80069e0:	465b      	mov	r3, fp
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7f9 ffb9 	bl	800095c <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4613      	mov	r3, r2
 80069f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f8:	d308      	bcc.n	8006a0c <UART_SetConfig+0x430>
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a00:	d204      	bcs.n	8006a0c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	60da      	str	r2, [r3, #12]
 8006a0a:	e0ce      	b.n	8006baa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a12:	e0ca      	b.n	8006baa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1c:	d166      	bne.n	8006aec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d827      	bhi.n	8006a76 <UART_SetConfig+0x49a>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0x450>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a59 	.word	0x08006a59
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a77 	.word	0x08006a77
 8006a3c:	08006a67 	.word	0x08006a67
 8006a40:	08006a77 	.word	0x08006a77
 8006a44:	08006a77 	.word	0x08006a77
 8006a48:	08006a77 	.word	0x08006a77
 8006a4c:	08006a6f 	.word	0x08006a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fe fc8a 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8006a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a56:	e014      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a58:	f7fe fc9c 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a5e:	e010      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a60:	4b4e      	ldr	r3, [pc, #312]	; (8006b9c <UART_SetConfig+0x5c0>)
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a64:	e00d      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a66:	f7fe fbe7 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a6c:	e009      	b.n	8006a82 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a74:	e005      	b.n	8006a82 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8090 	beq.w	8006baa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	4a44      	ldr	r2, [pc, #272]	; (8006ba0 <UART_SetConfig+0x5c4>)
 8006a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a9c:	005a      	lsls	r2, r3, #1
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	085b      	lsrs	r3, r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2b0f      	cmp	r3, #15
 8006ab4:	d916      	bls.n	8006ae4 <UART_SetConfig+0x508>
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d212      	bcs.n	8006ae4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	8bfb      	ldrh	r3, [r7, #30]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	8bfa      	ldrh	r2, [r7, #30]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	e062      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006aea:	e05e      	b.n	8006baa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006af0:	2b08      	cmp	r3, #8
 8006af2:	d828      	bhi.n	8006b46 <UART_SetConfig+0x56a>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0x520>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b37 	.word	0x08006b37
 8006b10:	08006b47 	.word	0x08006b47
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	08006b47 	.word	0x08006b47
 8006b1c:	08006b3f 	.word	0x08006b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b20:	f7fe fc22 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8006b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b26:	e014      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b28:	f7fe fc34 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b2e:	e010      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <UART_SetConfig+0x5c0>)
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b34:	e00d      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b36:	f7fe fb7f 	bl	8005238 <HAL_RCC_GetSysClockFreq>
 8006b3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b3c:	e009      	b.n	8006b52 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b44:	e005      	b.n	8006b52 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b50:	bf00      	nop
    }

    if (pclk != 0U)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d028      	beq.n	8006baa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	4a10      	ldr	r2, [pc, #64]	; (8006ba0 <UART_SetConfig+0x5c4>)
 8006b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b62:	461a      	mov	r2, r3
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	441a      	add	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d910      	bls.n	8006ba4 <UART_SetConfig+0x5c8>
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b88:	d20c      	bcs.n	8006ba4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x5ce>
 8006b96:	bf00      	nop
 8006b98:	40008000 	.word	0x40008000
 8006b9c:	00f42400 	.word	0x00f42400
 8006ba0:	0800aa2c 	.word	0x0800aa2c
      }
      else
      {
        ret = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006bc6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3730      	adds	r7, #48	; 0x30
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00a      	beq.n	8006c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01a      	beq.n	8006cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd2:	d10a      	bne.n	8006cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b098      	sub	sp, #96	; 0x60
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d28:	f7fb f924 	bl	8001f74 <HAL_GetTick>
 8006d2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b08      	cmp	r3, #8
 8006d3a:	d12f      	bne.n	8006d9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f88e 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d022      	beq.n	8006d9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d74:	647b      	str	r3, [r7, #68]	; 0x44
 8006d76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e6      	bne.n	8006d56 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e063      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0304 	and.w	r3, r3, #4
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d149      	bne.n	8006e3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006daa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db2:	2200      	movs	r2, #0
 8006db4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f857 	bl	8006e6c <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d03c      	beq.n	8006e3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
 8006de4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e6      	bne.n	8006dc4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f023 0301 	bic.w	r3, r3, #1
 8006e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3308      	adds	r3, #8
 8006e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e16:	61fa      	str	r2, [r7, #28]
 8006e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	617b      	str	r3, [r7, #20]
   return(result);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e012      	b.n	8006e64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3758      	adds	r7, #88	; 0x58
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e7c:	e049      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d045      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e86:	f7fb f875 	bl	8001f74 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d302      	bcc.n	8006e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e048      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d031      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d110      	bne.n	8006ede <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f838 	bl	8006f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e029      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eec:	d111      	bne.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f81e 	bl	8006f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e00f      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d0a6      	beq.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b095      	sub	sp, #84	; 0x54
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	643b      	str	r3, [r7, #64]	; 0x40
 8006f62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e6      	bne.n	8006f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3308      	adds	r3, #8
 8006f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d118      	bne.n	8006fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f023 0310 	bic.w	r3, r3, #16
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6979      	ldr	r1, [r7, #20]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ffa:	bf00      	nop
 8006ffc:	3754      	adds	r7, #84	; 0x54
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_UARTEx_DisableFifoMode+0x16>
 8007018:	2302      	movs	r3, #2
 800701a:	e027      	b.n	800706c <HAL_UARTEx_DisableFifoMode+0x66>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2224      	movs	r2, #36	; 0x24
 8007028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800704a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2220      	movs	r2, #32
 800705e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800708c:	2302      	movs	r3, #2
 800708e:	e02d      	b.n	80070ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2224      	movs	r2, #36	; 0x24
 800709c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f84f 	bl	8007170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007108:	2302      	movs	r3, #2
 800710a:	e02d      	b.n	8007168 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2224      	movs	r2, #36	; 0x24
 8007118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f811 	bl	8007170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800717c:	2b00      	cmp	r3, #0
 800717e:	d108      	bne.n	8007192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007190:	e031      	b.n	80071f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007192:	2308      	movs	r3, #8
 8007194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007196:	2308      	movs	r3, #8
 8007198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	0e5b      	lsrs	r3, r3, #25
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	0f5b      	lsrs	r3, r3, #29
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	7b3a      	ldrb	r2, [r7, #12]
 80071be:	4911      	ldr	r1, [pc, #68]	; (8007204 <UARTEx_SetNbDataToProcess+0x94>)
 80071c0:	5c8a      	ldrb	r2, [r1, r2]
 80071c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80071c6:	7b3a      	ldrb	r2, [r7, #12]
 80071c8:	490f      	ldr	r1, [pc, #60]	; (8007208 <UARTEx_SetNbDataToProcess+0x98>)
 80071ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80071cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	7b7a      	ldrb	r2, [r7, #13]
 80071dc:	4909      	ldr	r1, [pc, #36]	; (8007204 <UARTEx_SetNbDataToProcess+0x94>)
 80071de:	5c8a      	ldrb	r2, [r1, r2]
 80071e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80071e4:	7b7a      	ldrb	r2, [r7, #13]
 80071e6:	4908      	ldr	r1, [pc, #32]	; (8007208 <UARTEx_SetNbDataToProcess+0x98>)
 80071e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80071f6:	bf00      	nop
 80071f8:	3714      	adds	r7, #20
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	0800aa44 	.word	0x0800aa44
 8007208:	0800aa4c 	.word	0x0800aa4c

0800720c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800720c:	b084      	sub	sp, #16
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	f107 001c 	add.w	r0, r7, #28
 800721a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa66 	bl	80076fc <USB_CoreReset>
 8007230:	4603      	mov	r3, r0
 8007232:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
 8007246:	e005      	b.n	8007254 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007260:	b004      	add	sp, #16
 8007262:	4770      	bx	lr

08007264 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f023 0201 	bic.w	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072a2:	78fb      	ldrb	r3, [r7, #3]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d115      	bne.n	80072d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7fa fe69 	bl	8001f8c <HAL_Delay>
      ms++;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fa0d 	bl	80076e0 <USB_GetMode>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d01e      	beq.n	800730a <USB_SetCurrentMode+0x84>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b31      	cmp	r3, #49	; 0x31
 80072d0:	d9f0      	bls.n	80072b4 <USB_SetCurrentMode+0x2e>
 80072d2:	e01a      	b.n	800730a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d115      	bne.n	8007306 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072e6:	2001      	movs	r0, #1
 80072e8:	f7fa fe50 	bl	8001f8c <HAL_Delay>
      ms++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f9f4 	bl	80076e0 <USB_GetMode>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <USB_SetCurrentMode+0x84>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b31      	cmp	r3, #49	; 0x31
 8007302:	d9f0      	bls.n	80072e6 <USB_SetCurrentMode+0x60>
 8007304:	e001      	b.n	800730a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e005      	b.n	8007316 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b32      	cmp	r3, #50	; 0x32
 800730e:	d101      	bne.n	8007314 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007320:	b084      	sub	sp, #16
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800732e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	e009      	b.n	8007354 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3340      	adds	r3, #64	; 0x40
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	2200      	movs	r2, #0
 800734c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3301      	adds	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b0e      	cmp	r3, #14
 8007358:	d9f2      	bls.n	8007340 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800735a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d11c      	bne.n	800739a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800736e:	f043 0302 	orr.w	r3, r3, #2
 8007372:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	e005      	b.n	80073a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073ac:	461a      	mov	r2, r3
 80073ae:	2300      	movs	r3, #0
 80073b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073b2:	2103      	movs	r1, #3
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f959 	bl	800766c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ba:	2110      	movs	r1, #16
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f8f1 	bl	80075a4 <USB_FlushTxFifo>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f91d 	bl	800760c <USB_FlushRxFifo>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	461a      	mov	r2, r3
 80073e4:	2300      	movs	r3, #0
 80073e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ee:	461a      	mov	r2, r3
 80073f0:	2300      	movs	r3, #0
 80073f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	461a      	mov	r2, r3
 80073fc:	2300      	movs	r3, #0
 80073fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	e043      	b.n	800748e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800741c:	d118      	bne.n	8007450 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007430:	461a      	mov	r2, r3
 8007432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	e013      	b.n	8007462 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	e008      	b.n	8007462 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745c:	461a      	mov	r2, r3
 800745e:	2300      	movs	r3, #0
 8007460:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746e:	461a      	mov	r2, r3
 8007470:	2300      	movs	r3, #0
 8007472:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007480:	461a      	mov	r2, r3
 8007482:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007486:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3301      	adds	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d3b7      	bcc.n	8007406 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e043      	b.n	8007524 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b2:	d118      	bne.n	80074e6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10a      	bne.n	80074d0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	461a      	mov	r2, r3
 80074c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	e013      	b.n	80074f8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e008      	b.n	80074f8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	461a      	mov	r2, r3
 80074f4:	2300      	movs	r3, #0
 80074f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007504:	461a      	mov	r2, r3
 8007506:	2300      	movs	r3, #0
 8007508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	461a      	mov	r2, r3
 8007518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800751c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3301      	adds	r3, #1
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	429a      	cmp	r2, r3
 800752a:	d3b7      	bcc.n	800749c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800754c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f043 0210 	orr.w	r2, r3, #16
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <USB_DevInit+0x280>)
 8007560:	4313      	orrs	r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f043 0208 	orr.w	r2, r3, #8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757a:	2b01      	cmp	r3, #1
 800757c:	d107      	bne.n	800758e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007586:	f043 0304 	orr.w	r3, r3, #4
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800759a:	b004      	add	sp, #16
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	803c3800 	.word	0x803c3800

080075a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e01b      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	daf2      	bge.n	80075b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	019b      	lsls	r3, r3, #6
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e006      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d0f0      	beq.n	80075dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00030d40 	.word	0x00030d40

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e018      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d0f0      	beq.n	800763c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	00030d40 	.word	0x00030d40

0800766c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80076b8:	f023 0303 	bic.w	r3, r3, #3
 80076bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	f003 0301 	and.w	r3, r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <USB_CoreReset+0x64>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e01b      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	daf2      	bge.n	8007708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007722:	2300      	movs	r3, #0
 8007724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <USB_CoreReset+0x64>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e006      	b.n	8007752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b01      	cmp	r3, #1
 800774e:	d0f0      	beq.n	8007732 <USB_CoreReset+0x36>

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	00030d40 	.word	0x00030d40

08007764 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007776:	2b84      	cmp	r3, #132	; 0x84
 8007778:	d005      	beq.n	8007786 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800777a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	3303      	adds	r3, #3
 8007784:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007786:	68fb      	ldr	r3, [r7, #12]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800779a:	f3ef 8305 	mrs	r3, IPSR
 800779e:	607b      	str	r3, [r7, #4]
  return(result);
 80077a0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80077bc:	f001 f926 	bl	8008a0c <vTaskStartScheduler>
  
  return osOK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c8:	b089      	sub	sp, #36	; 0x24
 80077ca:	af04      	add	r7, sp, #16
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d020      	beq.n	800781a <osThreadCreate+0x54>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01c      	beq.n	800781a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685c      	ldr	r4, [r3, #4]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	691e      	ldr	r6, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff ffb6 	bl	8007764 <makeFreeRtosPriority>
 80077f8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	9100      	str	r1, [sp, #0]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	4632      	mov	r2, r6
 800780c:	4629      	mov	r1, r5
 800780e:	4620      	mov	r0, r4
 8007810:	f000 ff1e 	bl	8008650 <xTaskCreateStatic>
 8007814:	4603      	mov	r3, r0
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e01c      	b.n	8007854 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685c      	ldr	r4, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007826:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff ff98 	bl	8007764 <makeFreeRtosPriority>
 8007834:	4602      	mov	r2, r0
 8007836:	f107 030c 	add.w	r3, r7, #12
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	9200      	str	r2, [sp, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	4632      	mov	r2, r6
 8007842:	4629      	mov	r1, r5
 8007844:	4620      	mov	r0, r4
 8007846:	f000 ff60 	bl	800870a <xTaskCreate>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d001      	beq.n	8007854 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007850:	2300      	movs	r3, #0
 8007852:	e000      	b.n	8007856 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007854:	68fb      	ldr	r3, [r7, #12]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800785e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <osDelay+0x16>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	e000      	b.n	8007876 <osDelay+0x18>
 8007874:	2301      	movs	r3, #1
 8007876:	4618      	mov	r0, r3
 8007878:	f001 f894 	bl	80089a4 <vTaskDelay>
  
  return osOK;
 800787c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007886:	b580      	push	{r7, lr}
 8007888:	b086      	sub	sp, #24
 800788a:	af02      	add	r7, sp, #8
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00f      	beq.n	80078b8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d10a      	bne.n	80078b4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2203      	movs	r2, #3
 80078a4:	9200      	str	r2, [sp, #0]
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	2001      	movs	r0, #1
 80078ac:	f000 f9be 	bl	8007c2c <xQueueGenericCreateStatic>
 80078b0:	4603      	mov	r3, r0
 80078b2:	e016      	b.n	80078e2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	e014      	b.n	80078e2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d110      	bne.n	80078e0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80078be:	2203      	movs	r2, #3
 80078c0:	2100      	movs	r1, #0
 80078c2:	2001      	movs	r0, #1
 80078c4:	f000 fa2a 	bl	8007d1c <xQueueGenericCreate>
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d005      	beq.n	80078dc <osSemaphoreCreate+0x56>
 80078d0:	2300      	movs	r3, #0
 80078d2:	2200      	movs	r2, #0
 80078d4:	2100      	movs	r1, #0
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fa7a 	bl	8007dd0 <xQueueGenericSend>
      return sema;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	e000      	b.n	80078e2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80078e0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007900:	2380      	movs	r3, #128	; 0x80
 8007902:	e03a      	b.n	800797a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	d103      	bne.n	8007918 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007910:	f04f 33ff 	mov.w	r3, #4294967295
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	e009      	b.n	800792c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <osSemaphoreWait+0x40>
      ticks = 1;
 8007928:	2301      	movs	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800792c:	f7ff ff32 	bl	8007794 <inHandlerMode>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007936:	f107 0308 	add.w	r3, r7, #8
 800793a:	461a      	mov	r2, r3
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fcde 	bl	8008300 <xQueueReceiveFromISR>
 8007944:	4603      	mov	r3, r0
 8007946:	2b01      	cmp	r3, #1
 8007948:	d001      	beq.n	800794e <osSemaphoreWait+0x62>
      return osErrorOS;
 800794a:	23ff      	movs	r3, #255	; 0xff
 800794c:	e015      	b.n	800797a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d011      	beq.n	8007978 <osSemaphoreWait+0x8c>
 8007954:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <osSemaphoreWait+0x98>)
 8007956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	e008      	b.n	8007978 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007966:	68f9      	ldr	r1, [r7, #12]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fbbd 	bl	80080e8 <xQueueSemaphoreTake>
 800796e:	4603      	mov	r3, r0
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007974:	23ff      	movs	r3, #255	; 0xff
 8007976:	e000      	b.n	800797a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007998:	f7ff fefc 	bl	8007794 <inHandlerMode>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d016      	beq.n	80079d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fb0f 	bl	8007fcc <xQueueGiveFromISR>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d001      	beq.n	80079b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80079b4:	23ff      	movs	r3, #255	; 0xff
 80079b6:	e017      	b.n	80079e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d013      	beq.n	80079e6 <osSemaphoreRelease+0x5e>
 80079be:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <osSemaphoreRelease+0x68>)
 80079c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	e00a      	b.n	80079e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80079d0:	2300      	movs	r3, #0
 80079d2:	2200      	movs	r2, #0
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f9fa 	bl	8007dd0 <xQueueGenericSend>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d001      	beq.n	80079e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80079e2:	23ff      	movs	r3, #255	; 0xff
 80079e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f103 0208 	add.w	r2, r3, #8
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f103 0208 	add.w	r2, r3, #8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f103 0208 	add.w	r2, r3, #8
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a42:	bf00      	nop
 8007a44:	370c      	adds	r7, #12
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b085      	sub	sp, #20
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689a      	ldr	r2, [r3, #8]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	601a      	str	r2, [r3, #0]
}
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a96:	b480      	push	{r7}
 8007a98:	b085      	sub	sp, #20
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e00c      	b.n	8007ad0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3308      	adds	r3, #8
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e002      	b.n	8007ac4 <vListInsert+0x2e>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d2f6      	bcs.n	8007abe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6892      	ldr	r2, [r2, #8]
 8007b1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6852      	ldr	r2, [r2, #4]
 8007b28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d103      	bne.n	8007b3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	1e5a      	subs	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b86:	f001 fea5 	bl	80098d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b96:	fb01 f303 	mul.w	r3, r1, r3
 8007b9a:	441a      	add	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	68f9      	ldr	r1, [r7, #12]
 8007bba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bbc:	fb01 f303 	mul.w	r3, r1, r3
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	22ff      	movs	r2, #255	; 0xff
 8007bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	22ff      	movs	r2, #255	; 0xff
 8007bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d114      	bne.n	8007c06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01a      	beq.n	8007c1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3310      	adds	r3, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 f961 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <xQueueGenericReset+0xcc>)
 8007bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	e009      	b.n	8007c1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3310      	adds	r3, #16
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff fef2 	bl	80079f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3324      	adds	r3, #36	; 0x24
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff feed 	bl	80079f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 fe8b 	bl	8009934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c1e:	2301      	movs	r3, #1
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	e000ed04 	.word	0xe000ed04

08007c2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08e      	sub	sp, #56	; 0x38
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d10a      	bne.n	8007c56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10a      	bne.n	8007c72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c6e:	bf00      	nop
 8007c70:	e7fe      	b.n	8007c70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <xQueueGenericCreateStatic+0x52>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <xQueueGenericCreateStatic+0x56>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <xQueueGenericCreateStatic+0x58>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	623b      	str	r3, [r7, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <xQueueGenericCreateStatic+0x7e>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xQueueGenericCreateStatic+0x82>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueGenericCreateStatic+0x84>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	61fb      	str	r3, [r7, #28]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cca:	2348      	movs	r3, #72	; 0x48
 8007ccc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2b48      	cmp	r3, #72	; 0x48
 8007cd2:	d00a      	beq.n	8007cea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	61bb      	str	r3, [r7, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007cea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4613      	mov	r3, r2
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f83f 	bl	8007d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3730      	adds	r7, #48	; 0x30
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	4613      	mov	r3, r2
 8007d28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	613b      	str	r3, [r7, #16]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	3348      	adds	r3, #72	; 0x48
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fedf 	bl	8009b18 <pvPortMalloc>
 8007d5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d011      	beq.n	8007d86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	3348      	adds	r3, #72	; 0x48
 8007d6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d74:	79fa      	ldrb	r2, [r7, #7]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 f805 	bl	8007d90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d86:	69bb      	ldr	r3, [r7, #24]
	}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	e002      	b.n	8007db2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	69b8      	ldr	r0, [r7, #24]
 8007dc2:	f7ff fecb 	bl	8007b5c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	; 0x38
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007dde:	2300      	movs	r3, #0
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10a      	bne.n	8007e02 <xQueueGenericSend+0x32>
	__asm volatile
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfe:	bf00      	nop
 8007e00:	e7fe      	b.n	8007e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <xQueueGenericSend+0x40>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueGenericSend+0x44>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueGenericSend+0x46>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueGenericSend+0x60>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d103      	bne.n	8007e3e <xQueueGenericSend+0x6e>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <xQueueGenericSend+0x72>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e000      	b.n	8007e44 <xQueueGenericSend+0x74>
 8007e42:	2300      	movs	r3, #0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xQueueGenericSend+0x8e>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	623b      	str	r3, [r7, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e5e:	f001 f9e7 	bl	8009230 <xTaskGetSchedulerState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <xQueueGenericSend+0x9e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <xQueueGenericSend+0xa2>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e000      	b.n	8007e74 <xQueueGenericSend+0xa4>
 8007e72:	2300      	movs	r3, #0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xQueueGenericSend+0xbe>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	f383 8811 	msr	BASEPRI, r3
 8007e80:	f3bf 8f6f 	isb	sy
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	61fb      	str	r3, [r7, #28]
}
 8007e8a:	bf00      	nop
 8007e8c:	e7fe      	b.n	8007e8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e8e:	f001 fd21 	bl	80098d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d302      	bcc.n	8007ea4 <xQueueGenericSend+0xd4>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d129      	bne.n	8007ef8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eaa:	f000 fac1 	bl	8008430 <prvCopyDataToQueue>
 8007eae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d010      	beq.n	8007eda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	3324      	adds	r3, #36	; 0x24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fff7 	bl	8008eb0 <xTaskRemoveFromEventList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d013      	beq.n	8007ef0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ec8:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <xQueueGenericSend+0x1f8>)
 8007eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	e00a      	b.n	8007ef0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ee0:	4b39      	ldr	r3, [pc, #228]	; (8007fc8 <xQueueGenericSend+0x1f8>)
 8007ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ef0:	f001 fd20 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e063      	b.n	8007fc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007efe:	f001 fd19 	bl	8009934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e05c      	b.n	8007fc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f0c:	f107 0314 	add.w	r3, r7, #20
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f82f 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f16:	2301      	movs	r3, #1
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f1a:	f001 fd0b 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f1e:	f000 fddf 	bl	8008ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f22:	f001 fcd7 	bl	80098d4 <vPortEnterCritical>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f2c:	b25b      	sxtb	r3, r3
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d103      	bne.n	8007f3c <xQueueGenericSend+0x16c>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f42:	b25b      	sxtb	r3, r3
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f48:	d103      	bne.n	8007f52 <xQueueGenericSend+0x182>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f52:	f001 fcef 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f56:	1d3a      	adds	r2, r7, #4
 8007f58:	f107 0314 	add.w	r3, r7, #20
 8007f5c:	4611      	mov	r1, r2
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 f81e 	bl	8008fa0 <xTaskCheckForTimeOut>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d124      	bne.n	8007fb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6c:	f000 fb58 	bl	8008620 <prvIsQueueFull>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d018      	beq.n	8007fa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f78:	3310      	adds	r3, #16
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 ff72 	bl	8008e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f86:	f000 fae3 	bl	8008550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f8a:	f000 fdb7 	bl	8008afc <xTaskResumeAll>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f47f af7c 	bne.w	8007e8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f96:	4b0c      	ldr	r3, [pc, #48]	; (8007fc8 <xQueueGenericSend+0x1f8>)
 8007f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	e772      	b.n	8007e8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007faa:	f000 fad1 	bl	8008550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fae:	f000 fda5 	bl	8008afc <xTaskResumeAll>
 8007fb2:	e76c      	b.n	8007e8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fb6:	f000 facb 	bl	8008550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fba:	f000 fd9f 	bl	8008afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3738      	adds	r7, #56	; 0x38
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	e000ed04 	.word	0xe000ed04

08007fcc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08e      	sub	sp, #56	; 0x38
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10a      	bne.n	8007ff6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	623b      	str	r3, [r7, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	61fb      	str	r3, [r7, #28]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <xQueueGiveFromISR+0x58>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <xQueueGiveFromISR+0x5c>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xQueueGiveFromISR+0x5e>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10a      	bne.n	8008044 <xQueueGiveFromISR+0x78>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	61bb      	str	r3, [r7, #24]
}
 8008040:	bf00      	nop
 8008042:	e7fe      	b.n	8008042 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008044:	f001 fd28 	bl	8009a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008048:	f3ef 8211 	mrs	r2, BASEPRI
 800804c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	617a      	str	r2, [r7, #20]
 800805e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008060:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008062:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008070:	429a      	cmp	r2, r3
 8008072:	d22b      	bcs.n	80080cc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800807a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d112      	bne.n	80080b6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	2b00      	cmp	r3, #0
 8008096:	d016      	beq.n	80080c6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	3324      	adds	r3, #36	; 0x24
 800809c:	4618      	mov	r0, r3
 800809e:	f000 ff07 	bl	8008eb0 <xTaskRemoveFromEventList>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00e      	beq.n	80080c6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2201      	movs	r2, #1
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e007      	b.n	80080c6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	b25a      	sxtb	r2, r3
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080c6:	2301      	movs	r3, #1
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
 80080ca:	e001      	b.n	80080d0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	637b      	str	r3, [r7, #52]	; 0x34
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80080da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3738      	adds	r7, #56	; 0x38
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08e      	sub	sp, #56	; 0x38
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10a      	bne.n	800811a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	623b      	str	r3, [r7, #32]
}
 8008116:	bf00      	nop
 8008118:	e7fe      	b.n	8008118 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	61fb      	str	r3, [r7, #28]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008138:	f001 f87a 	bl	8009230 <xTaskGetSchedulerState>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <xQueueSemaphoreTake+0x60>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <xQueueSemaphoreTake+0x64>
 8008148:	2301      	movs	r3, #1
 800814a:	e000      	b.n	800814e <xQueueSemaphoreTake+0x66>
 800814c:	2300      	movs	r3, #0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	61bb      	str	r3, [r7, #24]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008168:	f001 fbb4 	bl	80098d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d024      	beq.n	80081c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	1e5a      	subs	r2, r3, #1
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008188:	f001 f9fa 	bl	8009580 <pvTaskIncrementMutexHeldCount>
 800818c:	4602      	mov	r2, r0
 800818e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008190:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	3310      	adds	r3, #16
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 fe86 	bl	8008eb0 <xTaskRemoveFromEventList>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081aa:	4b54      	ldr	r3, [pc, #336]	; (80082fc <xQueueSemaphoreTake+0x214>)
 80081ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081ba:	f001 fbbb 	bl	8009934 <vPortExitCritical>
				return pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	e097      	b.n	80082f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d111      	bne.n	80081ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	617b      	str	r3, [r7, #20]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081e4:	f001 fba6 	bl	8009934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081e8:	2300      	movs	r3, #0
 80081ea:	e082      	b.n	80082f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081f2:	f107 030c 	add.w	r3, r7, #12
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 febc 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008200:	f001 fb98 	bl	8009934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008204:	f000 fc6c 	bl	8008ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008208:	f001 fb64 	bl	80098d4 <vPortEnterCritical>
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008212:	b25b      	sxtb	r3, r3
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d103      	bne.n	8008222 <xQueueSemaphoreTake+0x13a>
 800821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008228:	b25b      	sxtb	r3, r3
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	d103      	bne.n	8008238 <xQueueSemaphoreTake+0x150>
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008238:	f001 fb7c 	bl	8009934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800823c:	463a      	mov	r2, r7
 800823e:	f107 030c 	add.w	r3, r7, #12
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f000 feab 	bl	8008fa0 <xTaskCheckForTimeOut>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d132      	bne.n	80082b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008252:	f000 f9cf 	bl	80085f4 <prvIsQueueEmpty>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d026      	beq.n	80082aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008264:	f001 fb36 	bl	80098d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fffd 	bl	800926c <xTaskPriorityInherit>
 8008272:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008274:	f001 fb5e 	bl	8009934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	3324      	adds	r3, #36	; 0x24
 800827c:	683a      	ldr	r2, [r7, #0]
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fdf1 	bl	8008e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008288:	f000 f962 	bl	8008550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800828c:	f000 fc36 	bl	8008afc <xTaskResumeAll>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f47f af68 	bne.w	8008168 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008298:	4b18      	ldr	r3, [pc, #96]	; (80082fc <xQueueSemaphoreTake+0x214>)
 800829a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	e75e      	b.n	8008168 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80082aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ac:	f000 f950 	bl	8008550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082b0:	f000 fc24 	bl	8008afc <xTaskResumeAll>
 80082b4:	e758      	b.n	8008168 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80082b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082b8:	f000 f94a 	bl	8008550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082bc:	f000 fc1e 	bl	8008afc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082c2:	f000 f997 	bl	80085f4 <prvIsQueueEmpty>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f43f af4d 	beq.w	8008168 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80082d4:	f001 fafe 	bl	80098d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082da:	f000 f891 	bl	8008400 <prvGetDisinheritPriorityAfterTimeout>
 80082de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f001 f8bc 	bl	8009464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082ec:	f001 fb22 	bl	8009934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3738      	adds	r7, #56	; 0x38
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08e      	sub	sp, #56	; 0x38
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10a      	bne.n	800832c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	623b      	str	r3, [r7, #32]
}
 8008328:	bf00      	nop
 800832a:	e7fe      	b.n	800832a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <xQueueReceiveFromISR+0x3a>
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <xQueueReceiveFromISR+0x3e>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <xQueueReceiveFromISR+0x40>
 800833e:	2300      	movs	r3, #0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	61fb      	str	r3, [r7, #28]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800835a:	f001 fb9d 	bl	8009a98 <vPortValidateInterruptPriority>
	__asm volatile
 800835e:	f3ef 8211 	mrs	r2, BASEPRI
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	61ba      	str	r2, [r7, #24]
 8008374:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008376:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02f      	beq.n	80083e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800838c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008390:	68b9      	ldr	r1, [r7, #8]
 8008392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008394:	f000 f8b6 	bl	8008504 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	1e5a      	subs	r2, r3, #1
 800839c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80083a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d112      	bne.n	80083d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d016      	beq.n	80083e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	3310      	adds	r3, #16
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fd7a 	bl	8008eb0 <xTaskRemoveFromEventList>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	e007      	b.n	80083e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80083d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083d4:	3301      	adds	r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	b25a      	sxtb	r2, r3
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80083e0:	2301      	movs	r3, #1
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34
 80083e4:	e001      	b.n	80083ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80083e6:	2300      	movs	r3, #0
 80083e8:	637b      	str	r3, [r7, #52]	; 0x34
 80083ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f383 8811 	msr	BASEPRI, r3
}
 80083f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3738      	adds	r7, #56	; 0x38
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d006      	beq.n	800841e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f1c3 0307 	rsb	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	e001      	b.n	8008422 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008422:	68fb      	ldr	r3, [r7, #12]
	}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10d      	bne.n	800846a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d14d      	bne.n	80084f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 ff7c 	bl	8009358 <xTaskPriorityDisinherit>
 8008460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	609a      	str	r2, [r3, #8]
 8008468:	e043      	b.n	80084f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d119      	bne.n	80084a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6858      	ldr	r0, [r3, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	461a      	mov	r2, r3
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	f001 fdf4 	bl	800a068 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	441a      	add	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	429a      	cmp	r2, r3
 8008498:	d32b      	bcc.n	80084f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	e026      	b.n	80084f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	68d8      	ldr	r0, [r3, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	461a      	mov	r2, r3
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	f001 fdda 	bl	800a068 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	425b      	negs	r3, r3
 80084be:	441a      	add	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d207      	bcs.n	80084e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	425b      	negs	r3, r3
 80084da:	441a      	add	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d105      	bne.n	80084f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80084fa:	697b      	ldr	r3, [r7, #20]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d018      	beq.n	8008548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	441a      	add	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	429a      	cmp	r2, r3
 800852e:	d303      	bcc.n	8008538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68d9      	ldr	r1, [r3, #12]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	461a      	mov	r2, r3
 8008542:	6838      	ldr	r0, [r7, #0]
 8008544:	f001 fd90 	bl	800a068 <memcpy>
	}
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008558:	f001 f9bc 	bl	80098d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008564:	e011      	b.n	800858a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	d012      	beq.n	8008594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3324      	adds	r3, #36	; 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fc9c 	bl	8008eb0 <xTaskRemoveFromEventList>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d001      	beq.n	8008582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800857e:	f000 fd71 	bl	8009064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	3b01      	subs	r3, #1
 8008586:	b2db      	uxtb	r3, r3
 8008588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800858a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	dce9      	bgt.n	8008566 <prvUnlockQueue+0x16>
 8008592:	e000      	b.n	8008596 <prvUnlockQueue+0x46>
					break;
 8008594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	22ff      	movs	r2, #255	; 0xff
 800859a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800859e:	f001 f9c9 	bl	8009934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085a2:	f001 f997 	bl	80098d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085ae:	e011      	b.n	80085d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3310      	adds	r3, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fc77 	bl	8008eb0 <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80085c8:	f000 fd4c 	bl	8009064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dce9      	bgt.n	80085b0 <prvUnlockQueue+0x60>
 80085dc:	e000      	b.n	80085e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80085de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	22ff      	movs	r2, #255	; 0xff
 80085e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80085e8:	f001 f9a4 	bl	8009934 <vPortExitCritical>
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085fc:	f001 f96a 	bl	80098d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	e001      	b.n	8008612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008612:	f001 f98f 	bl	8009934 <vPortExitCritical>

	return xReturn;
 8008616:	68fb      	ldr	r3, [r7, #12]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008628:	f001 f954 	bl	80098d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008634:	429a      	cmp	r2, r3
 8008636:	d102      	bne.n	800863e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e001      	b.n	8008642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008642:	f001 f977 	bl	8009934 <vPortExitCritical>

	return xReturn;
 8008646:	68fb      	ldr	r3, [r7, #12]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008650:	b580      	push	{r7, lr}
 8008652:	b08e      	sub	sp, #56	; 0x38
 8008654:	af04      	add	r7, sp, #16
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	623b      	str	r3, [r7, #32]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xTaskCreateStatic+0x46>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	61fb      	str	r3, [r7, #28]
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008696:	23a0      	movs	r3, #160	; 0xa0
 8008698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2ba0      	cmp	r3, #160	; 0xa0
 800869e:	d00a      	beq.n	80086b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	61bb      	str	r3, [r7, #24]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d01e      	beq.n	80086fc <xTaskCreateStatic+0xac>
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01b      	beq.n	80086fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086d6:	2300      	movs	r3, #0
 80086d8:	9303      	str	r3, [sp, #12]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	9302      	str	r3, [sp, #8]
 80086de:	f107 0314 	add.w	r3, r7, #20
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f850 	bl	8008794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086f6:	f000 f8eb 	bl	80088d0 <prvAddNewTaskToReadyList>
 80086fa:	e001      	b.n	8008700 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008700:	697b      	ldr	r3, [r7, #20]
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3728      	adds	r7, #40	; 0x28
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800870a:	b580      	push	{r7, lr}
 800870c:	b08c      	sub	sp, #48	; 0x30
 800870e:	af04      	add	r7, sp, #16
 8008710:	60f8      	str	r0, [r7, #12]
 8008712:	60b9      	str	r1, [r7, #8]
 8008714:	603b      	str	r3, [r7, #0]
 8008716:	4613      	mov	r3, r2
 8008718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4618      	mov	r0, r3
 8008720:	f001 f9fa 	bl	8009b18 <pvPortMalloc>
 8008724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00e      	beq.n	800874a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800872c:	20a0      	movs	r0, #160	; 0xa0
 800872e:	f001 f9f3 	bl	8009b18 <pvPortMalloc>
 8008732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	631a      	str	r2, [r3, #48]	; 0x30
 8008740:	e005      	b.n	800874e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008742:	6978      	ldr	r0, [r7, #20]
 8008744:	f001 fab4 	bl	8009cb0 <vPortFree>
 8008748:	e001      	b.n	800874e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d017      	beq.n	8008784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800875c:	88fa      	ldrh	r2, [r7, #6]
 800875e:	2300      	movs	r3, #0
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	9302      	str	r3, [sp, #8]
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	9301      	str	r3, [sp, #4]
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 f80e 	bl	8008794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008778:	69f8      	ldr	r0, [r7, #28]
 800877a:	f000 f8a9 	bl	80088d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800877e:	2301      	movs	r3, #1
 8008780:	61bb      	str	r3, [r7, #24]
 8008782:	e002      	b.n	800878a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008784:	f04f 33ff 	mov.w	r3, #4294967295
 8008788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800878a:	69bb      	ldr	r3, [r7, #24]
	}
 800878c:	4618      	mov	r0, r3
 800878e:	3720      	adds	r7, #32
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087ac:	3b01      	subs	r3, #1
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80087c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	617b      	str	r3, [r7, #20]
}
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01f      	beq.n	8008822 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e012      	b.n	800880e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	7819      	ldrb	r1, [r3, #0]
 80087f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	3334      	adds	r3, #52	; 0x34
 80087f8:	460a      	mov	r2, r1
 80087fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	4413      	add	r3, r2
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d006      	beq.n	8008816 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	3301      	adds	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	2b0f      	cmp	r3, #15
 8008812:	d9e9      	bls.n	80087e8 <prvInitialiseNewTask+0x54>
 8008814:	e000      	b.n	8008818 <prvInitialiseNewTask+0x84>
			{
				break;
 8008816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008820:	e003      	b.n	800882a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	2b06      	cmp	r3, #6
 800882e:	d901      	bls.n	8008834 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008830:	2306      	movs	r3, #6
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800883e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	2200      	movs	r2, #0
 8008844:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	3304      	adds	r3, #4
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff f8f2 	bl	8007a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	3318      	adds	r3, #24
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff f8ed 	bl	8007a34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800885e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008862:	f1c3 0207 	rsb	r2, r3, #7
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	334c      	adds	r3, #76	; 0x4c
 8008884:	224c      	movs	r2, #76	; 0x4c
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fb63 	bl	8009f54 <memset>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	4a0c      	ldr	r2, [pc, #48]	; (80088c4 <prvInitialiseNewTask+0x130>)
 8008892:	651a      	str	r2, [r3, #80]	; 0x50
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <prvInitialiseNewTask+0x134>)
 8008898:	655a      	str	r2, [r3, #84]	; 0x54
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	4a0b      	ldr	r2, [pc, #44]	; (80088cc <prvInitialiseNewTask+0x138>)
 800889e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	69b8      	ldr	r0, [r7, #24]
 80088a6:	f000 fee5 	bl	8009674 <pxPortInitialiseStack>
 80088aa:	4602      	mov	r2, r0
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088bc:	bf00      	nop
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20001728 	.word	0x20001728
 80088c8:	20001790 	.word	0x20001790
 80088cc:	200017f8 	.word	0x200017f8

080088d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088d8:	f000 fffc 	bl	80098d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a29      	ldr	r2, [pc, #164]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088e6:	4b29      	ldr	r3, [pc, #164]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088ee:	4a27      	ldr	r2, [pc, #156]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088f4:	4b24      	ldr	r3, [pc, #144]	; (8008988 <prvAddNewTaskToReadyList+0xb8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d110      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088fc:	f000 fbd6 	bl	80090ac <prvInitialiseTaskLists>
 8008900:	e00d      	b.n	800891e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008902:	4b23      	ldr	r3, [pc, #140]	; (8008990 <prvAddNewTaskToReadyList+0xc0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d109      	bne.n	800891e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	429a      	cmp	r2, r3
 8008916:	d802      	bhi.n	800891e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008918:	4a1c      	ldr	r2, [pc, #112]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800891e:	4b1d      	ldr	r3, [pc, #116]	; (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3301      	adds	r3, #1
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <prvAddNewTaskToReadyList+0xc4>)
 8008926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	2201      	movs	r2, #1
 800892e:	409a      	lsls	r2, r3
 8008930:	4b19      	ldr	r3, [pc, #100]	; (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4313      	orrs	r3, r2
 8008936:	4a18      	ldr	r2, [pc, #96]	; (8008998 <prvAddNewTaskToReadyList+0xc8>)
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a15      	ldr	r2, [pc, #84]	; (800899c <prvAddNewTaskToReadyList+0xcc>)
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f7ff f87c 	bl	8007a4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008956:	f000 ffed 	bl	8009934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800895a:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <prvAddNewTaskToReadyList+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00e      	beq.n	8008980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvAddNewTaskToReadyList+0xbc>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	429a      	cmp	r2, r3
 800896e:	d207      	bcs.n	8008980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008970:	4b0b      	ldr	r3, [pc, #44]	; (80089a0 <prvAddNewTaskToReadyList+0xd0>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000b1c 	.word	0x20000b1c
 800898c:	20000a1c 	.word	0x20000a1c
 8008990:	20000b28 	.word	0x20000b28
 8008994:	20000b38 	.word	0x20000b38
 8008998:	20000b24 	.word	0x20000b24
 800899c:	20000a20 	.word	0x20000a20
 80089a0:	e000ed04 	.word	0xe000ed04

080089a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d017      	beq.n	80089e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089b6:	4b13      	ldr	r3, [pc, #76]	; (8008a04 <vTaskDelay+0x60>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <vTaskDelay+0x30>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	60bb      	str	r3, [r7, #8]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089d4:	f000 f884 	bl	8008ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089d8:	2100      	movs	r1, #0
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fde4 	bl	80095a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089e0:	f000 f88c 	bl	8008afc <xTaskResumeAll>
 80089e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089ec:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <vTaskDelay+0x64>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089fc:	bf00      	nop
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20000b44 	.word	0x20000b44
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a1a:	463a      	mov	r2, r7
 8008a1c:	1d39      	adds	r1, r7, #4
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f8 f918 	bl	8000c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	9202      	str	r2, [sp, #8]
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	460a      	mov	r2, r1
 8008a3a:	4921      	ldr	r1, [pc, #132]	; (8008ac0 <vTaskStartScheduler+0xb4>)
 8008a3c:	4821      	ldr	r0, [pc, #132]	; (8008ac4 <vTaskStartScheduler+0xb8>)
 8008a3e:	f7ff fe07 	bl	8008650 <xTaskCreateStatic>
 8008a42:	4603      	mov	r3, r0
 8008a44:	4a20      	ldr	r2, [pc, #128]	; (8008ac8 <vTaskStartScheduler+0xbc>)
 8008a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a48:	4b1f      	ldr	r3, [pc, #124]	; (8008ac8 <vTaskStartScheduler+0xbc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a50:	2301      	movs	r3, #1
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e001      	b.n	8008a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11b      	bne.n	8008a98 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a74:	4b15      	ldr	r3, [pc, #84]	; (8008acc <vTaskStartScheduler+0xc0>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	334c      	adds	r3, #76	; 0x4c
 8008a7a:	4a15      	ldr	r2, [pc, #84]	; (8008ad0 <vTaskStartScheduler+0xc4>)
 8008a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <vTaskStartScheduler+0xc8>)
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <vTaskStartScheduler+0xcc>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a8c:	4b13      	ldr	r3, [pc, #76]	; (8008adc <vTaskStartScheduler+0xd0>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a92:	f000 fe7d 	bl	8009790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a96:	e00e      	b.n	8008ab6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9e:	d10a      	bne.n	8008ab6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	60fb      	str	r3, [r7, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <vTaskStartScheduler+0xa8>
}
 8008ab6:	bf00      	nop
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800a9dc 	.word	0x0800a9dc
 8008ac4:	0800907d 	.word	0x0800907d
 8008ac8:	20000b40 	.word	0x20000b40
 8008acc:	20000a1c 	.word	0x20000a1c
 8008ad0:	2000005c 	.word	0x2000005c
 8008ad4:	20000b3c 	.word	0x20000b3c
 8008ad8:	20000b28 	.word	0x20000b28
 8008adc:	20000b20 	.word	0x20000b20

08008ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <vTaskSuspendAll+0x18>)
 8008aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008aee:	bf00      	nop
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	20000b44 	.word	0x20000b44

08008afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b0a:	4b41      	ldr	r3, [pc, #260]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	603b      	str	r3, [r7, #0]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b28:	f000 fed4 	bl	80098d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b2c:	4b38      	ldr	r3, [pc, #224]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b36:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <xTaskResumeAll+0x114>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d161      	bne.n	8008c02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b3e:	4b35      	ldr	r3, [pc, #212]	; (8008c14 <xTaskResumeAll+0x118>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d05d      	beq.n	8008c02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b46:	e02e      	b.n	8008ba6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b48:	4b33      	ldr	r3, [pc, #204]	; (8008c18 <xTaskResumeAll+0x11c>)
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3318      	adds	r3, #24
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe ffd7 	bl	8007b08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe ffd2 	bl	8007b08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	2201      	movs	r2, #1
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	4b2b      	ldr	r3, [pc, #172]	; (8008c1c <xTaskResumeAll+0x120>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	4a2a      	ldr	r2, [pc, #168]	; (8008c1c <xTaskResumeAll+0x120>)
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4a27      	ldr	r2, [pc, #156]	; (8008c20 <xTaskResumeAll+0x124>)
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3304      	adds	r3, #4
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f7fe ff5e 	bl	8007a4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <xTaskResumeAll+0x128>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d302      	bcc.n	8008ba6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008ba0:	4b21      	ldr	r3, [pc, #132]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ba6:	4b1c      	ldr	r3, [pc, #112]	; (8008c18 <xTaskResumeAll+0x11c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1cc      	bne.n	8008b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bb4:	f000 fb1c 	bl	80091f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <xTaskResumeAll+0x130>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d010      	beq.n	8008be6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bc4:	f000 f836 	bl	8008c34 <xTaskIncrementTick>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bce:	4b16      	ldr	r3, [pc, #88]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f1      	bne.n	8008bc4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008be0:	4b12      	ldr	r3, [pc, #72]	; (8008c2c <xTaskResumeAll+0x130>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008be6:	4b10      	ldr	r3, [pc, #64]	; (8008c28 <xTaskResumeAll+0x12c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d009      	beq.n	8008c02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <xTaskResumeAll+0x134>)
 8008bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c02:	f000 fe97 	bl	8009934 <vPortExitCritical>

	return xAlreadyYielded;
 8008c06:	68bb      	ldr	r3, [r7, #8]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	20000b44 	.word	0x20000b44
 8008c14:	20000b1c 	.word	0x20000b1c
 8008c18:	20000adc 	.word	0x20000adc
 8008c1c:	20000b24 	.word	0x20000b24
 8008c20:	20000a20 	.word	0x20000a20
 8008c24:	20000a1c 	.word	0x20000a1c
 8008c28:	20000b30 	.word	0x20000b30
 8008c2c:	20000b2c 	.word	0x20000b2c
 8008c30:	e000ed04 	.word	0xe000ed04

08008c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c3e:	4b4e      	ldr	r3, [pc, #312]	; (8008d78 <xTaskIncrementTick+0x144>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 808e 	bne.w	8008d64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c48:	4b4c      	ldr	r3, [pc, #304]	; (8008d7c <xTaskIncrementTick+0x148>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c50:	4a4a      	ldr	r2, [pc, #296]	; (8008d7c <xTaskIncrementTick+0x148>)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d120      	bne.n	8008c9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c5c:	4b48      	ldr	r3, [pc, #288]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <xTaskIncrementTick+0x48>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	603b      	str	r3, [r7, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <xTaskIncrementTick+0x46>
 8008c7c:	4b40      	ldr	r3, [pc, #256]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	4b40      	ldr	r3, [pc, #256]	; (8008d84 <xTaskIncrementTick+0x150>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a3e      	ldr	r2, [pc, #248]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	4a3e      	ldr	r2, [pc, #248]	; (8008d84 <xTaskIncrementTick+0x150>)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	4b3d      	ldr	r3, [pc, #244]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	4a3c      	ldr	r2, [pc, #240]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	f000 faa9 	bl	80091f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c9e:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d348      	bcc.n	8008d3a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca8:	4b35      	ldr	r3, [pc, #212]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb2:	4b36      	ldr	r3, [pc, #216]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb8:	601a      	str	r2, [r3, #0]
					break;
 8008cba:	e03e      	b.n	8008d3a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cbc:	4b30      	ldr	r3, [pc, #192]	; (8008d80 <xTaskIncrementTick+0x14c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d203      	bcs.n	8008cdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cd4:	4a2d      	ldr	r2, [pc, #180]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cda:	e02e      	b.n	8008d3a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe ff11 	bl	8007b08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe ff08 	bl	8007b08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	409a      	lsls	r2, r3
 8008d00:	4b23      	ldr	r3, [pc, #140]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	4a22      	ldr	r2, [pc, #136]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	4613      	mov	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008d18:	441a      	add	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fe fe94 	bl	8007a4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2a:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d3b9      	bcc.n	8008ca8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d38:	e7b6      	b.n	8008ca8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d3a:	4b17      	ldr	r3, [pc, #92]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4914      	ldr	r1, [pc, #80]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d901      	bls.n	8008d56 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d52:	2301      	movs	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <xTaskIncrementTick+0x168>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d007      	beq.n	8008d6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	e004      	b.n	8008d6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d64:	4b0e      	ldr	r3, [pc, #56]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	4a0d      	ldr	r2, [pc, #52]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d6e:	697b      	ldr	r3, [r7, #20]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20000b44 	.word	0x20000b44
 8008d7c:	20000b20 	.word	0x20000b20
 8008d80:	20000ad4 	.word	0x20000ad4
 8008d84:	20000ad8 	.word	0x20000ad8
 8008d88:	20000b34 	.word	0x20000b34
 8008d8c:	20000b3c 	.word	0x20000b3c
 8008d90:	20000b24 	.word	0x20000b24
 8008d94:	20000a20 	.word	0x20000a20
 8008d98:	20000a1c 	.word	0x20000a1c
 8008d9c:	20000b30 	.word	0x20000b30
 8008da0:	20000b2c 	.word	0x20000b2c

08008da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008daa:	4b29      	ldr	r3, [pc, #164]	; (8008e50 <vTaskSwitchContext+0xac>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d003      	beq.n	8008dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008db2:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <vTaskSwitchContext+0xb0>)
 8008db4:	2201      	movs	r2, #1
 8008db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008db8:	e044      	b.n	8008e44 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008dba:	4b26      	ldr	r3, [pc, #152]	; (8008e54 <vTaskSwitchContext+0xb0>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc0:	4b25      	ldr	r3, [pc, #148]	; (8008e58 <vTaskSwitchContext+0xb4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	fab3 f383 	clz	r3, r3
 8008dcc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	f1c3 031f 	rsb	r3, r3, #31
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	4921      	ldr	r1, [pc, #132]	; (8008e5c <vTaskSwitchContext+0xb8>)
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	607b      	str	r3, [r7, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <vTaskSwitchContext+0x5a>
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a14      	ldr	r2, [pc, #80]	; (8008e5c <vTaskSwitchContext+0xb8>)
 8008e0c:	4413      	add	r3, r2
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	605a      	str	r2, [r3, #4]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3308      	adds	r3, #8
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d104      	bne.n	8008e30 <vTaskSwitchContext+0x8c>
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	605a      	str	r2, [r3, #4]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	4a0a      	ldr	r2, [pc, #40]	; (8008e60 <vTaskSwitchContext+0xbc>)
 8008e38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <vTaskSwitchContext+0xbc>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	334c      	adds	r3, #76	; 0x4c
 8008e40:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <vTaskSwitchContext+0xc0>)
 8008e42:	6013      	str	r3, [r2, #0]
}
 8008e44:	bf00      	nop
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	20000b44 	.word	0x20000b44
 8008e54:	20000b30 	.word	0x20000b30
 8008e58:	20000b24 	.word	0x20000b24
 8008e5c:	20000a20 	.word	0x20000a20
 8008e60:	20000a1c 	.word	0x20000a1c
 8008e64:	2000005c 	.word	0x2000005c

08008e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60fb      	str	r3, [r7, #12]
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e8e:	4b07      	ldr	r3, [pc, #28]	; (8008eac <vTaskPlaceOnEventList+0x44>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3318      	adds	r3, #24
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7fe fdfd 	bl	8007a96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6838      	ldr	r0, [r7, #0]
 8008ea0:	f000 fb82 	bl	80095a8 <prvAddCurrentTaskToDelayedList>
}
 8008ea4:	bf00      	nop
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20000a1c 	.word	0x20000a1c

08008eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60fb      	str	r3, [r7, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	3318      	adds	r3, #24
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe fe11 	bl	8007b08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee6:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <xTaskRemoveFromEventList+0xac>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11c      	bne.n	8008f28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe fe08 	bl	8007b08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	2201      	movs	r2, #1
 8008efe:	409a      	lsls	r2, r3
 8008f00:	4b17      	ldr	r3, [pc, #92]	; (8008f60 <xTaskRemoveFromEventList+0xb0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	4a16      	ldr	r2, [pc, #88]	; (8008f60 <xTaskRemoveFromEventList+0xb0>)
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <xTaskRemoveFromEventList+0xb4>)
 8008f18:	441a      	add	r2, r3
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4610      	mov	r0, r2
 8008f22:	f7fe fd94 	bl	8007a4e <vListInsertEnd>
 8008f26:	e005      	b.n	8008f34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	480e      	ldr	r0, [pc, #56]	; (8008f68 <xTaskRemoveFromEventList+0xb8>)
 8008f30:	f7fe fd8d 	bl	8007a4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <xTaskRemoveFromEventList+0xbc>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d905      	bls.n	8008f4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f42:	2301      	movs	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f46:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <xTaskRemoveFromEventList+0xc0>)
 8008f48:	2201      	movs	r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	e001      	b.n	8008f52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f52:	697b      	ldr	r3, [r7, #20]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000b44 	.word	0x20000b44
 8008f60:	20000b24 	.word	0x20000b24
 8008f64:	20000a20 	.word	0x20000a20
 8008f68:	20000adc 	.word	0x20000adc
 8008f6c:	20000a1c 	.word	0x20000a1c
 8008f70:	20000b30 	.word	0x20000b30

08008f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <vTaskInternalSetTimeOutState+0x24>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <vTaskInternalSetTimeOutState+0x28>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	605a      	str	r2, [r3, #4]
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	20000b34 	.word	0x20000b34
 8008f9c:	20000b20 	.word	0x20000b20

08008fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	60fb      	str	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fe2:	f000 fc77 	bl	80098d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	; (800905c <xTaskCheckForTimeOut+0xbc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d102      	bne.n	8009006 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e023      	b.n	800904e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <xTaskCheckForTimeOut+0xc0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d007      	beq.n	8009022 <xTaskCheckForTimeOut+0x82>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	429a      	cmp	r2, r3
 800901a:	d302      	bcc.n	8009022 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e015      	b.n	800904e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	429a      	cmp	r2, r3
 800902a:	d20b      	bcs.n	8009044 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	1ad2      	subs	r2, r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ff9b 	bl	8008f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e004      	b.n	800904e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800904e:	f000 fc71 	bl	8009934 <vPortExitCritical>

	return xReturn;
 8009052:	69fb      	ldr	r3, [r7, #28]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3720      	adds	r7, #32
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000b20 	.word	0x20000b20
 8009060:	20000b34 	.word	0x20000b34

08009064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009068:	4b03      	ldr	r3, [pc, #12]	; (8009078 <vTaskMissedYield+0x14>)
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
}
 800906e:	bf00      	nop
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000b30 	.word	0x20000b30

0800907c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009084:	f000 f852 	bl	800912c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <prvIdleTask+0x28>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d9f9      	bls.n	8009084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <prvIdleTask+0x2c>)
 8009092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090a0:	e7f0      	b.n	8009084 <prvIdleTask+0x8>
 80090a2:	bf00      	nop
 80090a4:	20000a20 	.word	0x20000a20
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	e00c      	b.n	80090d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a12      	ldr	r2, [pc, #72]	; (800910c <prvInitialiseTaskLists+0x60>)
 80090c4:	4413      	add	r3, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fc94 	bl	80079f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3301      	adds	r3, #1
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b06      	cmp	r3, #6
 80090d6:	d9ef      	bls.n	80090b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d8:	480d      	ldr	r0, [pc, #52]	; (8009110 <prvInitialiseTaskLists+0x64>)
 80090da:	f7fe fc8b 	bl	80079f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090de:	480d      	ldr	r0, [pc, #52]	; (8009114 <prvInitialiseTaskLists+0x68>)
 80090e0:	f7fe fc88 	bl	80079f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090e4:	480c      	ldr	r0, [pc, #48]	; (8009118 <prvInitialiseTaskLists+0x6c>)
 80090e6:	f7fe fc85 	bl	80079f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090ea:	480c      	ldr	r0, [pc, #48]	; (800911c <prvInitialiseTaskLists+0x70>)
 80090ec:	f7fe fc82 	bl	80079f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090f0:	480b      	ldr	r0, [pc, #44]	; (8009120 <prvInitialiseTaskLists+0x74>)
 80090f2:	f7fe fc7f 	bl	80079f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <prvInitialiseTaskLists+0x78>)
 80090f8:	4a05      	ldr	r2, [pc, #20]	; (8009110 <prvInitialiseTaskLists+0x64>)
 80090fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <prvInitialiseTaskLists+0x7c>)
 80090fe:	4a05      	ldr	r2, [pc, #20]	; (8009114 <prvInitialiseTaskLists+0x68>)
 8009100:	601a      	str	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000a20 	.word	0x20000a20
 8009110:	20000aac 	.word	0x20000aac
 8009114:	20000ac0 	.word	0x20000ac0
 8009118:	20000adc 	.word	0x20000adc
 800911c:	20000af0 	.word	0x20000af0
 8009120:	20000b08 	.word	0x20000b08
 8009124:	20000ad4 	.word	0x20000ad4
 8009128:	20000ad8 	.word	0x20000ad8

0800912c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009132:	e019      	b.n	8009168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009134:	f000 fbce 	bl	80098d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <prvCheckTasksWaitingTermination+0x50>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fcdf 	bl	8007b08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800914a:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <prvCheckTasksWaitingTermination+0x54>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <prvCheckTasksWaitingTermination+0x54>)
 8009152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009154:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3b01      	subs	r3, #1
 800915a:	4a0a      	ldr	r2, [pc, #40]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800915c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800915e:	f000 fbe9 	bl	8009934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f810 	bl	8009188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e1      	bne.n	8009134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000af0 	.word	0x20000af0
 8009180:	20000b1c 	.word	0x20000b1c
 8009184:	20000b04 	.word	0x20000b04

08009188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	334c      	adds	r3, #76	; 0x4c
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fee5 	bl	8009f64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d108      	bne.n	80091b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	4618      	mov	r0, r3
 80091aa:	f000 fd81 	bl	8009cb0 <vPortFree>
				vPortFree( pxTCB );
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fd7e 	bl	8009cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091b4:	e018      	b.n	80091e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d103      	bne.n	80091c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fd75 	bl	8009cb0 <vPortFree>
	}
 80091c6:	e00f      	b.n	80091e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d00a      	beq.n	80091e8 <prvDeleteTCB+0x60>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60fb      	str	r3, [r7, #12]
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <prvDeleteTCB+0x5e>
	}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <prvResetNextTaskUnblockTime+0x38>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d104      	bne.n	800920a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <prvResetNextTaskUnblockTime+0x3c>)
 8009202:	f04f 32ff 	mov.w	r2, #4294967295
 8009206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009208:	e008      	b.n	800921c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <prvResetNextTaskUnblockTime+0x38>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4a04      	ldr	r2, [pc, #16]	; (800922c <prvResetNextTaskUnblockTime+0x3c>)
 800921a:	6013      	str	r3, [r2, #0]
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	20000ad4 	.word	0x20000ad4
 800922c:	20000b3c 	.word	0x20000b3c

08009230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009236:	4b0b      	ldr	r3, [pc, #44]	; (8009264 <xTaskGetSchedulerState+0x34>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d102      	bne.n	8009244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800923e:	2301      	movs	r3, #1
 8009240:	607b      	str	r3, [r7, #4]
 8009242:	e008      	b.n	8009256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <xTaskGetSchedulerState+0x38>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800924c:	2302      	movs	r3, #2
 800924e:	607b      	str	r3, [r7, #4]
 8009250:	e001      	b.n	8009256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009256:	687b      	ldr	r3, [r7, #4]
	}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr
 8009264:	20000b28 	.word	0x20000b28
 8009268:	20000b44 	.word	0x20000b44

0800926c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d05e      	beq.n	8009340 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	4b31      	ldr	r3, [pc, #196]	; (800934c <xTaskPriorityInherit+0xe0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	429a      	cmp	r2, r3
 800928e:	d24e      	bcs.n	800932e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	2b00      	cmp	r3, #0
 8009296:	db06      	blt.n	80092a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009298:	4b2c      	ldr	r3, [pc, #176]	; (800934c <xTaskPriorityInherit+0xe0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929e:	f1c3 0207 	rsb	r2, r3, #7
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6959      	ldr	r1, [r3, #20]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4a26      	ldr	r2, [pc, #152]	; (8009350 <xTaskPriorityInherit+0xe4>)
 80092b8:	4413      	add	r3, r2
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d12f      	bne.n	800931e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fc20 	bl	8007b08 <uxListRemove>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	2201      	movs	r2, #1
 80092d4:	fa02 f303 	lsl.w	r3, r2, r3
 80092d8:	43da      	mvns	r2, r3
 80092da:	4b1e      	ldr	r3, [pc, #120]	; (8009354 <xTaskPriorityInherit+0xe8>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4013      	ands	r3, r2
 80092e0:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <xTaskPriorityInherit+0xe8>)
 80092e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092e4:	4b19      	ldr	r3, [pc, #100]	; (800934c <xTaskPriorityInherit+0xe0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f2:	2201      	movs	r2, #1
 80092f4:	409a      	lsls	r2, r3
 80092f6:	4b17      	ldr	r3, [pc, #92]	; (8009354 <xTaskPriorityInherit+0xe8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	4a15      	ldr	r2, [pc, #84]	; (8009354 <xTaskPriorityInherit+0xe8>)
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4a10      	ldr	r2, [pc, #64]	; (8009350 <xTaskPriorityInherit+0xe4>)
 800930e:	441a      	add	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7fe fb99 	bl	8007a4e <vListInsertEnd>
 800931c:	e004      	b.n	8009328 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931e:	4b0b      	ldr	r3, [pc, #44]	; (800934c <xTaskPriorityInherit+0xe0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009328:	2301      	movs	r3, #1
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e008      	b.n	8009340 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009332:	4b06      	ldr	r3, [pc, #24]	; (800934c <xTaskPriorityInherit+0xe0>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	429a      	cmp	r2, r3
 800933a:	d201      	bcs.n	8009340 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009340:	68fb      	ldr	r3, [r7, #12]
	}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000a1c 	.word	0x20000a1c
 8009350:	20000a20 	.word	0x20000a20
 8009354:	20000b24 	.word	0x20000b24

08009358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d06e      	beq.n	800944c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800936e:	4b3a      	ldr	r3, [pc, #232]	; (8009458 <xTaskPriorityDisinherit+0x100>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	429a      	cmp	r2, r3
 8009376:	d00a      	beq.n	800938e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937c:	f383 8811 	msr	BASEPRI, r3
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	60fb      	str	r3, [r7, #12]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10a      	bne.n	80093ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60bb      	str	r3, [r7, #8]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b0:	1e5a      	subs	r2, r3, #1
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	429a      	cmp	r2, r3
 80093c0:	d044      	beq.n	800944c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d140      	bne.n	800944c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fb9a 	bl	8007b08 <uxListRemove>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d115      	bne.n	8009406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093de:	491f      	ldr	r1, [pc, #124]	; (800945c <xTaskPriorityDisinherit+0x104>)
 80093e0:	4613      	mov	r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	4413      	add	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	440b      	add	r3, r1
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <xTaskPriorityDisinherit+0xae>
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	2201      	movs	r2, #1
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	43da      	mvns	r2, r3
 80093fc:	4b18      	ldr	r3, [pc, #96]	; (8009460 <xTaskPriorityDisinherit+0x108>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4013      	ands	r3, r2
 8009402:	4a17      	ldr	r2, [pc, #92]	; (8009460 <xTaskPriorityDisinherit+0x108>)
 8009404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	f1c3 0207 	rsb	r2, r3, #7
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941e:	2201      	movs	r2, #1
 8009420:	409a      	lsls	r2, r3
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <xTaskPriorityDisinherit+0x108>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4313      	orrs	r3, r2
 8009428:	4a0d      	ldr	r2, [pc, #52]	; (8009460 <xTaskPriorityDisinherit+0x108>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4a08      	ldr	r2, [pc, #32]	; (800945c <xTaskPriorityDisinherit+0x104>)
 800943a:	441a      	add	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe fb03 	bl	8007a4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800944c:	697b      	ldr	r3, [r7, #20]
	}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000a1c 	.word	0x20000a1c
 800945c:	20000a20 	.word	0x20000a20
 8009460:	20000b24 	.word	0x20000b24

08009464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009472:	2301      	movs	r3, #1
 8009474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d077      	beq.n	800956c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10a      	bne.n	800949a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	60fb      	str	r3, [r7, #12]
}
 8009496:	bf00      	nop
 8009498:	e7fe      	b.n	8009498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d902      	bls.n	80094aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	e002      	b.n	80094b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d058      	beq.n	800956c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d153      	bne.n	800956c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80094c4:	4b2b      	ldr	r3, [pc, #172]	; (8009574 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d10a      	bne.n	80094e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	60bb      	str	r3, [r7, #8]
}
 80094e0:	bf00      	nop
 80094e2:	e7fe      	b.n	80094e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	69fa      	ldr	r2, [r7, #28]
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	db04      	blt.n	8009502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	f1c3 0207 	rsb	r2, r3, #7
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	6959      	ldr	r1, [r3, #20]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4613      	mov	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4a19      	ldr	r2, [pc, #100]	; (8009578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009512:	4413      	add	r3, r2
 8009514:	4299      	cmp	r1, r3
 8009516:	d129      	bne.n	800956c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	3304      	adds	r3, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f7fe faf3 	bl	8007b08 <uxListRemove>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	2201      	movs	r2, #1
 800952e:	fa02 f303 	lsl.w	r3, r2, r3
 8009532:	43da      	mvns	r2, r3
 8009534:	4b11      	ldr	r3, [pc, #68]	; (800957c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4013      	ands	r3, r2
 800953a:	4a10      	ldr	r2, [pc, #64]	; (800957c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800953c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	2201      	movs	r2, #1
 8009544:	409a      	lsls	r2, r3
 8009546:	4b0d      	ldr	r3, [pc, #52]	; (800957c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4313      	orrs	r3, r2
 800954c:	4a0b      	ldr	r2, [pc, #44]	; (800957c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4a06      	ldr	r2, [pc, #24]	; (8009578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800955e:	441a      	add	r2, r3
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	3304      	adds	r3, #4
 8009564:	4619      	mov	r1, r3
 8009566:	4610      	mov	r0, r2
 8009568:	f7fe fa71 	bl	8007a4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800956c:	bf00      	nop
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000a1c 	.word	0x20000a1c
 8009578:	20000a20 	.word	0x20000a20
 800957c:	20000b24 	.word	0x20000b24

08009580 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009592:	3201      	adds	r2, #1
 8009594:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009596:	4b03      	ldr	r3, [pc, #12]	; (80095a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009598:	681b      	ldr	r3, [r3, #0]
	}
 800959a:	4618      	mov	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr
 80095a4:	20000a1c 	.word	0x20000a1c

080095a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095b2:	4b29      	ldr	r3, [pc, #164]	; (8009658 <prvAddCurrentTaskToDelayedList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095b8:	4b28      	ldr	r3, [pc, #160]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe faa2 	bl	8007b08 <uxListRemove>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10b      	bne.n	80095e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095ca:	4b24      	ldr	r3, [pc, #144]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	2201      	movs	r2, #1
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	43da      	mvns	r2, r3
 80095d8:	4b21      	ldr	r3, [pc, #132]	; (8009660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4013      	ands	r3, r2
 80095de:	4a20      	ldr	r2, [pc, #128]	; (8009660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e8:	d10a      	bne.n	8009600 <prvAddCurrentTaskToDelayedList+0x58>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f0:	4b1a      	ldr	r3, [pc, #104]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4619      	mov	r1, r3
 80095f8:	481a      	ldr	r0, [pc, #104]	; (8009664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095fa:	f7fe fa28 	bl	8007a4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095fe:	e026      	b.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4413      	add	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009608:	4b14      	ldr	r3, [pc, #80]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	429a      	cmp	r2, r3
 8009616:	d209      	bcs.n	800962c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009618:	4b13      	ldr	r3, [pc, #76]	; (8009668 <prvAddCurrentTaskToDelayedList+0xc0>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f7fe fa36 	bl	8007a96 <vListInsert>
}
 800962a:	e010      	b.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800962c:	4b0f      	ldr	r3, [pc, #60]	; (800966c <prvAddCurrentTaskToDelayedList+0xc4>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b0a      	ldr	r3, [pc, #40]	; (800965c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3304      	adds	r3, #4
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7fe fa2c 	bl	8007a96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	429a      	cmp	r2, r3
 8009646:	d202      	bcs.n	800964e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009648:	4a09      	ldr	r2, [pc, #36]	; (8009670 <prvAddCurrentTaskToDelayedList+0xc8>)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6013      	str	r3, [r2, #0]
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20000b20 	.word	0x20000b20
 800965c:	20000a1c 	.word	0x20000a1c
 8009660:	20000b24 	.word	0x20000b24
 8009664:	20000b08 	.word	0x20000b08
 8009668:	20000ad8 	.word	0x20000ad8
 800966c:	20000ad4 	.word	0x20000ad4
 8009670:	20000b3c 	.word	0x20000b3c

08009674 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3b04      	subs	r3, #4
 8009684:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800968c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f023 0201 	bic.w	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b04      	subs	r3, #4
 80096a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096a4:	4a0c      	ldr	r2, [pc, #48]	; (80096d8 <pxPortInitialiseStack+0x64>)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3b14      	subs	r3, #20
 80096ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f06f 0202 	mvn.w	r2, #2
 80096c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3b20      	subs	r3, #32
 80096c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096ca:	68fb      	ldr	r3, [r7, #12]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	080096dd 	.word	0x080096dd

080096dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096e6:	4b12      	ldr	r3, [pc, #72]	; (8009730 <prvTaskExitError+0x54>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ee:	d00a      	beq.n	8009706 <prvTaskExitError+0x2a>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <prvTaskExitError+0x28>
	__asm volatile
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	60bb      	str	r3, [r7, #8]
}
 8009718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800971a:	bf00      	nop
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0fc      	beq.n	800971c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	2000000c 	.word	0x2000000c
	...

08009740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009740:	4b07      	ldr	r3, [pc, #28]	; (8009760 <pxCurrentTCBConst2>)
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	6808      	ldr	r0, [r1, #0]
 8009746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	f380 8809 	msr	PSP, r0
 800974e:	f3bf 8f6f 	isb	sy
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8811 	msr	BASEPRI, r0
 800975a:	4770      	bx	lr
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst2>:
 8009760:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009768:	4808      	ldr	r0, [pc, #32]	; (800978c <prvPortStartFirstTask+0x24>)
 800976a:	6800      	ldr	r0, [r0, #0]
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f380 8808 	msr	MSP, r0
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8814 	msr	CONTROL, r0
 800977a:	b662      	cpsie	i
 800977c:	b661      	cpsie	f
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	df00      	svc	0
 8009788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800978a:	bf00      	nop
 800978c:	e000ed08 	.word	0xe000ed08

08009790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009796:	4b46      	ldr	r3, [pc, #280]	; (80098b0 <xPortStartScheduler+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a46      	ldr	r2, [pc, #280]	; (80098b4 <xPortStartScheduler+0x124>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d10a      	bne.n	80097b6 <xPortStartScheduler+0x26>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097b6:	4b3e      	ldr	r3, [pc, #248]	; (80098b0 <xPortStartScheduler+0x120>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a3f      	ldr	r2, [pc, #252]	; (80098b8 <xPortStartScheduler+0x128>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d10a      	bne.n	80097d6 <xPortStartScheduler+0x46>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097d6:	4b39      	ldr	r3, [pc, #228]	; (80098bc <xPortStartScheduler+0x12c>)
 80097d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	22ff      	movs	r2, #255	; 0xff
 80097e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	4b31      	ldr	r3, [pc, #196]	; (80098c0 <xPortStartScheduler+0x130>)
 80097fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097fe:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <xPortStartScheduler+0x134>)
 8009800:	2207      	movs	r2, #7
 8009802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009804:	e009      	b.n	800981a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009806:	4b2f      	ldr	r3, [pc, #188]	; (80098c4 <xPortStartScheduler+0x134>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3b01      	subs	r3, #1
 800980c:	4a2d      	ldr	r2, [pc, #180]	; (80098c4 <xPortStartScheduler+0x134>)
 800980e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d0ef      	beq.n	8009806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009826:	4b27      	ldr	r3, [pc, #156]	; (80098c4 <xPortStartScheduler+0x134>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f1c3 0307 	rsb	r3, r3, #7
 800982e:	2b04      	cmp	r3, #4
 8009830:	d00a      	beq.n	8009848 <xPortStartScheduler+0xb8>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	60bb      	str	r3, [r7, #8]
}
 8009844:	bf00      	nop
 8009846:	e7fe      	b.n	8009846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009848:	4b1e      	ldr	r3, [pc, #120]	; (80098c4 <xPortStartScheduler+0x134>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	4a1d      	ldr	r2, [pc, #116]	; (80098c4 <xPortStartScheduler+0x134>)
 8009850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <xPortStartScheduler+0x134>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800985a:	4a1a      	ldr	r2, [pc, #104]	; (80098c4 <xPortStartScheduler+0x134>)
 800985c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	b2da      	uxtb	r2, r3
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009866:	4b18      	ldr	r3, [pc, #96]	; (80098c8 <xPortStartScheduler+0x138>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a17      	ldr	r2, [pc, #92]	; (80098c8 <xPortStartScheduler+0x138>)
 800986c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009872:	4b15      	ldr	r3, [pc, #84]	; (80098c8 <xPortStartScheduler+0x138>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <xPortStartScheduler+0x138>)
 8009878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800987c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800987e:	f000 f8dd 	bl	8009a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009882:	4b12      	ldr	r3, [pc, #72]	; (80098cc <xPortStartScheduler+0x13c>)
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009888:	f000 f8fc 	bl	8009a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800988c:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <xPortStartScheduler+0x140>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a0f      	ldr	r2, [pc, #60]	; (80098d0 <xPortStartScheduler+0x140>)
 8009892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009898:	f7ff ff66 	bl	8009768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800989c:	f7ff fa82 	bl	8008da4 <vTaskSwitchContext>
	prvTaskExitError();
 80098a0:	f7ff ff1c 	bl	80096dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	e000ed00 	.word	0xe000ed00
 80098b4:	410fc271 	.word	0x410fc271
 80098b8:	410fc270 	.word	0x410fc270
 80098bc:	e000e400 	.word	0xe000e400
 80098c0:	20000b48 	.word	0x20000b48
 80098c4:	20000b4c 	.word	0x20000b4c
 80098c8:	e000ed20 	.word	0xe000ed20
 80098cc:	2000000c 	.word	0x2000000c
 80098d0:	e000ef34 	.word	0xe000ef34

080098d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	607b      	str	r3, [r7, #4]
}
 80098ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <vPortEnterCritical+0x58>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a0d      	ldr	r2, [pc, #52]	; (800992c <vPortEnterCritical+0x58>)
 80098f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098f8:	4b0c      	ldr	r3, [pc, #48]	; (800992c <vPortEnterCritical+0x58>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d10f      	bne.n	8009920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009900:	4b0b      	ldr	r3, [pc, #44]	; (8009930 <vPortEnterCritical+0x5c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <vPortEnterCritical+0x4c>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	603b      	str	r3, [r7, #0]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <vPortEnterCritical+0x4a>
	}
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	2000000c 	.word	0x2000000c
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <vPortExitCritical+0x50>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <vPortExitCritical+0x24>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	f383 8811 	msr	BASEPRI, r3
 800994a:	f3bf 8f6f 	isb	sy
 800994e:	f3bf 8f4f 	dsb	sy
 8009952:	607b      	str	r3, [r7, #4]
}
 8009954:	bf00      	nop
 8009956:	e7fe      	b.n	8009956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009958:	4b0a      	ldr	r3, [pc, #40]	; (8009984 <vPortExitCritical+0x50>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3b01      	subs	r3, #1
 800995e:	4a09      	ldr	r2, [pc, #36]	; (8009984 <vPortExitCritical+0x50>)
 8009960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009962:	4b08      	ldr	r3, [pc, #32]	; (8009984 <vPortExitCritical+0x50>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <vPortExitCritical+0x42>
 800996a:	2300      	movs	r3, #0
 800996c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	f383 8811 	msr	BASEPRI, r3
}
 8009974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	2000000c 	.word	0x2000000c
	...

08009990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009990:	f3ef 8009 	mrs	r0, PSP
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <pxCurrentTCBConst>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	f01e 0f10 	tst.w	lr, #16
 80099a0:	bf08      	it	eq
 80099a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099aa:	6010      	str	r0, [r2, #0]
 80099ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80099b4:	f380 8811 	msr	BASEPRI, r0
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f7ff f9f0 	bl	8008da4 <vTaskSwitchContext>
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f380 8811 	msr	BASEPRI, r0
 80099cc:	bc09      	pop	{r0, r3}
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	6808      	ldr	r0, [r1, #0]
 80099d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d6:	f01e 0f10 	tst.w	lr, #16
 80099da:	bf08      	it	eq
 80099dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099e0:	f380 8809 	msr	PSP, r0
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	f3af 8000 	nop.w

080099f0 <pxCurrentTCBConst>:
 80099f0:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099f4:	bf00      	nop
 80099f6:	bf00      	nop

080099f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	607b      	str	r3, [r7, #4]
}
 8009a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a12:	f7ff f90f 	bl	8008c34 <xTaskIncrementTick>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d003      	beq.n	8009a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a1c:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <SysTick_Handler+0x40>)
 8009a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f383 8811 	msr	BASEPRI, r3
}
 8009a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a46:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <vPortSetupTimerInterrupt+0x38>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a4c:	4b0a      	ldr	r3, [pc, #40]	; (8009a78 <vPortSetupTimerInterrupt+0x3c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <vPortSetupTimerInterrupt+0x40>)
 8009a52:	fba2 2303 	umull	r2, r3, r2, r3
 8009a56:	099b      	lsrs	r3, r3, #6
 8009a58:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <vPortSetupTimerInterrupt+0x44>)
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <vPortSetupTimerInterrupt+0x34>)
 8009a60:	2207      	movs	r2, #7
 8009a62:	601a      	str	r2, [r3, #0]
}
 8009a64:	bf00      	nop
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	e000e010 	.word	0xe000e010
 8009a74:	e000e018 	.word	0xe000e018
 8009a78:	20000000 	.word	0x20000000
 8009a7c:	10624dd3 	.word	0x10624dd3
 8009a80:	e000e014 	.word	0xe000e014

08009a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a94 <vPortEnableVFP+0x10>
 8009a88:	6801      	ldr	r1, [r0, #0]
 8009a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a8e:	6001      	str	r1, [r0, #0]
 8009a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a92:	bf00      	nop
 8009a94:	e000ed88 	.word	0xe000ed88

08009a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a9e:	f3ef 8305 	mrs	r3, IPSR
 8009aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b0f      	cmp	r3, #15
 8009aa8:	d914      	bls.n	8009ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009aaa:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <vPortValidateInterruptPriority+0x70>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ab4:	4b15      	ldr	r3, [pc, #84]	; (8009b0c <vPortValidateInterruptPriority+0x74>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	7afa      	ldrb	r2, [r7, #11]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d20a      	bcs.n	8009ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	607b      	str	r3, [r7, #4]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ad4:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <vPortValidateInterruptPriority+0x78>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <vPortValidateInterruptPriority+0x7c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d90a      	bls.n	8009afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	603b      	str	r3, [r7, #0]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <vPortValidateInterruptPriority+0x60>
	}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	e000e3f0 	.word	0xe000e3f0
 8009b0c:	20000b48 	.word	0x20000b48
 8009b10:	e000ed0c 	.word	0xe000ed0c
 8009b14:	20000b4c 	.word	0x20000b4c

08009b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	; 0x28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b24:	f7fe ffdc 	bl	8008ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b28:	4b5b      	ldr	r3, [pc, #364]	; (8009c98 <pvPortMalloc+0x180>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b30:	f000 f920 	bl	8009d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b34:	4b59      	ldr	r3, [pc, #356]	; (8009c9c <pvPortMalloc+0x184>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 8093 	bne.w	8009c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d01d      	beq.n	8009b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009b48:	2208      	movs	r2, #8
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f003 0307 	and.w	r3, r3, #7
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d014      	beq.n	8009b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f023 0307 	bic.w	r3, r3, #7
 8009b60:	3308      	adds	r3, #8
 8009b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <pvPortMalloc+0x6c>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	617b      	str	r3, [r7, #20]
}
 8009b80:	bf00      	nop
 8009b82:	e7fe      	b.n	8009b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d06e      	beq.n	8009c68 <pvPortMalloc+0x150>
 8009b8a:	4b45      	ldr	r3, [pc, #276]	; (8009ca0 <pvPortMalloc+0x188>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d869      	bhi.n	8009c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b94:	4b43      	ldr	r3, [pc, #268]	; (8009ca4 <pvPortMalloc+0x18c>)
 8009b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b98:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <pvPortMalloc+0x18c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b9e:	e004      	b.n	8009baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d903      	bls.n	8009bbc <pvPortMalloc+0xa4>
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1f1      	bne.n	8009ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <pvPortMalloc+0x180>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d050      	beq.n	8009c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2208      	movs	r2, #8
 8009bcc:	4413      	add	r3, r2
 8009bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	2308      	movs	r3, #8
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d91f      	bls.n	8009c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <pvPortMalloc+0xf8>
	__asm volatile
 8009bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	613b      	str	r3, [r7, #16]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	685a      	ldr	r2, [r3, #4]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	1ad2      	subs	r2, r2, r3
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c22:	69b8      	ldr	r0, [r7, #24]
 8009c24:	f000 f908 	bl	8009e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c36:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ca8 <pvPortMalloc+0x190>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d203      	bcs.n	8009c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c42:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <pvPortMalloc+0x188>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <pvPortMalloc+0x190>)
 8009c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <pvPortMalloc+0x184>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c5e:	4b13      	ldr	r3, [pc, #76]	; (8009cac <pvPortMalloc+0x194>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	4a11      	ldr	r2, [pc, #68]	; (8009cac <pvPortMalloc+0x194>)
 8009c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c68:	f7fe ff48 	bl	8008afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <pvPortMalloc+0x174>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	60fb      	str	r3, [r7, #12]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <pvPortMalloc+0x172>
	return pvReturn;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3728      	adds	r7, #40	; 0x28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20001710 	.word	0x20001710
 8009c9c:	20001724 	.word	0x20001724
 8009ca0:	20001714 	.word	0x20001714
 8009ca4:	20001708 	.word	0x20001708
 8009ca8:	20001718 	.word	0x20001718
 8009cac:	2000171c 	.word	0x2000171c

08009cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d04d      	beq.n	8009d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	4413      	add	r3, r2
 8009cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	4b24      	ldr	r3, [pc, #144]	; (8009d68 <vPortFree+0xb8>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10a      	bne.n	8009cf4 <vPortFree+0x44>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	60fb      	str	r3, [r7, #12]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <vPortFree+0x62>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60bb      	str	r3, [r7, #8]
}
 8009d0e:	bf00      	nop
 8009d10:	e7fe      	b.n	8009d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	4b14      	ldr	r3, [pc, #80]	; (8009d68 <vPortFree+0xb8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01e      	beq.n	8009d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11a      	bne.n	8009d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <vPortFree+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	43db      	mvns	r3, r3
 8009d32:	401a      	ands	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d38:	f7fe fed2 	bl	8008ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <vPortFree+0xbc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4413      	add	r3, r2
 8009d46:	4a09      	ldr	r2, [pc, #36]	; (8009d6c <vPortFree+0xbc>)
 8009d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f000 f874 	bl	8009e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d50:	4b07      	ldr	r3, [pc, #28]	; (8009d70 <vPortFree+0xc0>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a06      	ldr	r2, [pc, #24]	; (8009d70 <vPortFree+0xc0>)
 8009d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d5a:	f7fe fecf 	bl	8008afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d5e:	bf00      	nop
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20001724 	.word	0x20001724
 8009d6c:	20001714 	.word	0x20001714
 8009d70:	20001720 	.word	0x20001720

08009d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d80:	4b27      	ldr	r3, [pc, #156]	; (8009e20 <prvHeapInit+0xac>)
 8009d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	3307      	adds	r3, #7
 8009d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0307 	bic.w	r3, r3, #7
 8009d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	4a1f      	ldr	r2, [pc, #124]	; (8009e20 <prvHeapInit+0xac>)
 8009da4:	4413      	add	r3, r2
 8009da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009dac:	4a1d      	ldr	r2, [pc, #116]	; (8009e24 <prvHeapInit+0xb0>)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009db2:	4b1c      	ldr	r3, [pc, #112]	; (8009e24 <prvHeapInit+0xb0>)
 8009db4:	2200      	movs	r2, #0
 8009db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0307 	bic.w	r3, r3, #7
 8009dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009dd6:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <prvHeapInit+0xb4>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <prvHeapInit+0xb4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009df4:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <prvHeapInit+0xb4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <prvHeapInit+0xb8>)
 8009e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <prvHeapInit+0xbc>)
 8009e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <prvHeapInit+0xc0>)
 8009e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	20000b50 	.word	0x20000b50
 8009e24:	20001708 	.word	0x20001708
 8009e28:	20001710 	.word	0x20001710
 8009e2c:	20001718 	.word	0x20001718
 8009e30:	20001714 	.word	0x20001714
 8009e34:	20001724 	.word	0x20001724

08009e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e40:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <prvInsertBlockIntoFreeList+0xac>)
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e002      	b.n	8009e4c <prvInsertBlockIntoFreeList+0x14>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d8f7      	bhi.n	8009e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4413      	add	r3, r2
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d108      	bne.n	8009e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	441a      	add	r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	441a      	add	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d118      	bne.n	8009ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d00d      	beq.n	8009eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	441a      	add	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e008      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009eb6:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e003      	b.n	8009ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d002      	beq.n	8009ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20001708 	.word	0x20001708
 8009ee8:	20001710 	.word	0x20001710

08009eec <sniprintf>:
 8009eec:	b40c      	push	{r2, r3}
 8009eee:	b530      	push	{r4, r5, lr}
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <sniprintf+0x64>)
 8009ef2:	1e0c      	subs	r4, r1, #0
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	b09d      	sub	sp, #116	; 0x74
 8009ef8:	da08      	bge.n	8009f0c <sniprintf+0x20>
 8009efa:	238b      	movs	r3, #139	; 0x8b
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	f04f 30ff 	mov.w	r0, #4294967295
 8009f02:	b01d      	add	sp, #116	; 0x74
 8009f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f08:	b002      	add	sp, #8
 8009f0a:	4770      	bx	lr
 8009f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009f14:	bf14      	ite	ne
 8009f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009f1a:	4623      	moveq	r3, r4
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f24:	9002      	str	r0, [sp, #8]
 8009f26:	9006      	str	r0, [sp, #24]
 8009f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f2e:	ab21      	add	r3, sp, #132	; 0x84
 8009f30:	a902      	add	r1, sp, #8
 8009f32:	4628      	mov	r0, r5
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f000 f9f7 	bl	800a328 <_svfiprintf_r>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	bfbc      	itt	lt
 8009f3e:	238b      	movlt	r3, #139	; 0x8b
 8009f40:	602b      	strlt	r3, [r5, #0]
 8009f42:	2c00      	cmp	r4, #0
 8009f44:	d0dd      	beq.n	8009f02 <sniprintf+0x16>
 8009f46:	9b02      	ldr	r3, [sp, #8]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
 8009f4c:	e7d9      	b.n	8009f02 <sniprintf+0x16>
 8009f4e:	bf00      	nop
 8009f50:	2000005c 	.word	0x2000005c

08009f54 <memset>:
 8009f54:	4402      	add	r2, r0
 8009f56:	4603      	mov	r3, r0
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d100      	bne.n	8009f5e <memset+0xa>
 8009f5c:	4770      	bx	lr
 8009f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f62:	e7f9      	b.n	8009f58 <memset+0x4>

08009f64 <_reclaim_reent>:
 8009f64:	4b29      	ldr	r3, [pc, #164]	; (800a00c <_reclaim_reent+0xa8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4283      	cmp	r3, r0
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	d04b      	beq.n	800a008 <_reclaim_reent+0xa4>
 8009f70:	69c3      	ldr	r3, [r0, #28]
 8009f72:	b143      	cbz	r3, 8009f86 <_reclaim_reent+0x22>
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d144      	bne.n	800a004 <_reclaim_reent+0xa0>
 8009f7a:	69e3      	ldr	r3, [r4, #28]
 8009f7c:	6819      	ldr	r1, [r3, #0]
 8009f7e:	b111      	cbz	r1, 8009f86 <_reclaim_reent+0x22>
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 f87f 	bl	800a084 <_free_r>
 8009f86:	6961      	ldr	r1, [r4, #20]
 8009f88:	b111      	cbz	r1, 8009f90 <_reclaim_reent+0x2c>
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f87a 	bl	800a084 <_free_r>
 8009f90:	69e1      	ldr	r1, [r4, #28]
 8009f92:	b111      	cbz	r1, 8009f9a <_reclaim_reent+0x36>
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f875 	bl	800a084 <_free_r>
 8009f9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009f9c:	b111      	cbz	r1, 8009fa4 <_reclaim_reent+0x40>
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 f870 	bl	800a084 <_free_r>
 8009fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa6:	b111      	cbz	r1, 8009fae <_reclaim_reent+0x4a>
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 f86b 	bl	800a084 <_free_r>
 8009fae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009fb0:	b111      	cbz	r1, 8009fb8 <_reclaim_reent+0x54>
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 f866 	bl	800a084 <_free_r>
 8009fb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fba:	b111      	cbz	r1, 8009fc2 <_reclaim_reent+0x5e>
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 f861 	bl	800a084 <_free_r>
 8009fc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009fc4:	b111      	cbz	r1, 8009fcc <_reclaim_reent+0x68>
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	f000 f85c 	bl	800a084 <_free_r>
 8009fcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009fce:	b111      	cbz	r1, 8009fd6 <_reclaim_reent+0x72>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 f857 	bl	800a084 <_free_r>
 8009fd6:	6a23      	ldr	r3, [r4, #32]
 8009fd8:	b1b3      	cbz	r3, 800a008 <_reclaim_reent+0xa4>
 8009fda:	4620      	mov	r0, r4
 8009fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fe0:	4718      	bx	r3
 8009fe2:	5949      	ldr	r1, [r1, r5]
 8009fe4:	b941      	cbnz	r1, 8009ff8 <_reclaim_reent+0x94>
 8009fe6:	3504      	adds	r5, #4
 8009fe8:	69e3      	ldr	r3, [r4, #28]
 8009fea:	2d80      	cmp	r5, #128	; 0x80
 8009fec:	68d9      	ldr	r1, [r3, #12]
 8009fee:	d1f8      	bne.n	8009fe2 <_reclaim_reent+0x7e>
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 f847 	bl	800a084 <_free_r>
 8009ff6:	e7c0      	b.n	8009f7a <_reclaim_reent+0x16>
 8009ff8:	680e      	ldr	r6, [r1, #0]
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 f842 	bl	800a084 <_free_r>
 800a000:	4631      	mov	r1, r6
 800a002:	e7ef      	b.n	8009fe4 <_reclaim_reent+0x80>
 800a004:	2500      	movs	r5, #0
 800a006:	e7ef      	b.n	8009fe8 <_reclaim_reent+0x84>
 800a008:	bd70      	pop	{r4, r5, r6, pc}
 800a00a:	bf00      	nop
 800a00c:	2000005c 	.word	0x2000005c

0800a010 <__errno>:
 800a010:	4b01      	ldr	r3, [pc, #4]	; (800a018 <__errno+0x8>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	2000005c 	.word	0x2000005c

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4d0d      	ldr	r5, [pc, #52]	; (800a054 <__libc_init_array+0x38>)
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a022:	1b64      	subs	r4, r4, r5
 800a024:	10a4      	asrs	r4, r4, #2
 800a026:	2600      	movs	r6, #0
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	4d0b      	ldr	r5, [pc, #44]	; (800a05c <__libc_init_array+0x40>)
 800a02e:	4c0c      	ldr	r4, [pc, #48]	; (800a060 <__libc_init_array+0x44>)
 800a030:	f000 fc6a 	bl	800a908 <_init>
 800a034:	1b64      	subs	r4, r4, r5
 800a036:	10a4      	asrs	r4, r4, #2
 800a038:	2600      	movs	r6, #0
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f855 3b04 	ldr.w	r3, [r5], #4
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800aa90 	.word	0x0800aa90
 800a058:	0800aa90 	.word	0x0800aa90
 800a05c:	0800aa90 	.word	0x0800aa90
 800a060:	0800aa94 	.word	0x0800aa94

0800a064 <__retarget_lock_acquire_recursive>:
 800a064:	4770      	bx	lr

0800a066 <__retarget_lock_release_recursive>:
 800a066:	4770      	bx	lr

0800a068 <memcpy>:
 800a068:	440a      	add	r2, r1
 800a06a:	4291      	cmp	r1, r2
 800a06c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a070:	d100      	bne.n	800a074 <memcpy+0xc>
 800a072:	4770      	bx	lr
 800a074:	b510      	push	{r4, lr}
 800a076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07e:	4291      	cmp	r1, r2
 800a080:	d1f9      	bne.n	800a076 <memcpy+0xe>
 800a082:	bd10      	pop	{r4, pc}

0800a084 <_free_r>:
 800a084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a086:	2900      	cmp	r1, #0
 800a088:	d044      	beq.n	800a114 <_free_r+0x90>
 800a08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a08e:	9001      	str	r0, [sp, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f1a1 0404 	sub.w	r4, r1, #4
 800a096:	bfb8      	it	lt
 800a098:	18e4      	addlt	r4, r4, r3
 800a09a:	f000 f8df 	bl	800a25c <__malloc_lock>
 800a09e:	4a1e      	ldr	r2, [pc, #120]	; (800a118 <_free_r+0x94>)
 800a0a0:	9801      	ldr	r0, [sp, #4]
 800a0a2:	6813      	ldr	r3, [r2, #0]
 800a0a4:	b933      	cbnz	r3, 800a0b4 <_free_r+0x30>
 800a0a6:	6063      	str	r3, [r4, #4]
 800a0a8:	6014      	str	r4, [r2, #0]
 800a0aa:	b003      	add	sp, #12
 800a0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0b0:	f000 b8da 	b.w	800a268 <__malloc_unlock>
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	d908      	bls.n	800a0ca <_free_r+0x46>
 800a0b8:	6825      	ldr	r5, [r4, #0]
 800a0ba:	1961      	adds	r1, r4, r5
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	bf01      	itttt	eq
 800a0c0:	6819      	ldreq	r1, [r3, #0]
 800a0c2:	685b      	ldreq	r3, [r3, #4]
 800a0c4:	1949      	addeq	r1, r1, r5
 800a0c6:	6021      	streq	r1, [r4, #0]
 800a0c8:	e7ed      	b.n	800a0a6 <_free_r+0x22>
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	b10b      	cbz	r3, 800a0d4 <_free_r+0x50>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d9fa      	bls.n	800a0ca <_free_r+0x46>
 800a0d4:	6811      	ldr	r1, [r2, #0]
 800a0d6:	1855      	adds	r5, r2, r1
 800a0d8:	42a5      	cmp	r5, r4
 800a0da:	d10b      	bne.n	800a0f4 <_free_r+0x70>
 800a0dc:	6824      	ldr	r4, [r4, #0]
 800a0de:	4421      	add	r1, r4
 800a0e0:	1854      	adds	r4, r2, r1
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	6011      	str	r1, [r2, #0]
 800a0e6:	d1e0      	bne.n	800a0aa <_free_r+0x26>
 800a0e8:	681c      	ldr	r4, [r3, #0]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	6053      	str	r3, [r2, #4]
 800a0ee:	440c      	add	r4, r1
 800a0f0:	6014      	str	r4, [r2, #0]
 800a0f2:	e7da      	b.n	800a0aa <_free_r+0x26>
 800a0f4:	d902      	bls.n	800a0fc <_free_r+0x78>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	e7d6      	b.n	800a0aa <_free_r+0x26>
 800a0fc:	6825      	ldr	r5, [r4, #0]
 800a0fe:	1961      	adds	r1, r4, r5
 800a100:	428b      	cmp	r3, r1
 800a102:	bf04      	itt	eq
 800a104:	6819      	ldreq	r1, [r3, #0]
 800a106:	685b      	ldreq	r3, [r3, #4]
 800a108:	6063      	str	r3, [r4, #4]
 800a10a:	bf04      	itt	eq
 800a10c:	1949      	addeq	r1, r1, r5
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	6054      	str	r4, [r2, #4]
 800a112:	e7ca      	b.n	800a0aa <_free_r+0x26>
 800a114:	b003      	add	sp, #12
 800a116:	bd30      	pop	{r4, r5, pc}
 800a118:	20001868 	.word	0x20001868

0800a11c <sbrk_aligned>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	4e0e      	ldr	r6, [pc, #56]	; (800a158 <sbrk_aligned+0x3c>)
 800a120:	460c      	mov	r4, r1
 800a122:	6831      	ldr	r1, [r6, #0]
 800a124:	4605      	mov	r5, r0
 800a126:	b911      	cbnz	r1, 800a12e <sbrk_aligned+0x12>
 800a128:	f000 fba6 	bl	800a878 <_sbrk_r>
 800a12c:	6030      	str	r0, [r6, #0]
 800a12e:	4621      	mov	r1, r4
 800a130:	4628      	mov	r0, r5
 800a132:	f000 fba1 	bl	800a878 <_sbrk_r>
 800a136:	1c43      	adds	r3, r0, #1
 800a138:	d00a      	beq.n	800a150 <sbrk_aligned+0x34>
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	f024 0403 	bic.w	r4, r4, #3
 800a140:	42a0      	cmp	r0, r4
 800a142:	d007      	beq.n	800a154 <sbrk_aligned+0x38>
 800a144:	1a21      	subs	r1, r4, r0
 800a146:	4628      	mov	r0, r5
 800a148:	f000 fb96 	bl	800a878 <_sbrk_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d101      	bne.n	800a154 <sbrk_aligned+0x38>
 800a150:	f04f 34ff 	mov.w	r4, #4294967295
 800a154:	4620      	mov	r0, r4
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	2000186c 	.word	0x2000186c

0800a15c <_malloc_r>:
 800a15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a160:	1ccd      	adds	r5, r1, #3
 800a162:	f025 0503 	bic.w	r5, r5, #3
 800a166:	3508      	adds	r5, #8
 800a168:	2d0c      	cmp	r5, #12
 800a16a:	bf38      	it	cc
 800a16c:	250c      	movcc	r5, #12
 800a16e:	2d00      	cmp	r5, #0
 800a170:	4607      	mov	r7, r0
 800a172:	db01      	blt.n	800a178 <_malloc_r+0x1c>
 800a174:	42a9      	cmp	r1, r5
 800a176:	d905      	bls.n	800a184 <_malloc_r+0x28>
 800a178:	230c      	movs	r3, #12
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	2600      	movs	r6, #0
 800a17e:	4630      	mov	r0, r6
 800a180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a258 <_malloc_r+0xfc>
 800a188:	f000 f868 	bl	800a25c <__malloc_lock>
 800a18c:	f8d8 3000 	ldr.w	r3, [r8]
 800a190:	461c      	mov	r4, r3
 800a192:	bb5c      	cbnz	r4, 800a1ec <_malloc_r+0x90>
 800a194:	4629      	mov	r1, r5
 800a196:	4638      	mov	r0, r7
 800a198:	f7ff ffc0 	bl	800a11c <sbrk_aligned>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	4604      	mov	r4, r0
 800a1a0:	d155      	bne.n	800a24e <_malloc_r+0xf2>
 800a1a2:	f8d8 4000 	ldr.w	r4, [r8]
 800a1a6:	4626      	mov	r6, r4
 800a1a8:	2e00      	cmp	r6, #0
 800a1aa:	d145      	bne.n	800a238 <_malloc_r+0xdc>
 800a1ac:	2c00      	cmp	r4, #0
 800a1ae:	d048      	beq.n	800a242 <_malloc_r+0xe6>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	eb04 0903 	add.w	r9, r4, r3
 800a1ba:	f000 fb5d 	bl	800a878 <_sbrk_r>
 800a1be:	4581      	cmp	r9, r0
 800a1c0:	d13f      	bne.n	800a242 <_malloc_r+0xe6>
 800a1c2:	6821      	ldr	r1, [r4, #0]
 800a1c4:	1a6d      	subs	r5, r5, r1
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff ffa7 	bl	800a11c <sbrk_aligned>
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d037      	beq.n	800a242 <_malloc_r+0xe6>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	442b      	add	r3, r5
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d038      	beq.n	800a252 <_malloc_r+0xf6>
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	42a2      	cmp	r2, r4
 800a1e4:	d12b      	bne.n	800a23e <_malloc_r+0xe2>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	605a      	str	r2, [r3, #4]
 800a1ea:	e00f      	b.n	800a20c <_malloc_r+0xb0>
 800a1ec:	6822      	ldr	r2, [r4, #0]
 800a1ee:	1b52      	subs	r2, r2, r5
 800a1f0:	d41f      	bmi.n	800a232 <_malloc_r+0xd6>
 800a1f2:	2a0b      	cmp	r2, #11
 800a1f4:	d917      	bls.n	800a226 <_malloc_r+0xca>
 800a1f6:	1961      	adds	r1, r4, r5
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	6025      	str	r5, [r4, #0]
 800a1fc:	bf18      	it	ne
 800a1fe:	6059      	strne	r1, [r3, #4]
 800a200:	6863      	ldr	r3, [r4, #4]
 800a202:	bf08      	it	eq
 800a204:	f8c8 1000 	streq.w	r1, [r8]
 800a208:	5162      	str	r2, [r4, r5]
 800a20a:	604b      	str	r3, [r1, #4]
 800a20c:	4638      	mov	r0, r7
 800a20e:	f104 060b 	add.w	r6, r4, #11
 800a212:	f000 f829 	bl	800a268 <__malloc_unlock>
 800a216:	f026 0607 	bic.w	r6, r6, #7
 800a21a:	1d23      	adds	r3, r4, #4
 800a21c:	1af2      	subs	r2, r6, r3
 800a21e:	d0ae      	beq.n	800a17e <_malloc_r+0x22>
 800a220:	1b9b      	subs	r3, r3, r6
 800a222:	50a3      	str	r3, [r4, r2]
 800a224:	e7ab      	b.n	800a17e <_malloc_r+0x22>
 800a226:	42a3      	cmp	r3, r4
 800a228:	6862      	ldr	r2, [r4, #4]
 800a22a:	d1dd      	bne.n	800a1e8 <_malloc_r+0x8c>
 800a22c:	f8c8 2000 	str.w	r2, [r8]
 800a230:	e7ec      	b.n	800a20c <_malloc_r+0xb0>
 800a232:	4623      	mov	r3, r4
 800a234:	6864      	ldr	r4, [r4, #4]
 800a236:	e7ac      	b.n	800a192 <_malloc_r+0x36>
 800a238:	4634      	mov	r4, r6
 800a23a:	6876      	ldr	r6, [r6, #4]
 800a23c:	e7b4      	b.n	800a1a8 <_malloc_r+0x4c>
 800a23e:	4613      	mov	r3, r2
 800a240:	e7cc      	b.n	800a1dc <_malloc_r+0x80>
 800a242:	230c      	movs	r3, #12
 800a244:	603b      	str	r3, [r7, #0]
 800a246:	4638      	mov	r0, r7
 800a248:	f000 f80e 	bl	800a268 <__malloc_unlock>
 800a24c:	e797      	b.n	800a17e <_malloc_r+0x22>
 800a24e:	6025      	str	r5, [r4, #0]
 800a250:	e7dc      	b.n	800a20c <_malloc_r+0xb0>
 800a252:	605b      	str	r3, [r3, #4]
 800a254:	deff      	udf	#255	; 0xff
 800a256:	bf00      	nop
 800a258:	20001868 	.word	0x20001868

0800a25c <__malloc_lock>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__malloc_lock+0x8>)
 800a25e:	f7ff bf01 	b.w	800a064 <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	20001864 	.word	0x20001864

0800a268 <__malloc_unlock>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__malloc_unlock+0x8>)
 800a26a:	f7ff befc 	b.w	800a066 <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	20001864 	.word	0x20001864

0800a274 <__ssputs_r>:
 800a274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a278:	688e      	ldr	r6, [r1, #8]
 800a27a:	461f      	mov	r7, r3
 800a27c:	42be      	cmp	r6, r7
 800a27e:	680b      	ldr	r3, [r1, #0]
 800a280:	4682      	mov	sl, r0
 800a282:	460c      	mov	r4, r1
 800a284:	4690      	mov	r8, r2
 800a286:	d82c      	bhi.n	800a2e2 <__ssputs_r+0x6e>
 800a288:	898a      	ldrh	r2, [r1, #12]
 800a28a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a28e:	d026      	beq.n	800a2de <__ssputs_r+0x6a>
 800a290:	6965      	ldr	r5, [r4, #20]
 800a292:	6909      	ldr	r1, [r1, #16]
 800a294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a298:	eba3 0901 	sub.w	r9, r3, r1
 800a29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2a0:	1c7b      	adds	r3, r7, #1
 800a2a2:	444b      	add	r3, r9
 800a2a4:	106d      	asrs	r5, r5, #1
 800a2a6:	429d      	cmp	r5, r3
 800a2a8:	bf38      	it	cc
 800a2aa:	461d      	movcc	r5, r3
 800a2ac:	0553      	lsls	r3, r2, #21
 800a2ae:	d527      	bpl.n	800a300 <__ssputs_r+0x8c>
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7ff ff53 	bl	800a15c <_malloc_r>
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	b360      	cbz	r0, 800a314 <__ssputs_r+0xa0>
 800a2ba:	6921      	ldr	r1, [r4, #16]
 800a2bc:	464a      	mov	r2, r9
 800a2be:	f7ff fed3 	bl	800a068 <memcpy>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	6126      	str	r6, [r4, #16]
 800a2d0:	6165      	str	r5, [r4, #20]
 800a2d2:	444e      	add	r6, r9
 800a2d4:	eba5 0509 	sub.w	r5, r5, r9
 800a2d8:	6026      	str	r6, [r4, #0]
 800a2da:	60a5      	str	r5, [r4, #8]
 800a2dc:	463e      	mov	r6, r7
 800a2de:	42be      	cmp	r6, r7
 800a2e0:	d900      	bls.n	800a2e4 <__ssputs_r+0x70>
 800a2e2:	463e      	mov	r6, r7
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	4632      	mov	r2, r6
 800a2e8:	4641      	mov	r1, r8
 800a2ea:	f000 faab 	bl	800a844 <memmove>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	1b9b      	subs	r3, r3, r6
 800a2f2:	60a3      	str	r3, [r4, #8]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	4433      	add	r3, r6
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	462a      	mov	r2, r5
 800a302:	f000 fac9 	bl	800a898 <_realloc_r>
 800a306:	4606      	mov	r6, r0
 800a308:	2800      	cmp	r0, #0
 800a30a:	d1e0      	bne.n	800a2ce <__ssputs_r+0x5a>
 800a30c:	6921      	ldr	r1, [r4, #16]
 800a30e:	4650      	mov	r0, sl
 800a310:	f7ff feb8 	bl	800a084 <_free_r>
 800a314:	230c      	movs	r3, #12
 800a316:	f8ca 3000 	str.w	r3, [sl]
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a320:	81a3      	strh	r3, [r4, #12]
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	e7e9      	b.n	800a2fc <__ssputs_r+0x88>

0800a328 <_svfiprintf_r>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4698      	mov	r8, r3
 800a32e:	898b      	ldrh	r3, [r1, #12]
 800a330:	061b      	lsls	r3, r3, #24
 800a332:	b09d      	sub	sp, #116	; 0x74
 800a334:	4607      	mov	r7, r0
 800a336:	460d      	mov	r5, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	d50e      	bpl.n	800a35a <_svfiprintf_r+0x32>
 800a33c:	690b      	ldr	r3, [r1, #16]
 800a33e:	b963      	cbnz	r3, 800a35a <_svfiprintf_r+0x32>
 800a340:	2140      	movs	r1, #64	; 0x40
 800a342:	f7ff ff0b 	bl	800a15c <_malloc_r>
 800a346:	6028      	str	r0, [r5, #0]
 800a348:	6128      	str	r0, [r5, #16]
 800a34a:	b920      	cbnz	r0, 800a356 <_svfiprintf_r+0x2e>
 800a34c:	230c      	movs	r3, #12
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	e0d0      	b.n	800a4f8 <_svfiprintf_r+0x1d0>
 800a356:	2340      	movs	r3, #64	; 0x40
 800a358:	616b      	str	r3, [r5, #20]
 800a35a:	2300      	movs	r3, #0
 800a35c:	9309      	str	r3, [sp, #36]	; 0x24
 800a35e:	2320      	movs	r3, #32
 800a360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a364:	f8cd 800c 	str.w	r8, [sp, #12]
 800a368:	2330      	movs	r3, #48	; 0x30
 800a36a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a510 <_svfiprintf_r+0x1e8>
 800a36e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a372:	f04f 0901 	mov.w	r9, #1
 800a376:	4623      	mov	r3, r4
 800a378:	469a      	mov	sl, r3
 800a37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a37e:	b10a      	cbz	r2, 800a384 <_svfiprintf_r+0x5c>
 800a380:	2a25      	cmp	r2, #37	; 0x25
 800a382:	d1f9      	bne.n	800a378 <_svfiprintf_r+0x50>
 800a384:	ebba 0b04 	subs.w	fp, sl, r4
 800a388:	d00b      	beq.n	800a3a2 <_svfiprintf_r+0x7a>
 800a38a:	465b      	mov	r3, fp
 800a38c:	4622      	mov	r2, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	4638      	mov	r0, r7
 800a392:	f7ff ff6f 	bl	800a274 <__ssputs_r>
 800a396:	3001      	adds	r0, #1
 800a398:	f000 80a9 	beq.w	800a4ee <_svfiprintf_r+0x1c6>
 800a39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39e:	445a      	add	r2, fp
 800a3a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f000 80a1 	beq.w	800a4ee <_svfiprintf_r+0x1c6>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3b6:	f10a 0a01 	add.w	sl, sl, #1
 800a3ba:	9304      	str	r3, [sp, #16]
 800a3bc:	9307      	str	r3, [sp, #28]
 800a3be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a3c4:	4654      	mov	r4, sl
 800a3c6:	2205      	movs	r2, #5
 800a3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3cc:	4850      	ldr	r0, [pc, #320]	; (800a510 <_svfiprintf_r+0x1e8>)
 800a3ce:	f7f5 ff17 	bl	8000200 <memchr>
 800a3d2:	9a04      	ldr	r2, [sp, #16]
 800a3d4:	b9d8      	cbnz	r0, 800a40e <_svfiprintf_r+0xe6>
 800a3d6:	06d0      	lsls	r0, r2, #27
 800a3d8:	bf44      	itt	mi
 800a3da:	2320      	movmi	r3, #32
 800a3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3e0:	0711      	lsls	r1, r2, #28
 800a3e2:	bf44      	itt	mi
 800a3e4:	232b      	movmi	r3, #43	; 0x2b
 800a3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a3f0:	d015      	beq.n	800a41e <_svfiprintf_r+0xf6>
 800a3f2:	9a07      	ldr	r2, [sp, #28]
 800a3f4:	4654      	mov	r4, sl
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f04f 0c0a 	mov.w	ip, #10
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a402:	3b30      	subs	r3, #48	; 0x30
 800a404:	2b09      	cmp	r3, #9
 800a406:	d94d      	bls.n	800a4a4 <_svfiprintf_r+0x17c>
 800a408:	b1b0      	cbz	r0, 800a438 <_svfiprintf_r+0x110>
 800a40a:	9207      	str	r2, [sp, #28]
 800a40c:	e014      	b.n	800a438 <_svfiprintf_r+0x110>
 800a40e:	eba0 0308 	sub.w	r3, r0, r8
 800a412:	fa09 f303 	lsl.w	r3, r9, r3
 800a416:	4313      	orrs	r3, r2
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	46a2      	mov	sl, r4
 800a41c:	e7d2      	b.n	800a3c4 <_svfiprintf_r+0x9c>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	1d19      	adds	r1, r3, #4
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	9103      	str	r1, [sp, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	bfbb      	ittet	lt
 800a42a:	425b      	neglt	r3, r3
 800a42c:	f042 0202 	orrlt.w	r2, r2, #2
 800a430:	9307      	strge	r3, [sp, #28]
 800a432:	9307      	strlt	r3, [sp, #28]
 800a434:	bfb8      	it	lt
 800a436:	9204      	strlt	r2, [sp, #16]
 800a438:	7823      	ldrb	r3, [r4, #0]
 800a43a:	2b2e      	cmp	r3, #46	; 0x2e
 800a43c:	d10c      	bne.n	800a458 <_svfiprintf_r+0x130>
 800a43e:	7863      	ldrb	r3, [r4, #1]
 800a440:	2b2a      	cmp	r3, #42	; 0x2a
 800a442:	d134      	bne.n	800a4ae <_svfiprintf_r+0x186>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	1d1a      	adds	r2, r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	9203      	str	r2, [sp, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bfb8      	it	lt
 800a450:	f04f 33ff 	movlt.w	r3, #4294967295
 800a454:	3402      	adds	r4, #2
 800a456:	9305      	str	r3, [sp, #20]
 800a458:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a520 <_svfiprintf_r+0x1f8>
 800a45c:	7821      	ldrb	r1, [r4, #0]
 800a45e:	2203      	movs	r2, #3
 800a460:	4650      	mov	r0, sl
 800a462:	f7f5 fecd 	bl	8000200 <memchr>
 800a466:	b138      	cbz	r0, 800a478 <_svfiprintf_r+0x150>
 800a468:	9b04      	ldr	r3, [sp, #16]
 800a46a:	eba0 000a 	sub.w	r0, r0, sl
 800a46e:	2240      	movs	r2, #64	; 0x40
 800a470:	4082      	lsls	r2, r0
 800a472:	4313      	orrs	r3, r2
 800a474:	3401      	adds	r4, #1
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a47c:	4825      	ldr	r0, [pc, #148]	; (800a514 <_svfiprintf_r+0x1ec>)
 800a47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a482:	2206      	movs	r2, #6
 800a484:	f7f5 febc 	bl	8000200 <memchr>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d038      	beq.n	800a4fe <_svfiprintf_r+0x1d6>
 800a48c:	4b22      	ldr	r3, [pc, #136]	; (800a518 <_svfiprintf_r+0x1f0>)
 800a48e:	bb1b      	cbnz	r3, 800a4d8 <_svfiprintf_r+0x1b0>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	3307      	adds	r3, #7
 800a494:	f023 0307 	bic.w	r3, r3, #7
 800a498:	3308      	adds	r3, #8
 800a49a:	9303      	str	r3, [sp, #12]
 800a49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49e:	4433      	add	r3, r6
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	e768      	b.n	800a376 <_svfiprintf_r+0x4e>
 800a4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4a8:	460c      	mov	r4, r1
 800a4aa:	2001      	movs	r0, #1
 800a4ac:	e7a6      	b.n	800a3fc <_svfiprintf_r+0xd4>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	f04f 0c0a 	mov.w	ip, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4c0:	3a30      	subs	r2, #48	; 0x30
 800a4c2:	2a09      	cmp	r2, #9
 800a4c4:	d903      	bls.n	800a4ce <_svfiprintf_r+0x1a6>
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0c6      	beq.n	800a458 <_svfiprintf_r+0x130>
 800a4ca:	9105      	str	r1, [sp, #20]
 800a4cc:	e7c4      	b.n	800a458 <_svfiprintf_r+0x130>
 800a4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7f0      	b.n	800a4ba <_svfiprintf_r+0x192>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <_svfiprintf_r+0x1f4>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	f3af 8000 	nop.w
 800a4e8:	1c42      	adds	r2, r0, #1
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	d1d6      	bne.n	800a49c <_svfiprintf_r+0x174>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	065b      	lsls	r3, r3, #25
 800a4f2:	f53f af2d 	bmi.w	800a350 <_svfiprintf_r+0x28>
 800a4f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f8:	b01d      	add	sp, #116	; 0x74
 800a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fe:	ab03      	add	r3, sp, #12
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	462a      	mov	r2, r5
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_svfiprintf_r+0x1f4>)
 800a506:	a904      	add	r1, sp, #16
 800a508:	4638      	mov	r0, r7
 800a50a:	f000 f879 	bl	800a600 <_printf_i>
 800a50e:	e7eb      	b.n	800a4e8 <_svfiprintf_r+0x1c0>
 800a510:	0800aa54 	.word	0x0800aa54
 800a514:	0800aa5e 	.word	0x0800aa5e
 800a518:	00000000 	.word	0x00000000
 800a51c:	0800a275 	.word	0x0800a275
 800a520:	0800aa5a 	.word	0x0800aa5a

0800a524 <_printf_common>:
 800a524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a528:	4616      	mov	r6, r2
 800a52a:	4699      	mov	r9, r3
 800a52c:	688a      	ldr	r2, [r1, #8]
 800a52e:	690b      	ldr	r3, [r1, #16]
 800a530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a534:	4293      	cmp	r3, r2
 800a536:	bfb8      	it	lt
 800a538:	4613      	movlt	r3, r2
 800a53a:	6033      	str	r3, [r6, #0]
 800a53c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a540:	4607      	mov	r7, r0
 800a542:	460c      	mov	r4, r1
 800a544:	b10a      	cbz	r2, 800a54a <_printf_common+0x26>
 800a546:	3301      	adds	r3, #1
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	0699      	lsls	r1, r3, #26
 800a54e:	bf42      	ittt	mi
 800a550:	6833      	ldrmi	r3, [r6, #0]
 800a552:	3302      	addmi	r3, #2
 800a554:	6033      	strmi	r3, [r6, #0]
 800a556:	6825      	ldr	r5, [r4, #0]
 800a558:	f015 0506 	ands.w	r5, r5, #6
 800a55c:	d106      	bne.n	800a56c <_printf_common+0x48>
 800a55e:	f104 0a19 	add.w	sl, r4, #25
 800a562:	68e3      	ldr	r3, [r4, #12]
 800a564:	6832      	ldr	r2, [r6, #0]
 800a566:	1a9b      	subs	r3, r3, r2
 800a568:	42ab      	cmp	r3, r5
 800a56a:	dc26      	bgt.n	800a5ba <_printf_common+0x96>
 800a56c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a570:	1e13      	subs	r3, r2, #0
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	bf18      	it	ne
 800a576:	2301      	movne	r3, #1
 800a578:	0692      	lsls	r2, r2, #26
 800a57a:	d42b      	bmi.n	800a5d4 <_printf_common+0xb0>
 800a57c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a580:	4649      	mov	r1, r9
 800a582:	4638      	mov	r0, r7
 800a584:	47c0      	blx	r8
 800a586:	3001      	adds	r0, #1
 800a588:	d01e      	beq.n	800a5c8 <_printf_common+0xa4>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	6922      	ldr	r2, [r4, #16]
 800a58e:	f003 0306 	and.w	r3, r3, #6
 800a592:	2b04      	cmp	r3, #4
 800a594:	bf02      	ittt	eq
 800a596:	68e5      	ldreq	r5, [r4, #12]
 800a598:	6833      	ldreq	r3, [r6, #0]
 800a59a:	1aed      	subeq	r5, r5, r3
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	bf0c      	ite	eq
 800a5a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a4:	2500      	movne	r5, #0
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	bfc4      	itt	gt
 800a5aa:	1a9b      	subgt	r3, r3, r2
 800a5ac:	18ed      	addgt	r5, r5, r3
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	341a      	adds	r4, #26
 800a5b2:	42b5      	cmp	r5, r6
 800a5b4:	d11a      	bne.n	800a5ec <_printf_common+0xc8>
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e008      	b.n	800a5cc <_printf_common+0xa8>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4652      	mov	r2, sl
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	47c0      	blx	r8
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d103      	bne.n	800a5d0 <_printf_common+0xac>
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	3501      	adds	r5, #1
 800a5d2:	e7c6      	b.n	800a562 <_printf_common+0x3e>
 800a5d4:	18e1      	adds	r1, r4, r3
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	2030      	movs	r0, #48	; 0x30
 800a5da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5de:	4422      	add	r2, r4
 800a5e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e8:	3302      	adds	r3, #2
 800a5ea:	e7c7      	b.n	800a57c <_printf_common+0x58>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	47c0      	blx	r8
 800a5f6:	3001      	adds	r0, #1
 800a5f8:	d0e6      	beq.n	800a5c8 <_printf_common+0xa4>
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7d9      	b.n	800a5b2 <_printf_common+0x8e>
	...

0800a600 <_printf_i>:
 800a600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	7e0f      	ldrb	r7, [r1, #24]
 800a606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a608:	2f78      	cmp	r7, #120	; 0x78
 800a60a:	4691      	mov	r9, r2
 800a60c:	4680      	mov	r8, r0
 800a60e:	460c      	mov	r4, r1
 800a610:	469a      	mov	sl, r3
 800a612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a616:	d807      	bhi.n	800a628 <_printf_i+0x28>
 800a618:	2f62      	cmp	r7, #98	; 0x62
 800a61a:	d80a      	bhi.n	800a632 <_printf_i+0x32>
 800a61c:	2f00      	cmp	r7, #0
 800a61e:	f000 80d4 	beq.w	800a7ca <_printf_i+0x1ca>
 800a622:	2f58      	cmp	r7, #88	; 0x58
 800a624:	f000 80c0 	beq.w	800a7a8 <_printf_i+0x1a8>
 800a628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a62c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a630:	e03a      	b.n	800a6a8 <_printf_i+0xa8>
 800a632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a636:	2b15      	cmp	r3, #21
 800a638:	d8f6      	bhi.n	800a628 <_printf_i+0x28>
 800a63a:	a101      	add	r1, pc, #4	; (adr r1, 800a640 <_printf_i+0x40>)
 800a63c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a640:	0800a699 	.word	0x0800a699
 800a644:	0800a6ad 	.word	0x0800a6ad
 800a648:	0800a629 	.word	0x0800a629
 800a64c:	0800a629 	.word	0x0800a629
 800a650:	0800a629 	.word	0x0800a629
 800a654:	0800a629 	.word	0x0800a629
 800a658:	0800a6ad 	.word	0x0800a6ad
 800a65c:	0800a629 	.word	0x0800a629
 800a660:	0800a629 	.word	0x0800a629
 800a664:	0800a629 	.word	0x0800a629
 800a668:	0800a629 	.word	0x0800a629
 800a66c:	0800a7b1 	.word	0x0800a7b1
 800a670:	0800a6d9 	.word	0x0800a6d9
 800a674:	0800a76b 	.word	0x0800a76b
 800a678:	0800a629 	.word	0x0800a629
 800a67c:	0800a629 	.word	0x0800a629
 800a680:	0800a7d3 	.word	0x0800a7d3
 800a684:	0800a629 	.word	0x0800a629
 800a688:	0800a6d9 	.word	0x0800a6d9
 800a68c:	0800a629 	.word	0x0800a629
 800a690:	0800a629 	.word	0x0800a629
 800a694:	0800a773 	.word	0x0800a773
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	1d1a      	adds	r2, r3, #4
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	602a      	str	r2, [r5, #0]
 800a6a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e09f      	b.n	800a7ec <_printf_i+0x1ec>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	682b      	ldr	r3, [r5, #0]
 800a6b0:	0607      	lsls	r7, r0, #24
 800a6b2:	f103 0104 	add.w	r1, r3, #4
 800a6b6:	6029      	str	r1, [r5, #0]
 800a6b8:	d501      	bpl.n	800a6be <_printf_i+0xbe>
 800a6ba:	681e      	ldr	r6, [r3, #0]
 800a6bc:	e003      	b.n	800a6c6 <_printf_i+0xc6>
 800a6be:	0646      	lsls	r6, r0, #25
 800a6c0:	d5fb      	bpl.n	800a6ba <_printf_i+0xba>
 800a6c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	da03      	bge.n	800a6d2 <_printf_i+0xd2>
 800a6ca:	232d      	movs	r3, #45	; 0x2d
 800a6cc:	4276      	negs	r6, r6
 800a6ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6d2:	485a      	ldr	r0, [pc, #360]	; (800a83c <_printf_i+0x23c>)
 800a6d4:	230a      	movs	r3, #10
 800a6d6:	e012      	b.n	800a6fe <_printf_i+0xfe>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6820      	ldr	r0, [r4, #0]
 800a6dc:	1d19      	adds	r1, r3, #4
 800a6de:	6029      	str	r1, [r5, #0]
 800a6e0:	0605      	lsls	r5, r0, #24
 800a6e2:	d501      	bpl.n	800a6e8 <_printf_i+0xe8>
 800a6e4:	681e      	ldr	r6, [r3, #0]
 800a6e6:	e002      	b.n	800a6ee <_printf_i+0xee>
 800a6e8:	0641      	lsls	r1, r0, #25
 800a6ea:	d5fb      	bpl.n	800a6e4 <_printf_i+0xe4>
 800a6ec:	881e      	ldrh	r6, [r3, #0]
 800a6ee:	4853      	ldr	r0, [pc, #332]	; (800a83c <_printf_i+0x23c>)
 800a6f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6f2:	bf0c      	ite	eq
 800a6f4:	2308      	moveq	r3, #8
 800a6f6:	230a      	movne	r3, #10
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6fe:	6865      	ldr	r5, [r4, #4]
 800a700:	60a5      	str	r5, [r4, #8]
 800a702:	2d00      	cmp	r5, #0
 800a704:	bfa2      	ittt	ge
 800a706:	6821      	ldrge	r1, [r4, #0]
 800a708:	f021 0104 	bicge.w	r1, r1, #4
 800a70c:	6021      	strge	r1, [r4, #0]
 800a70e:	b90e      	cbnz	r6, 800a714 <_printf_i+0x114>
 800a710:	2d00      	cmp	r5, #0
 800a712:	d04b      	beq.n	800a7ac <_printf_i+0x1ac>
 800a714:	4615      	mov	r5, r2
 800a716:	fbb6 f1f3 	udiv	r1, r6, r3
 800a71a:	fb03 6711 	mls	r7, r3, r1, r6
 800a71e:	5dc7      	ldrb	r7, [r0, r7]
 800a720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a724:	4637      	mov	r7, r6
 800a726:	42bb      	cmp	r3, r7
 800a728:	460e      	mov	r6, r1
 800a72a:	d9f4      	bls.n	800a716 <_printf_i+0x116>
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d10b      	bne.n	800a748 <_printf_i+0x148>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	07de      	lsls	r6, r3, #31
 800a734:	d508      	bpl.n	800a748 <_printf_i+0x148>
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	6861      	ldr	r1, [r4, #4]
 800a73a:	4299      	cmp	r1, r3
 800a73c:	bfde      	ittt	le
 800a73e:	2330      	movle	r3, #48	; 0x30
 800a740:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a744:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a748:	1b52      	subs	r2, r2, r5
 800a74a:	6122      	str	r2, [r4, #16]
 800a74c:	f8cd a000 	str.w	sl, [sp]
 800a750:	464b      	mov	r3, r9
 800a752:	aa03      	add	r2, sp, #12
 800a754:	4621      	mov	r1, r4
 800a756:	4640      	mov	r0, r8
 800a758:	f7ff fee4 	bl	800a524 <_printf_common>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d14a      	bne.n	800a7f6 <_printf_i+0x1f6>
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	b004      	add	sp, #16
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	f043 0320 	orr.w	r3, r3, #32
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	4833      	ldr	r0, [pc, #204]	; (800a840 <_printf_i+0x240>)
 800a774:	2778      	movs	r7, #120	; 0x78
 800a776:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	6829      	ldr	r1, [r5, #0]
 800a77e:	061f      	lsls	r7, r3, #24
 800a780:	f851 6b04 	ldr.w	r6, [r1], #4
 800a784:	d402      	bmi.n	800a78c <_printf_i+0x18c>
 800a786:	065f      	lsls	r7, r3, #25
 800a788:	bf48      	it	mi
 800a78a:	b2b6      	uxthmi	r6, r6
 800a78c:	07df      	lsls	r7, r3, #31
 800a78e:	bf48      	it	mi
 800a790:	f043 0320 	orrmi.w	r3, r3, #32
 800a794:	6029      	str	r1, [r5, #0]
 800a796:	bf48      	it	mi
 800a798:	6023      	strmi	r3, [r4, #0]
 800a79a:	b91e      	cbnz	r6, 800a7a4 <_printf_i+0x1a4>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	f023 0320 	bic.w	r3, r3, #32
 800a7a2:	6023      	str	r3, [r4, #0]
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	e7a7      	b.n	800a6f8 <_printf_i+0xf8>
 800a7a8:	4824      	ldr	r0, [pc, #144]	; (800a83c <_printf_i+0x23c>)
 800a7aa:	e7e4      	b.n	800a776 <_printf_i+0x176>
 800a7ac:	4615      	mov	r5, r2
 800a7ae:	e7bd      	b.n	800a72c <_printf_i+0x12c>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	6826      	ldr	r6, [r4, #0]
 800a7b4:	6961      	ldr	r1, [r4, #20]
 800a7b6:	1d18      	adds	r0, r3, #4
 800a7b8:	6028      	str	r0, [r5, #0]
 800a7ba:	0635      	lsls	r5, r6, #24
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	d501      	bpl.n	800a7c4 <_printf_i+0x1c4>
 800a7c0:	6019      	str	r1, [r3, #0]
 800a7c2:	e002      	b.n	800a7ca <_printf_i+0x1ca>
 800a7c4:	0670      	lsls	r0, r6, #25
 800a7c6:	d5fb      	bpl.n	800a7c0 <_printf_i+0x1c0>
 800a7c8:	8019      	strh	r1, [r3, #0]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	6123      	str	r3, [r4, #16]
 800a7ce:	4615      	mov	r5, r2
 800a7d0:	e7bc      	b.n	800a74c <_printf_i+0x14c>
 800a7d2:	682b      	ldr	r3, [r5, #0]
 800a7d4:	1d1a      	adds	r2, r3, #4
 800a7d6:	602a      	str	r2, [r5, #0]
 800a7d8:	681d      	ldr	r5, [r3, #0]
 800a7da:	6862      	ldr	r2, [r4, #4]
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f7f5 fd0e 	bl	8000200 <memchr>
 800a7e4:	b108      	cbz	r0, 800a7ea <_printf_i+0x1ea>
 800a7e6:	1b40      	subs	r0, r0, r5
 800a7e8:	6060      	str	r0, [r4, #4]
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f4:	e7aa      	b.n	800a74c <_printf_i+0x14c>
 800a7f6:	6923      	ldr	r3, [r4, #16]
 800a7f8:	462a      	mov	r2, r5
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	4640      	mov	r0, r8
 800a7fe:	47d0      	blx	sl
 800a800:	3001      	adds	r0, #1
 800a802:	d0ad      	beq.n	800a760 <_printf_i+0x160>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	079b      	lsls	r3, r3, #30
 800a808:	d413      	bmi.n	800a832 <_printf_i+0x232>
 800a80a:	68e0      	ldr	r0, [r4, #12]
 800a80c:	9b03      	ldr	r3, [sp, #12]
 800a80e:	4298      	cmp	r0, r3
 800a810:	bfb8      	it	lt
 800a812:	4618      	movlt	r0, r3
 800a814:	e7a6      	b.n	800a764 <_printf_i+0x164>
 800a816:	2301      	movs	r3, #1
 800a818:	4632      	mov	r2, r6
 800a81a:	4649      	mov	r1, r9
 800a81c:	4640      	mov	r0, r8
 800a81e:	47d0      	blx	sl
 800a820:	3001      	adds	r0, #1
 800a822:	d09d      	beq.n	800a760 <_printf_i+0x160>
 800a824:	3501      	adds	r5, #1
 800a826:	68e3      	ldr	r3, [r4, #12]
 800a828:	9903      	ldr	r1, [sp, #12]
 800a82a:	1a5b      	subs	r3, r3, r1
 800a82c:	42ab      	cmp	r3, r5
 800a82e:	dcf2      	bgt.n	800a816 <_printf_i+0x216>
 800a830:	e7eb      	b.n	800a80a <_printf_i+0x20a>
 800a832:	2500      	movs	r5, #0
 800a834:	f104 0619 	add.w	r6, r4, #25
 800a838:	e7f5      	b.n	800a826 <_printf_i+0x226>
 800a83a:	bf00      	nop
 800a83c:	0800aa65 	.word	0x0800aa65
 800a840:	0800aa76 	.word	0x0800aa76

0800a844 <memmove>:
 800a844:	4288      	cmp	r0, r1
 800a846:	b510      	push	{r4, lr}
 800a848:	eb01 0402 	add.w	r4, r1, r2
 800a84c:	d902      	bls.n	800a854 <memmove+0x10>
 800a84e:	4284      	cmp	r4, r0
 800a850:	4623      	mov	r3, r4
 800a852:	d807      	bhi.n	800a864 <memmove+0x20>
 800a854:	1e43      	subs	r3, r0, #1
 800a856:	42a1      	cmp	r1, r4
 800a858:	d008      	beq.n	800a86c <memmove+0x28>
 800a85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a862:	e7f8      	b.n	800a856 <memmove+0x12>
 800a864:	4402      	add	r2, r0
 800a866:	4601      	mov	r1, r0
 800a868:	428a      	cmp	r2, r1
 800a86a:	d100      	bne.n	800a86e <memmove+0x2a>
 800a86c:	bd10      	pop	{r4, pc}
 800a86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a876:	e7f7      	b.n	800a868 <memmove+0x24>

0800a878 <_sbrk_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	4d06      	ldr	r5, [pc, #24]	; (800a894 <_sbrk_r+0x1c>)
 800a87c:	2300      	movs	r3, #0
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	602b      	str	r3, [r5, #0]
 800a884:	f7f7 fad8 	bl	8001e38 <_sbrk>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_sbrk_r+0x1a>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_sbrk_r+0x1a>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	20001860 	.word	0x20001860

0800a898 <_realloc_r>:
 800a898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89c:	4680      	mov	r8, r0
 800a89e:	4614      	mov	r4, r2
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	b921      	cbnz	r1, 800a8ae <_realloc_r+0x16>
 800a8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	f7ff bc57 	b.w	800a15c <_malloc_r>
 800a8ae:	b92a      	cbnz	r2, 800a8bc <_realloc_r+0x24>
 800a8b0:	f7ff fbe8 	bl	800a084 <_free_r>
 800a8b4:	4625      	mov	r5, r4
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	f000 f81b 	bl	800a8f6 <_malloc_usable_size_r>
 800a8c0:	4284      	cmp	r4, r0
 800a8c2:	4607      	mov	r7, r0
 800a8c4:	d802      	bhi.n	800a8cc <_realloc_r+0x34>
 800a8c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8ca:	d812      	bhi.n	800a8f2 <_realloc_r+0x5a>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f7ff fc44 	bl	800a15c <_malloc_r>
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0ed      	beq.n	800a8b6 <_realloc_r+0x1e>
 800a8da:	42bc      	cmp	r4, r7
 800a8dc:	4622      	mov	r2, r4
 800a8de:	4631      	mov	r1, r6
 800a8e0:	bf28      	it	cs
 800a8e2:	463a      	movcs	r2, r7
 800a8e4:	f7ff fbc0 	bl	800a068 <memcpy>
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4640      	mov	r0, r8
 800a8ec:	f7ff fbca 	bl	800a084 <_free_r>
 800a8f0:	e7e1      	b.n	800a8b6 <_realloc_r+0x1e>
 800a8f2:	4635      	mov	r5, r6
 800a8f4:	e7df      	b.n	800a8b6 <_realloc_r+0x1e>

0800a8f6 <_malloc_usable_size_r>:
 800a8f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fa:	1f18      	subs	r0, r3, #4
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfbc      	itt	lt
 800a900:	580b      	ldrlt	r3, [r1, r0]
 800a902:	18c0      	addlt	r0, r0, r3
 800a904:	4770      	bx	lr
	...

0800a908 <_init>:
 800a908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90a:	bf00      	nop
 800a90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a90e:	bc08      	pop	{r3}
 800a910:	469e      	mov	lr, r3
 800a912:	4770      	bx	lr

0800a914 <_fini>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	bf00      	nop
 800a918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a91a:	bc08      	pop	{r3}
 800a91c:	469e      	mov	lr, r3
 800a91e:	4770      	bx	lr
